<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekIBLi</title>
  
  <subtitle>For Coder</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-14T02:18:58.306Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>gaolei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://example.com/wiki/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/wiki/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-14T01:55:55.000Z</published>
    <updated>2021-07-14T02:18:58.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><p><code>git init </code><br><code>git add .</code><br><code>git commit -m &lt;message&gt;</code><br><code>git remote add &lt;name&gt; &lt;url&gt;</code><br><code>git push</code><br><code>git push &lt;name&gt;</code><br><code>git push --set-upstream &lt;name&gt; &lt;branch&gt;</code></p><h2 id="批量删除分支"><a href="#批量删除分支" class="headerlink" title="批量删除分支"></a>批量删除分支</h2><p>远程：<code>git branch -r| grep &#39;ss-1&#39; | sed &#39;s/origin\///g&#39; | xargs -I &#123;&#125; git push origin :&#123;&#125;</code><br>本地：<code>git branch -a | grep &#39;feature-re-1&#39; | xargs git branch -D</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始化本地仓库&quot;&gt;&lt;a href=&quot;#初始化本地仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化本地仓库&quot;&gt;&lt;/a&gt;初始化本地仓库&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git init &lt;/code&gt;&lt;br&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;b</summary>
      
    
    
    
    <category term="Develop Tools" scheme="http://example.com/categories/Develop-Tools/"/>
    
    <category term="Git" scheme="http://example.com/categories/Develop-Tools/Git/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://example.com/wiki/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/wiki/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-13T03:44:22.000Z</published>
    <updated>2021-07-13T03:56:45.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><h2 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h2><h2 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h2><ul><li>linux 在文档中查找关键字个数<br><code>grep -o “关键字” 文档名 | wc -l </code><br><code>grep -o “关键字” 文档名 | sort | uniq -c</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用户相关&quot;&gt;&lt;a href=&quot;#用户相关&quot; class=&quot;headerlink&quot; title=&quot;用户相关&quot;&gt;&lt;/a&gt;用户相关&lt;/h2&gt;&lt;h2 id=&quot;文件相关&quot;&gt;&lt;a href=&quot;#文件相关&quot; class=&quot;headerlink&quot; title=&quot;文件相关&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Linux System" scheme="http://example.com/categories/Linux-System/"/>
    
    <category term="Common commands" scheme="http://example.com/categories/Linux-System/Common-commands/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>段合并</title>
    <link href="http://example.com/wiki/%E6%AE%B5%E5%90%88%E5%B9%B6/"/>
    <id>http://example.com/wiki/%E6%AE%B5%E5%90%88%E5%B9%B6/</id>
    <published>2021-07-08T12:57:54.000Z</published>
    <updated>2021-07-08T13:37:17.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://learnku.com/articles/41593">learnku.com</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learnku.com/articles/41593</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Getting Started" scheme="http://example.com/categories/Elasticsearch/Getting-Started/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>统计去重数据 (近似度量)</title>
    <link href="http://example.com/wiki/%E7%BB%9F%E8%AE%A1%E5%8E%BB%E9%87%8D%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/wiki/%E7%BB%9F%E8%AE%A1%E5%8E%BB%E9%87%8D%E6%95%B0%E6%8D%AE/</id>
    <published>2021-07-08T08:09:05.000Z</published>
    <updated>2021-07-08T13:21:20.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cardinality用法"><a href="#cardinality用法" class="headerlink" title="cardinality用法"></a>cardinality用法</h2><p>常用写法如下👇<br><code>curl -X GET &quot;localhost:9200/cars/transactions/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;months&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;date_histogram&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;sold&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interval&quot;</span>: <span class="string">&quot;month&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;distinct_colors&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;cardinality&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="精度问题"><a href="#精度问题" class="headerlink" title="精度问题"></a>精度问题</h2><p><code>cardinality</code> 度量是一个 <code>近似算法</code>。 它是基于 HyperLogLog++ （HLL）算法的。 HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。</p><p>我们不需要理解技术细节， 但我们最好应该关注一下这个算法的 特性 ：</p><ul><li>可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）。</li><li>小的数据集精度是非常高的。</li><li>我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。</li></ul><p>要配置精度，我们必须指定 <code>precision_threshold</code> 参数的值。 这个阈值定义了在何种基数水平下我们希望得到一个近乎精确的结果。参考以下示例：</p><p><code>curl -X GET &quot;localhost:9200/cars/transactions/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;distinct_colors&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;cardinality&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;precision_threshold&quot;</span> : <span class="number">100</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ ⚠️<br><code>precision_threshold</code> 接受 0–40000 之间的数字，更大的值还是会被当作 40000 来处理 </p><p>示例会确保当字段唯一值在 100 以内时会得到非常准确的结果。尽管算法是无法保证这点的，但如果基数在阈值以下，几乎总是 100% 正确的。高于阈值的基数会开始节省内存而牺牲准确度，同时也会对度量结果带入误差。</p><p>对于指定的阈值，<code>HLL</code> 的数据结构会大概使用 <code>precision_threshold</code> * 8 字节的内存，所以就必须在牺牲内存和获得额外的准确度间做平衡。</p><p>在实际应用中， 100 的阈值可以在唯一值为百万的情况下仍然将误差维持 5% 以内</p><h2 id="速度问题"><a href="#速度问题" class="headerlink" title="速度问题"></a>速度问题</h2><p>如果想要获得唯一值的数目， 通常 需要查询整个数据集合（或几乎所有数据）。 所有基于所有数据的操作都必须迅速，原因是显然的。 <code>HyperLogLog</code> 的速度已经很快了，它只是简单的对数据做哈希以及一些位操作。</p><p>但如果速度对我们至关重要，可以做进一步的优化。 因为 HLL 只需要字段内容的哈希值，我们可以在索引时就预先计算好。 就能在查询时跳过哈希计算然后将哈希值从 <code>fielddata</code> 直接加载出来。</p><blockquote><p>预先计算哈希值只对内容很长或者基数很高的字段有用，计算这些字段的哈希值的消耗在查询时是无法忽略的。<br>  尽管数值字段的哈希计算是非常快速的，存储它们的原始值通常需要同样（或更少）的内存空间。这对低基数的字符串字段同样适用，Elasticsearch 的内部优化能够保证每个唯一值只计算一次哈希。<br>  基本上说，预先计算并不能保证所有的字段都更快，它只对那些具有高基数和/或者内容很长的字符串字段有作用。需要记住的是，预计算只是简单的将查询消耗的时间提前转移到索引时，并非没有任何代价，区别在于你可以选择在 什么时候 做这件事，要么在索引时，要么在查询时。</p></blockquote><p>创建索引时添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT /cars/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;transactions&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;color&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hash&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;murmur3&quot;</span> </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多值字段的类型是 <code>murmur3</code> ，这是一个哈希函数。</p></blockquote><p>现在当我们执行聚合时，我们使用 <code>color.hash</code> 字段而不是 color 字段：<br><code>curl -X GET &quot;localhost:9200/cars/transactions/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;distinct_colors&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;cardinality&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color.hash&quot;</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在 <code>cardinality</code> 度量会读取 “<code>color.hash</code>“ 里的值（预先计算的哈希值），取代动态计算原始值的哈希。</p><p>单个文档节省的时间是非常少的，但是如果你聚合一亿数据，每个字段多花费 10 纳秒的时间，那么在每次查询时都会额外增加 1 秒，如果我们要在非常大量的数据里面使用 <code>cardinality</code> ，我们可以权衡使用预计算的意义，是否需要提前计算 hash，从而在查询时获得更好的性能，做一些性能测试来检验预计算哈希是否适用于你的应用场景。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cardinality用法&quot;&gt;&lt;a href=&quot;#cardinality用法&quot; class=&quot;headerlink&quot; title=&quot;cardinality用法&quot;&gt;&lt;/a&gt;cardinality用法&lt;/h2&gt;&lt;p&gt;常用写法如下👇&lt;br&gt;&lt;code&gt;curl -X </summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Aggregations" scheme="http://example.com/categories/Elasticsearch/Aggregations/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>多桶排序</title>
    <link href="http://example.com/wiki/%E5%A4%9A%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/wiki/%E5%A4%9A%E6%A1%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2021-07-08T07:50:24.000Z</published>
    <updated>2021-07-08T13:21:43.551Z</updated>
    
    <content type="html"><![CDATA[<p>多值桶（ terms 、 histogram 和 date_histogram ）动态生成很多桶。 Elasticsearch 是如何决定这些桶展示给用户的顺序呢？</p><p>默认的，桶会根据 doc_count 降序排列。这是一个好的默认行为，因为通常我们想要找到文档中与查询条件相关的最大值：售价、人口数量、频率。但有些时候我们希望能修改这个顺序，不同的桶有着不同的处理方式。</p><h2 id="内置排序"><a href="#内置排序" class="headerlink" title="内置排序"></a>内置排序</h2><p>这些排序模式是桶 固有的 能力：它们操作桶生成的数据 ，比如 doc_count 。 它们共享相同的语法，但是根据使用桶的不同会有些细微差别。</p><p>让我们做一个 terms 聚合但是按 doc_count 值的升序排序：</p><p><code>curl -X GET &quot;localhost:9200/cars/transactions/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;colors&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;order&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;_count&quot;</span> : <span class="string">&quot;asc&quot;</span> </span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>用关键字 _count ，我们可以按 doc_count 值的升序排序。</p><p>我们为聚合引入了一个 order 对象， 它允许我们可以根据以下几个值中的一个值进行排序：</p><ul><li>_count<br>按文档数排序。对 terms 、 histogram 、 date_histogram 有效。</li><li>_term<br>按词项的字符串值的字母顺序排序。只在 terms 内使用。</li><li>_key<br>按每个桶的键值数值排序（理论上与 _term 类似）。 只在 histogram 和 date_histogram 内使用。</li></ul><h2 id="按度量排序"><a href="#按度量排序" class="headerlink" title="按度量排序"></a>按度量排序</h2><p>有时，我们会想基于度量计算的结果值进行排序。 在我们的汽车销售分析仪表盘中，我们可能想按照汽车颜色创建一个销售条状图表，但按照汽车平均售价的升序进行排序。</p><p>我们可以增加一个度量，再指定 order 参数引用这个度量即可：</p><p><code>curl -X GET &quot;localhost:9200/cars/transactions/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;colors&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;order&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;avg_price&quot;</span> : <span class="string">&quot;asc&quot;</span> </span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;avg&quot;</span>: &#123;<span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>&#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>计算每个桶的平均售价。</p></li><li><p>桶按照计算平均值的升序排序。</p></li></ul><p>我们可以采用这种方式用任何度量排序，只需简单的引用度量的名字。不过有些度量会输出多个值。 extended_stats 度量是一个很好的例子：它输出好几个度量值。</p><p>如果我们想使用多值度量进行排序， 我们只需以关心的度量为关键词使用点式路径：<br><code>curl -X GET &quot;localhost:9200/cars/transactions/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;colors&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;order&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;stats.variance&quot;</span> : <span class="string">&quot;asc&quot;</span> </span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;stats&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;extended_stats&quot;</span>: &#123;<span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 . 符号，根据感兴趣的度量进行排序。</li></ul><h2 id="深度度量排序"><a href="#深度度量排序" class="headerlink" title="深度度量排序"></a>深度度量排序</h2><p>在前面的示例中，度量是桶的直接子节点。平均售价是根据每个 term 来计算的。 在一定条件下，我们也有可能对 更深 的度量进行排序，比如孙子桶或从孙桶。</p><p>我们可以定义更深的路径，将度量用尖括号（ &gt; ）嵌套起来，像这样： my_bucket&gt;another_bucket&gt;metric 。</p><p>需要提醒的是嵌套路径上的每个桶都必须是 单值 的。 filter 桶生成 一个单值桶：所有与过滤条件匹配的文档都在桶中。 多值桶（如：terms ）动态生成许多桶，无法通过指定一个确定路径来识别。</p><p>目前，只有三个单值桶： filter 、 global 和 reverse_nested 。让我们快速用示例说明，创建一个汽车售价的直方图，但是按照红色和绿色（不包括蓝色）车各自的方差来排序：</p><p><code>curl -X GET &quot;localhost:9200/cars/transactions/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;colors&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;histogram&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;price&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;interval&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">              <span class="attr">&quot;order&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;red_green_cars&gt;stats.variance&quot;</span> : <span class="string">&quot;asc&quot;</span> </span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;red_green_cars&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;filter&quot;</span>: &#123; <span class="attr">&quot;terms&quot;</span>: &#123;<span class="attr">&quot;color&quot;</span>: [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]&#125;&#125;, </span><br><span class="line">                    <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;stats&quot;</span>: &#123;<span class="attr">&quot;extended_stats&quot;</span>: &#123;<span class="attr">&quot;field&quot;</span> : <span class="string">&quot;price&quot;</span>&#125;&#125; </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>按照嵌套度量的方差对桶的直方图进行排序。</p></li><li><p>因为我们使用单值过滤器 filter ，我们可以使用嵌套排序。</p></li><li><p>按照生成的度量对统计结果进行排序。</p></li></ul><p>本例中，可以看到我们如何访问一个嵌套的度量。 stats 度量是 red_green_cars 聚合的子节点，而 red_green_cars 又是 colors 聚合的子节点。 为了根据这个度量排序，我们定义了路径 red_green_cars&gt;stats.variance 。我们可以这么做，因为 filter 桶是个单值桶。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多值桶（ terms 、 histogram 和 date_histogram ）动态生成很多桶。 Elasticsearch 是如何决定这些桶展示给用户的顺序呢？&lt;/p&gt;
&lt;p&gt;默认的，桶会根据 doc_count 降序排列。这是一个好的默认行为，因为通常我们想要找到文档</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Aggregations" scheme="http://example.com/categories/Elasticsearch/Aggregations/"/>
    
    
    <category term="elasticsaerch" scheme="http://example.com/tags/elasticsaerch/"/>
    
  </entry>
  
  <entry>
    <title>过滤和聚合</title>
    <link href="http://example.com/wiki/%E8%BF%87%E6%BB%A4%E5%92%8C%E8%81%9A%E5%90%88/"/>
    <id>http://example.com/wiki/%E8%BF%87%E6%BB%A4%E5%92%8C%E8%81%9A%E5%90%88/</id>
    <published>2021-07-08T07:33:26.000Z</published>
    <updated>2021-07-08T13:21:01.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤和聚合"><a href="#过滤和聚合" class="headerlink" title="过滤和聚合"></a>过滤和聚合</h2><p>聚合范围限定还有一个自然的扩展就是过滤。因为聚合是在查询结果范围内操作的，任何可以适用于查询的过滤器也可以应用在聚合上。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>如果我们想找到售价在 $10,000 美元之上的所有汽车同时也为这些车计算平均售价， 可以简单地使用一个 <code>constant_score</code> 查询和 <code>filter</code> 约束：</p><p><code>GET /cars/transactions/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;query&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;constant_score&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;price&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;gte&quot;</span>: <span class="number">10000</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;single_avg_price&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span> : &#123; <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;price&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从根本上讲，使用 <code>non-scoring</code> 查询和使用 <code>match</code> 查询没有任何区别。查询（包括了一个过滤器）返回一组文档的子集，聚合正是操作这些文档。使用 <code>filtering query</code> 会忽略评分，并有可能会缓存结果数据等等。</p><h2 id="过滤桶"><a href="#过滤桶" class="headerlink" title="过滤桶"></a>过滤桶</h2><p>但是如果我们只想对聚合结果过滤怎么办？ 假设我们正在为汽车经销商创建一个搜索页面， 我们希望显示用户搜索的结果，但是我们同时也想在页面上提供更丰富的信息，包括（与搜索匹配的）上个月度汽车的平均售价。</p><p>这里我们无法简单的做范围限定，因为有两个不同的条件。搜索结果必须是 ford ，但是聚合结果必须满足 ford AND sold &gt; now - 1M 。</p><p>为了解决这个问题，我们可以用一种特殊的桶，叫做 filter （注：过滤桶） 。 我们可以指定一个过滤桶，当文档满足过滤桶的条件时，我们将其加入到桶内。</p><p>查询结果如下：<br><code>GET /cars/transactions/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;make&quot;</span>: <span class="string">&quot;ford&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;recent_sales&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;filter&quot;</span>: &#123; </span><br><span class="line">            <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">               <span class="attr">&quot;sold&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;now-1M&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;average_price&quot;</span>:&#123;</span><br><span class="line">               <span class="attr">&quot;avg&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> </span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用 过滤 桶在 查询 范围基础上应用过滤器。</p></li><li><p>avg 度量只会对 ford 和上个月售出的文档计算平均售价。</p></li></ul><p>因为 <code>filter</code> 桶和其他桶的操作方式一样，所以可以随意将其他桶和度量嵌入其中。所有嵌套的组件都会 “继承” 这个过滤，这使我们可以按需针对聚合过滤出选择部分。</p><h2 id="后过滤器"><a href="#后过滤器" class="headerlink" title="后过滤器"></a>后过滤器</h2><p>目前为止，我们可以同时对搜索结果和聚合结果进行过滤（不计算得分的 filter 查询），以及针对聚合结果的一部分进行过滤（ filter 桶）。</p><p>我们可能会想，”只过滤搜索结果，不过滤聚合结果呢？” 答案是使用 post_filter 。</p><p>它是接收一个过滤器的顶层搜索请求元素。这个过滤器在查询 之后 执行（这正是该过滤器的名字的由来：它在查询之后 post 执行）。正因为它在查询之后执行，它对查询范围没有任何影响，所以对聚合也不会有任何影响。</p><p>我们可以利用这个行为对查询条件应用更多的过滤器，而不会影响其他的操作，就如 UI 上的各个分类面。让我们为汽车经销商设计另外一个搜索页面，这个页面允许用户搜索汽车同时可以根据颜色来过滤。颜色的选项是通过聚合获得的：</p><p><code>GET /cars/transactions/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;make&quot;</span>: <span class="string">&quot;ford&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;post_filter&quot;</span>: &#123;    </span><br><span class="line">        <span class="attr">&quot;term&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;color&quot;</span> : <span class="string">&quot;green&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;all_colors&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123; <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;color&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>post_filter 元素是 top-level 而且仅对命中结果进行过滤。</p></blockquote><p>查询 部分找到所有的 ford 汽车，然后用 terms 聚合创建一个颜色列表。因为聚合对查询范围进行操作，颜色列表与福特汽车有的颜色相对应。</p><p>最后， post_filter 会过滤搜索结果，只展示绿色 ford 汽车。这在查询执行过 后 发生，所以聚合不受影响。</p><p>这通常对 UI 的连贯一致性很重要，可以想象用户在界面商选择了一类颜色（比如：绿色），期望的是搜索结果已经被过滤了，而 不是 过滤界面上的选项。如果我们应用 filter 查询，界面会马上变成 只 显示 绿色 作为选项，这不是用户想要的！</p><p>⚠️ ⚠️ ⚠️</p><h2 id="性能考虑（Performance-consideration）"><a href="#性能考虑（Performance-consideration）" class="headerlink" title="性能考虑（Performance consideration）"></a>性能考虑（Performance consideration）</h2><p>当你需要对搜索结果和聚合结果做不同的过滤时，你才应该使用 post_filter ， 有时用户会在普通搜索使用 post_filter 。</p><p>不要这么做！ post_filter 的特性是在查询 之后 执行，任何过滤对性能带来的好处（比如缓存）都会完全失去。</p><p>在我们需要不同过滤时， post_filter 只与聚合一起使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>选择合适类型的过滤（如：搜索命中、聚合或两者兼有）通常和我们期望如何表现用户交互有关。选择合适的过滤器（或组合）取决于我们期望如何将结果呈现给用户。</p><ul><li>在 filter 过滤中的 non-scoring 查询，同时影响搜索结果和聚合结果。</li><li>filter 桶影响聚合。</li><li>post_filter 只影响搜索结果。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;过滤和聚合&quot;&gt;&lt;a href=&quot;#过滤和聚合&quot; class=&quot;headerlink&quot; title=&quot;过滤和聚合&quot;&gt;&lt;/a&gt;过滤和聚合&lt;/h2&gt;&lt;p&gt;聚合范围限定还有一个自然的扩展就是过滤。因为聚合是在查询结果范围内操作的，任何可以适用于查询的过滤器也可以应用在聚合</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Aggregations" scheme="http://example.com/categories/Elasticsearch/Aggregations/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>聚合 条形图</title>
    <link href="http://example.com/wiki/%E8%81%9A%E5%90%88-%E6%9D%A1%E5%BD%A2%E5%9B%BE/"/>
    <id>http://example.com/wiki/%E8%81%9A%E5%90%88-%E6%9D%A1%E5%BD%A2%E5%9B%BE/</id>
    <published>2021-07-08T07:11:57.000Z</published>
    <updated>2021-07-08T13:21:13.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Aggregations" scheme="http://example.com/categories/Elasticsearch/Aggregations/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>嵌套桶</title>
    <link href="http://example.com/wiki/%E5%B5%8C%E5%A5%97%E6%A1%B6/"/>
    <id>http://example.com/wiki/%E5%B5%8C%E5%A5%97%E6%A1%B6/</id>
    <published>2021-07-08T07:01:16.000Z</published>
    <updated>2021-07-08T13:21:24.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两层嵌套"><a href="#两层嵌套" class="headerlink" title="两层嵌套"></a>两层嵌套</h2><p>在我们使用不同的嵌套方案时，聚合的力量才能真正得以显现。 在前例中，我们已经看到如何将一个度量嵌入桶中，它的功能已经十分强大了。</p><p>但真正令人激动的分析来自于将桶嵌套进 另外一个桶 所能得到的结果。 现在，我们想知道每个颜色的汽车制造商的分布：</p><p><code>GET /cars/transactions/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;colors&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;color&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;avg_price&quot;</span>: &#123; </span><br><span class="line">               <span class="attr">&quot;avg&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;make&quot;</span>: &#123; </span><br><span class="line">                <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;make&quot;</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意前例中的 avg_price 度量仍然保持原位。</p></li><li><p>另一个聚合 make 被加入到了 color 颜色桶中。</p></li><li><p>这个聚合是 terms 桶，它会为每个汽车制造商生成唯一的桶。</p></li></ul><p>这里发生了一些有趣的事。 首先，我们可能会观察到之前例子中的 <code>avg_price</code> 度量完全没有变化，还在原来的位置。 一个聚合的每个 层级 都可以有多个度量或桶， <code>avg_price</code> 度量告诉我们每种颜色汽车的平均价格。它与其他的桶和度量相互独立。</p><p>这对我们的应用非常重要，因为这里面有很多相互关联，但又完全不同的度量需要收集。聚合使我们能够用一次数据请求获得所有的这些信息。</p><p>另外一件值得注意的重要事情是我们新增的这个 make 聚合，它是一个 <code>terms</code> 桶（嵌套在 colors 、 terms 桶内）。这意味着它会为数据集中的每个唯一组合生成（ color 、 make ）元组。</p><p>让我们看看返回的响应（为了简单我们只显示部分结果）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;colors&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span>: <span class="number">4</span>,</span><br><span class="line">               <span class="attr">&quot;make&quot;</span>: &#123; </span><br><span class="line">                  <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">                     &#123;</span><br><span class="line">                        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;honda&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span>: <span class="number">3</span></span><br><span class="line">                     &#125;,</span><br><span class="line">                     &#123;</span><br><span class="line">                        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;bmw&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span>: <span class="number">1</span></span><br><span class="line">                     &#125;</span><br><span class="line">                  ]</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;value&quot;</span>: <span class="number">32500</span> </span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>正如期望的那样，新的聚合嵌入在每个颜色桶中。</p></li><li><p>现在我们看见按不同制造商分解的每种颜色下车辆信息。</p></li><li><p>最终，我们看到前例中的 avg_price 度量仍然维持不变。</p></li></ul><h2 id="三层嵌套"><a href="#三层嵌套" class="headerlink" title="三层嵌套"></a>三层嵌套</h2><p>让我们回到话题的原点，在进入新话题之前，对我们的示例做最后一个修改， 为每个汽车生成商计算最低和最高的价格：<br><code>GET /cars/transactions/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;size&quot;</span> : <span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;colors&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;color&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;avg_price&quot;</span>: &#123; <span class="attr">&quot;avg&quot;</span>: &#123; <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;make&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;terms&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;make&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;aggs&quot;</span> : &#123; </span><br><span class="line">                    <span class="attr">&quot;min_price&quot;</span> : &#123; <span class="attr">&quot;min&quot;</span>: &#123; <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>&#125; &#125;, </span><br><span class="line">                    <span class="attr">&quot;max_price&quot;</span> : &#123; <span class="attr">&quot;max&quot;</span>: &#123; <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>&#125; &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们需要增加另外一个嵌套的 aggs 层级。</p></li><li><p>然后包括 min 最小度量。</p></li><li><p>以及 max 最大度量。</p></li></ul><p>得到以下输出（只显示部分结果）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;colors&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span>: <span class="number">4</span>,</span><br><span class="line">               <span class="attr">&quot;make&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">                     &#123;</span><br><span class="line">                        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;honda&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="attr">&quot;min_price&quot;</span>: &#123;</span><br><span class="line">                           <span class="attr">&quot;value&quot;</span>: <span class="number">10000</span> </span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;max_price&quot;</span>: &#123;</span><br><span class="line">                           <span class="attr">&quot;value&quot;</span>: <span class="number">20000</span> </span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;,</span><br><span class="line">                     &#123;</span><br><span class="line">                        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;bmw&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">&quot;min_price&quot;</span>: &#123;</span><br><span class="line">                           <span class="attr">&quot;value&quot;</span>: <span class="number">80000</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;max_price&quot;</span>: &#123;</span><br><span class="line">                           <span class="attr">&quot;value&quot;</span>: <span class="number">80000</span></span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                  ]</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;value&quot;</span>: <span class="number">32500</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>有了这两个桶，我们可以对查询的结果进行扩展并得到以下信息：  </p><p>有四辆红色车。<br>红色车的平均售价是 $32，500 美元。<br>其中三辆红色车是 Honda 本田制造，一辆是 BMW 宝马制造。<br>最便宜的红色本田售价为 $10，000 美元。<br>最贵的红色本田售价为 $20，000 美元。  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;两层嵌套&quot;&gt;&lt;a href=&quot;#两层嵌套&quot; class=&quot;headerlink&quot; title=&quot;两层嵌套&quot;&gt;&lt;/a&gt;两层嵌套&lt;/h2&gt;&lt;p&gt;在我们使用不同的嵌套方案时，聚合的力量才能真正得以显现。 在前例中，我们已经看到如何将一个度量嵌入桶中，它的功能已经十分强大</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Aggregations" scheme="http://example.com/categories/Elasticsearch/Aggregations/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>聚合 高级概念</title>
    <link href="http://example.com/wiki/%E8%81%9A%E5%90%88-%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/wiki/%E8%81%9A%E5%90%88-%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5/</id>
    <published>2021-07-08T06:52:35.000Z</published>
    <updated>2021-07-08T13:21:08.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桶"><a href="#桶" class="headerlink" title="桶"></a>桶</h2><p><code>桶</code> 简单来说就是满足特定条件的文档的集合：</p><ul><li>一个雇员属于 男性 桶或者 女性 桶</li><li>奥尔巴尼属于 纽约 桶</li><li>日期2014-10-28属于 十月 桶<br>当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件。如果匹配到，文档将放入相应的桶并接着进行聚合操作。</li></ul><p>桶也可以被嵌套在其他桶里面，提供层次化的或者有条件的划分方案。例如，辛辛那提会被放入俄亥俄州这个桶，而 整个 俄亥俄州桶会被放入美国这个桶。</p><p>Elasticsearch 有很多种类型的桶，能让你通过很多种方式来划分文档（<code>时间</code>、<code>最受欢迎的词</code>、<code>年龄区间</code>、<code>地理位置</code> 等等）。其实根本上都是通过同样的原理进行操作：基于条件来划分文档。</p><h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的的手段：它提供了一种给文档分组的方法来让我们可以计算感兴趣的指标。</p><p>大多数 <code>指标</code> 是简单的数学运算（例如最小值、平均值、最大值，还有汇总），这些是通过文档的值来计算。在实践中，指标能让你计算像平均薪资、最高出售价格、95%的查询延迟这样的数据。</p><h2 id="桶和指标的组合"><a href="#桶和指标的组合" class="headerlink" title="桶和指标的组合"></a>桶和指标的组合</h2><p><code>聚合</code> 是由桶和指标组成的。 聚合可能只有一个桶，可能只有一个指标，或者可能两个都有。也有可能有一些桶嵌套在其他桶里面。例如，我们可以通过所属国家来划分文档（桶），然后计算每个国家的平均薪酬（指标）。</p><p>由于桶可以被嵌套，我们可以实现非常多并且非常复杂的聚合：</p><p>1.通过国家划分文档（桶）</p><p>2.然后通过性别划分每个国家（桶）</p><p>3.然后通过年龄区间划分每种性别（桶）</p><p>4.最后，为每个年龄区间计算平均薪酬（指标）</p><p>最后将告诉你每个 &lt;国家, 性别, 年龄&gt; 组合的平均薪酬。所有的这些都在一个请求内完成并且只遍历一次数据！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;桶&quot;&gt;&lt;a href=&quot;#桶&quot; class=&quot;headerlink&quot; title=&quot;桶&quot;&gt;&lt;/a&gt;桶&lt;/h2&gt;&lt;p&gt;&lt;code&gt;桶&lt;/code&gt; 简单来说就是满足特定条件的文档的集合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个雇员属于 男性 桶或者 女性 桶&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Aggregations" scheme="http://example.com/categories/Elasticsearch/Aggregations/"/>
    
    
    <category term="elasticsaerch" scheme="http://example.com/tags/elasticsaerch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch-overview</title>
    <link href="http://example.com/wiki/elasticsearch-overview/"/>
    <id>http://example.com/wiki/elasticsearch-overview/</id>
    <published>2021-07-08T03:17:58.000Z</published>
    <updated>2021-07-08T13:15:46.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li> <a href="https://doc.codingdict.com/elasticsearch/">https://www.codingdict.com/</a></li><li> <a href="https://elasticsearch.cn/">https://elasticsearch.cn/</a></li><li> <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indexing-buffer.html">https://www.elastic.co/guide/en/</a></li><li> <a href="https://elastic.blog.csdn.net/">铭毅天下</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习资料&quot;&gt;&lt;a href=&quot;#学习资料&quot; class=&quot;headerlink&quot; title=&quot;学习资料&quot;&gt;&lt;/a&gt;学习资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://doc.codingdict.com/elasticsearch/&quot;&gt;htt</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Getting Started" scheme="http://example.com/categories/Elasticsearch/Getting-Started/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>关于 Elasticsearch 内存占用及分配</title>
    <link href="http://example.com/wiki/%E5%85%B3%E4%BA%8E-Elasticsearch-%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%88%86%E9%85%8D/"/>
    <id>http://example.com/wiki/%E5%85%B3%E4%BA%8E-Elasticsearch-%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%88%86%E9%85%8D/</id>
    <published>2021-07-08T02:39:16.000Z</published>
    <updated>2021-07-08T13:18:44.472Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 和 Lucene 对内存使用情况： </p><img src='https://nereuschen.github.io/2015/09/16/ElasticSearch%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/es-cache.png' width=500 height=550><p>Elasticsearch 限制的内存大小是 JAVA 堆空间的大小，不包括Lucene 缓存倒排索引数据空间。</p><p>Lucene 中的 倒排索引 segments 存储在文件中，为提高访问速度，都会把它加载到内存中，从而提高 Lucene 性能。所以建议至少留系统一半内存给Lucene。<br><code>Node Query Cache</code> (负责缓存f ilter 查询结果)，每个节点有一个，被所有 shard 共享，filter query查询结果要么是 yes 要么是no，不涉及 scores 的计算。<br>集群中每个节点都要配置，默认为：indices.queries.cache.size:10%</p><p><code>Indexing Buffer</code> 索引缓冲区，用于存储新索引的文档，当其被填满时，缓冲区中的文档被写入磁盘中的 <code>segments</code> 中。节点上所有 <code>shard</code> 共享。<br>缓冲区默认大小： indices.memory.index_buffer_size: 10%<br>如果缓冲区大小设置了百分百则 indices.memory.min_index_buffer_size 用于这是最小值，默认为 48mb。indices.memory.max_index_buffer_size 用于最大大小，无默认值。</p><p><code>segments</code><br>segments会长期占用内存，其初衷就是利用OS的cache提升性能。只有在Merge之后，才会释放掉标记为Delete的segments，释放部分内存。</p><p><code>Shard Request Cache</code> 用于缓存请求结果，但之缓存request size为0的。比如说 hits.total, aggregations 和 suggestions.<br>默认最大为indices.requests.cache.size:1%</p><p><code>Field Data Cache</code> 字段缓存重要用于对字段进行排序、聚合是使用。因为构建字段数据缓存代价昂贵，所以建议有足够的内训来存储。<br><code>Fielddata</code> 是 「 延迟 」 加载。如果你从来没有聚合一个分析字符串，就不会加载 fielddata 到内存中，也就不会使用大量的内存，所以可以考虑分配较小的heap给Elasticsearch。因为heap越小意味着Elasticsearch的GC会比较快，并且预留给Lucene的内存也会比较大。。<br>如果没有足够的内存保存fielddata时，Elastisearch会不断地从磁盘加载数据到内存，并剔除掉旧的内存数据。剔除操作会造成严重的磁盘I/O，并且引发大量的GC，会严重影响Elastisearch的性能。</p><p>默认情况下Fielddata会不断占用内存，直到它触发了fielddata circuit breaker。<br>fielddata circuit breaker会根据查询条件评估这次查询会使用多少内存，从而计算加载这部分内存之后，Field Data Cache所占用的内存是否会超过indices.breaker.fielddata.limit。如果超过这个值，就会触发fielddata circuit breaker，abort这次查询并且抛出异常，防止OOM。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indices.breaker.fielddata.limit:60% (默认heap的60%)  (es7之后改成70%)</span><br></pre></td></tr></table></figure><p>如果设置了indices.fielddata.cache.size，当达到size时，cache会剔除旧的fielddata。</p><blockquote><p>indices.breaker.fielddata.limit 必须大于 indices.fielddata.cache.size，否则只会触发fielddata circuit breaker，而不会剔除旧的fielddata。</p></blockquote><h2 id="配置Elasticsearch堆内存"><a href="#配置Elasticsearch堆内存" class="headerlink" title="配置Elasticsearch堆内存"></a>配置Elasticsearch堆内存</h2><p>Elasticsearch默认安装后设置的内存是 <code>1GB</code>，这是远远不够用于生产环境的。<br>有两种方式修改Elasticsearch的堆内存：</p><blockquote><ol><li>设置环境变量：<code>export ES_HEAP_SIZE=10g</code> 在es启动时会读取该变量；</li><li>启动时作为参数传递给es： <code>./bin/elasticsearch -Xmx10g -Xms10g</code></li></ol></blockquote><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>给es分配内存时要注意，至少要分配一半儿内存留给 Lucene。<br>分配给 es 的内存最好不要超过 32G ，因为如果堆大小小于 32 GB，JVM 可以利用指针压缩，这可以大大降低内存的使用：每个指针 4 字节而不是 8 字节。如果大于32G 每个指针占用 8字节，并且会占用更多的内存带宽，降低了cpu性能。</p><p>还有一点， 要关闭 <code>swap</code> 内存交换空间，禁用swapping。频繁的swapping 对服务器来说是致命的。<br>总结：给es JVM栈的内存最好不要超过32G，留给Lucene的内存越大越好，Lucene把所有的segment都缓存起来，会加快全文检索。</p><h2 id="关闭交换区"><a href="#关闭交换区" class="headerlink" title="关闭交换区"></a>关闭交换区</h2><p>这应该显而易见了，但仍然需要明确的写出来：把内存换成硬盘将毁掉服务器的性能，想象一下：涉及内存的操作是需要快速执行的。如果介质从内存变为了硬盘，一个10微秒的操作变成需要10毫秒。而且这种延迟发生在所有本该只花费10微秒的操作上，就不难理解为什么交换区对于性能来说是噩梦。</p><p>最好的选择是禁用掉操作系统的交换区。可以用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure><p>来禁用，你可能还需要编辑 <code>/etc/fstab</code> 文件。细节可以参考你的操作系统文档。</p><p>如果实际环境不允许禁用掉 <code>swap</code>，你可以尝试降低 <code>swappiness</code>。此值控制操作系统使用交换区的积极性。这可以防止在正常情况下使用交换区，但仍允许操作系统在紧急情况下将内存里的东西放到交换区。</p><p>对于大多数Linux系统来说，这可以用 <code>sysctl</code> 值来配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vm.swappiness</span> <span class="string">=</span> <span class="number">1</span> <span class="comment"># 将此值配置为1会比0好，在kernal内核的某些版本中，0可能会引起OOM异常。</span></span><br></pre></td></tr></table></figure><p>最后，如果两种方法都不可用，你应该在ElasticSearch的配置中启用 <code>mlockall.file</code>。这允许JVM锁定其使用的内存，而避免被放入操作系统交换区。</p><p>在elasticsearch.yml中，做如下设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.mlockall: true</span><br></pre></td></tr></table></figure><h2 id="查看node节点数据"><a href="#查看node节点数据" class="headerlink" title="查看node节点数据"></a>查看node节点数据</h2><p><code>GET /_cat/nodes?v&amp;h=id,ip,port,v,master,name,heap.current,heap.percent,heap.max,ram.current,ram.percent,ram.max,fielddata.memory_size,fielddata.evictions,query_cache.memory_size,query_cache.evictions, request_cache.memory_size,request_cache.evictions,request_cache.hit_count,request_cache.miss_count</code></p><p><code>GET /_cat/nodes?v&amp;h=id,heap.current,heap.percent,heap.max,ram.current,ram.percent,ram.max,fielddata.memory_size</code></p><p><code>GET /_cat/nodes?v&amp;h=id,fielddata.evictions,query_cache.memory_size,query_cache.evictions, request_cache.memory_size,request_cache.evictions,request_cache.hit_count,request_cache.miss_count</code></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://nereuschen.github.io/2015/09/16/ElasticSearch%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/"></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Elasticsearch 和 Lucene 对内存使用情况： &lt;/p&gt;
&lt;img src=&#39;https://nereuschen.github.io/2015/09/16/ElasticSearch%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Administration and Deployment" scheme="http://example.com/categories/Elasticsearch/Administration-and-Deployment/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>cross-fields跨字段查询</title>
    <link href="http://example.com/wiki/cross-fields%E8%B7%A8%E5%AD%97%E6%AE%B5%E6%9F%A5%E8%AF%A2/"/>
    <id>http://example.com/wiki/cross-fields%E8%B7%A8%E5%AD%97%E6%AE%B5%E6%9F%A5%E8%AF%A2/</id>
    <published>2021-07-07T06:41:42.000Z</published>
    <updated>2021-07-08T13:09:24.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cross_fields_queries.html#_cross_fields_queries">Elasticsearch: 权威指南 » 深入搜索 » 多字段搜索 » cross-fields 跨字段查询</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/cn/el</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Search in Depth" scheme="http://example.com/categories/Elasticsearch/Search-in-Depth/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>copy_to参数</title>
    <link href="http://example.com/wiki/copy-to%E5%8F%82%E6%95%B0/"/>
    <id>http://example.com/wiki/copy-to%E5%8F%82%E6%95%B0/</id>
    <published>2021-07-07T06:34:42.000Z</published>
    <updated>2021-07-08T13:07:44.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/custom-all.html">Elasticsearch: 权威指南 » 深入搜索 » 多字段搜索 » 自定义 _all 字段</a></li><li><a href="https://doc.codingdict.com/elasticsearch/319/">Docs » Mapping parameters（映射参数） » Mapping(映射) » copy_to（合并参数）</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/cn/el</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Search in Depth" scheme="http://example.com/categories/Elasticsearch/Search-in-Depth/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>字符串排序与多字段</title>
    <link href="http://example.com/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%A4%9A%E5%AD%97%E6%AE%B5/"/>
    <id>http://example.com/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%A4%9A%E5%AD%97%E6%AE%B5/</id>
    <published>2021-07-07T03:05:31.000Z</published>
    <updated>2021-07-08T13:28:49.165Z</updated>
    
    <content type="html"><![CDATA[<p>被解析的字符串字段也是多值字段， 但是很少会按照你想要的方式进行排序。如果你想分析一个字符串，如 fine old art ， 这包含 3 项。我们很可能想要按第一项的字母排序，然后按第二项的字母排序，诸如此类，但是 Elasticsearch 在排序过程中没有这样的信息。</p><p>你可以使用 min 和 max 排序模式（默认是 min ），但是这会导致排序以 art 或是 old ，任何一个都不是所希望的。</p><p>为了以字符串字段进行排序，这个字段应仅包含一项： 整个 not_analyzed 字符串。 但是我们仍需要 analyzed 字段，这样才能以全文进行查询</p><p>一个简单的方法是用两种方式对同一个字符串进行索引，这将在文档中包括两个字段： analyzed 用于搜索， not_analyzed 用于排序</p><p>但是保存相同的字符串两次在 _source 字段是浪费空间的。 我们真正想要做的是传递一个 单字段 但是却用两种方式索引它。所有的 _core_field 类型 (strings, numbers, Booleans, dates) 接收一个 fields 参数</p><p>该参数允许你转化一个简单的映射如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tweet&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:     <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;english&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为一个多字段映射如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tweet&quot;</span>: &#123; </span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:     <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;english&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;raw&quot;</span>: &#123; </span><br><span class="line">            <span class="attr">&quot;type&quot;</span>:  <span class="string">&quot;string&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;not_analyzed&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>tweet 主字段与之前的一样: 是一个 analyzed 全文字段。</p></li><li><p>新的 tweet.raw 子字段是 not_analyzed.</p></li></ul><p>现在，至少只要我们重新索引了我们的数据，使用 tweet 字段用于搜索，<code>tweet.raw</code> 字段用于排序：<br><code>curl -X GET &quot;localhost:9200/_search?pretty&quot; -H &#39;Content-Type: application/json&#39; -d</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;tweet&quot;</span>: <span class="string">&quot;elasticsearch&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;sort&quot;</span>: <span class="string">&quot;tweet.raw&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;被解析的字符串字段也是多值字段， 但是很少会按照你想要的方式进行排序。如果你想分析一个字符串，如 fine old art ， 这包含 3 项。我们很可能想要按第一项的字母排序，然后按第二项的字母排序，诸如此类，但是 Elasticsearch 在排序过程中没有这样的信息。</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Getting Started" scheme="http://example.com/categories/Elasticsearch/Getting-Started/"/>
    
    
  </entry>
  
  <entry>
    <title>推荐系统-Overview</title>
    <link href="http://example.com/wiki/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F-Overview/"/>
    <id>http://example.com/wiki/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F-Overview/</id>
    <published>2021-07-07T02:08:05.000Z</published>
    <updated>2021-07-13T03:45:26.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客资料"><a href="#博客资料" class="headerlink" title="博客资料"></a>博客资料</h2><ul><li><a href="https://blog.csdn.net/qq_40027052/article/details/78733365">深度解析京东个性化推荐系统演进史</a>  </li><li><a href="https://www.cnblogs.com/liuning8023/p/5522619.html">用 Mahout 和 Elasticsearch 实现推荐系统</a></li><li><a href="https://tech.meituan.com/2015/01/22/mt-recommend-practice.html">美团推荐算法实践</a></li><li><a href="https://blog.csdn.net/love284969214/article/details/82932064">58同城推荐系统设计与实现</a></li><li><a href="http://www.360doc.com/content/16/0307/22/31263000_540328712.shtml">微博推荐系统的架构演进之路</a></li><li><a href="https://blog.csdn.net/tzs_1041218129/article/details/103331908">Flink 在小红书推荐系统中的应用</a></li><li><a href="https://www.slidestalk.com/YunQi/XiaoHongShu_BigData_Platform_Evolution">小红书大数据在推荐系统中的应用</a></li><li><a href="https://www.slidestalk.com/u223/rs_in_kuaikan">快看漫画个性化推荐探索与实践</a></li><li><a href="https://zhuanlan.zhihu.com/p/45123018">数据仓库系列篇——唯品会大数据架构</a></li><li><a href="https://developer.aliyun.com/article/763941">推荐系统基本概念和架构</a></li><li><a href="https://bp.aliyun.com/detail/140">PAI平台搭建企业级个性化推荐系统 - Aliyun</a></li><li><a href="https://www.aliyun.com/product/bigdata/product/learn"></a></li><li><a href="https://toutiao.io/posts/35tpcy/preview">蘑菇街推荐工程实践</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;博客资料&quot;&gt;&lt;a href=&quot;#博客资料&quot; class=&quot;headerlink&quot; title=&quot;博客资料&quot;&gt;&lt;/a&gt;博客资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_40027052/article/detai</summary>
      
    
    
    
    <category term="Recommend System" scheme="http://example.com/categories/Recommend-System/"/>
    
    <category term="Overview" scheme="http://example.com/categories/Recommend-System/Overview/"/>
    
    
    <category term="推荐" scheme="http://example.com/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>flink 提交任务</title>
    <link href="http://example.com/wiki/flink-%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/wiki/flink-%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1/</id>
    <published>2021-07-06T15:57:04.000Z</published>
    <updated>2021-07-07T14:25:24.237Z</updated>
    
    <content type="html"><![CDATA[<p>下面演示如何通过admin页面提交任务 👇</p><h2 id="准备task-jar"><a href="#准备task-jar" class="headerlink" title="准备task jar"></a>准备task jar</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamWordCount</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建流处理执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamContextEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从socket文本流读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputDataStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于数据流进行转换计算</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String,Integer&gt;&gt; resultStream = inputDataStream.flatMap(<span class="keyword">new</span> WordCount.MyFlatMapper())</span><br><span class="line">                .keyBy(<span class="number">0</span>)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        resultStream.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>mvn install -DskipTest</code> 可以得到相应的jar</p><h2 id="admin提交jar"><a href="#admin提交jar" class="headerlink" title="admin提交jar"></a>admin提交jar</h2><img src='https://oscimg.oschina.net/oscnet/up-6f96aa46a523c9cd32f12177775b6d6fab9.png' width=900 height=450> <p>提交完jar包之后，需要设置相关参数，这个根据自己的实际情况来设置，下面是参考样例： </p><ul><li>Enter Class : com.ibli.flink.StreamWordCount<br>也就是程序入口，我们这是写了一个main方法，如果是程序的话，可以写对应bootstrap的启动类</li><li>Program Arguments : –host localhost –port 7777 </li></ul><p>点击 <code>submit</code>  之后查看提交的任务状态</p><h2 id="查看任务"><a href="#查看任务" class="headerlink" title="查看任务"></a>查看任务</h2><img src='https://oscimg.oschina.net/oscnet/up-f11b32799d87f90c6e78732db82f191be3b.png' width=900 height=450>  <p>可以看到是有两个任务，并且都是在执行状态；<br>点击一个任务，还可以查看任务详情信息，和一些其他的信息，非常全面；</p><img src="https://oscimg.oschina.net/oscnet/up-9678050d3906aae9ccead23d02927d46851.png" width=900 height=450><h2 id="查看运行时任务列表"><a href="#查看运行时任务列表" class="headerlink" title="查看运行时任务列表"></a>查看运行时任务列表</h2><img src='https://oscimg.oschina.net/oscnet/up-da8bf04ac90ae3c16095a6ebf25175b4452.png' width=900 height=350><h2 id="查看任务管理列表"><a href="#查看任务管理列表" class="headerlink" title="查看任务管理列表"></a>查看任务管理列表</h2><img src="https://oscimg.oschina.net/oscnet/up-a85746f93dc171f3d320a17c07294682bb3.png" width=900 height=450><p>点击任务可以跳转到详情页面 👇 下面是执行日志 </p><img src= 'https://oscimg.oschina.net/oscnet/up-a11c7ccc522c77d100d57a9c2a08ec9183b.png' width=900 height=500><p>我们还可以看到任务执行的标准输出结果✅</p><img src="https://oscimg.oschina.net/oscnet/up-3d990a6318fab3a11e7336fdcd271851fda.png" width=900 height=400><h2 id="任务源数据"><a href="#任务源数据" class="headerlink" title="任务源数据"></a>任务源数据</h2><p>通过nc 输入数据，由程序读取7777端口输入流并解析数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gaolei:geekibli gaolei$ nc -lk 7777</span><br><span class="line">hello java</span><br><span class="line">hello flink</span><br></pre></td></tr></table></figure><h2 id="取消任务如下"><a href="#取消任务如下" class="headerlink" title="取消任务如下"></a>取消任务如下</h2><img src='https://oscimg.oschina.net/oscnet/up-05199d86b957e0adec4e4d91390a0aebbec.png' width=900 height=400> <p>再次查看已完成任务列表 如下：</p><img src='https://oscimg.oschina.net/oscnet/up-78c97d4c4aec1641a22165735764c54b969.png' width=900 height=400>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面演示如何通过admin页面提交任务 👇&lt;/p&gt;
&lt;h2 id=&quot;准备task-jar&quot;&gt;&lt;a href=&quot;#准备task-jar&quot; class=&quot;headerlink&quot; title=&quot;准备task jar&quot;&gt;&lt;/a&gt;准备task jar&lt;/h2&gt;&lt;figure cla</summary>
      
    
    
    
    <category term="Apache Flink" scheme="http://example.com/categories/Apache-Flink/"/>
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>apache-flink-overview</title>
    <link href="http://example.com/wiki/apache-flink-overview/"/>
    <id>http://example.com/wiki/apache-flink-overview/</id>
    <published>2021-07-06T15:39:54.000Z</published>
    <updated>2021-07-06T16:20:24.847Z</updated>
    
    <content type="html"><![CDATA[<img src="https://flink.apache.org/img/flink-header-logo.svg" width=300 height=300><h2 id="学习初衷"><a href="#学习初衷" class="headerlink" title="学习初衷"></a>学习初衷</h2><p>推荐系统数据需要实时处理，使用Apache Flink实时计算用户数据，分析用户行为，达到实时业务数据分析和实现业务相关推荐；</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://ashiamd.github.io/docsify-notes/#/study/BigData/Flink/%E5%B0%9A%E7%A1%85%E8%B0%B7Flink%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">ashiamd.github.io</a></li><li><a href="https://www.bilibili.com/video/BV1qy4y1q728?p=11&spm_id_from=pageDriver">尚硅谷2021最新Java版Flink 武老师清华硕士，原IBM-CDL负责人</a></li><li><a href="https://flink.apache.org/">Apache Flink® — Stateful Computations over Data Streams</a></li><li><a href="https://flink.apache.org/zh/">Apache Flink® - 数据流上的有状态计算</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://flink.apache.org/img/flink-header-logo.svg&quot; width=300 height=300&gt;

&lt;h2 id=&quot;学习初衷&quot;&gt;&lt;a href=&quot;#学习初衷&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Apache Flink" scheme="http://example.com/categories/Apache-Flink/"/>
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>most_fields类型</title>
    <link href="http://example.com/wiki/most-fields%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/wiki/most-fields%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-07-06T12:54:23.000Z</published>
    <updated>2021-07-08T13:10:03.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多字段映射"><a href="#多字段映射" class="headerlink" title="多字段映射"></a>多字段映射</h2><p>首先要做的事情就是对我们的字段索引两次：一次使用词干模式以及一次非词干模式。为了做到这点，采用 <code>multifields</code> 来实现，已经在 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-fields.html">multifields</a> 有所介绍：</p><p><code>DELETE /my_index</code>  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123; <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">1</span> &#125;, </span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;my_type&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>: &#123; </span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>:     <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;english&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;std&quot;</span>:   &#123; </span><br><span class="line">                            <span class="attr">&quot;type&quot;</span>:     <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>title 字段使用 english 英语分析器来提取词干。</li><li>title.std 字段使用 standard 标准分析器，所以没有词干提取。</li></ul><p>接着索引一些文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/<span class="number">1</span></span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My rabbit jumps&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">PUT /my_index/my_type/<span class="number">2</span></span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Jumping jack rabbits&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>这里用一个简单 match 查询 title 标题字段是否包含 jumping rabbits （跳跃的兔子）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;jumping rabbits&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为有了 <code>english</code> 分析器，这个查询是在查找以 jump 和 rabbit 这两个被提取词的文档。两个文档的 title 字段都同时包括这两个词，所以两个文档得到的评分也相同：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span>: <span class="number">0.42039964</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">           <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My rabbit jumps&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span>: <span class="number">0.42039964</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">           <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Jumping jack rabbits&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是查询 <code>title.std</code> 字段，那么只有文档 2 是匹配的。尽管如此，如果同时查询两个字段，然后使用 <code>bool</code> 查询将评分结果 合并 ，那么两个文档都是匹配的（ <code>title</code> 字段的作用），而且文档 2 的相关度评分更高（ <code>title.std</code> 字段的作用）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>:  <span class="string">&quot;jumping rabbits&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>:   <span class="string">&quot;most_fields&quot;</span>, </span><br><span class="line">            <span class="attr">&quot;fields&quot;</span>: [ <span class="string">&quot;title&quot;</span>, <span class="string">&quot;title.std&quot;</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们希望将所有匹配字段的评分合并起来，所以使用 <code>most_fields</code> 类型。这让 <code>multi_match</code> 查询用 <code>bool</code> 查询将两个字段语句包在里面，而不是使用 <code>dis_max</code> (最佳字段) 查询。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span>: <span class="number">0.8226396</span>, </span><br><span class="line">        <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">           <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Jumping jack rabbits&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span>: <span class="number">0.10741998</span>, </span><br><span class="line">        <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">           <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My rabbit jumps&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档 2 现在的评分要比文档 1 高。</p><p>用广度匹配字段 <code>title</code> 包括尽可能多的文档——以提升召回率——同时又使用字段 <code>title.std</code> 作为 信号 将相关度更高的文档置于结果顶部。</p><p>每个字段对于最终评分的贡献可以通过自定义值 <code>boost</code> 来控制。比如，使 <code>title</code> 字段更为重要，这样同时也降低了其他信号字段的作用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>:       <span class="string">&quot;jumping rabbits&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>:        <span class="string">&quot;most_fields&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fields&quot;</span>:      [ <span class="string">&quot;title^10&quot;</span>, <span class="string">&quot;title.std&quot;</span> ] </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>title 字段的 boost 的值为 10 使它比 title.std 更重要。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/most-fields.html">Elasticsearch: 权威指南 » 深入搜索 » 多字段搜索 » 多数字段</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多字段映射&quot;&gt;&lt;a href=&quot;#多字段映射&quot; class=&quot;headerlink&quot; title=&quot;多字段映射&quot;&gt;&lt;/a&gt;多字段映射&lt;/h2&gt;&lt;p&gt;首先要做的事情就是对我们的字段索引两次：一次使用词干模式以及一次非词干模式。为了做到这点，采用 &lt;code&gt;mult</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Search in Depth" scheme="http://example.com/categories/Elasticsearch/Search-in-Depth/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>multi_match 查询</title>
    <link href="http://example.com/wiki/multi-match-%E6%9F%A5%E8%AF%A2/"/>
    <id>http://example.com/wiki/multi-match-%E6%9F%A5%E8%AF%A2/</id>
    <published>2021-07-06T12:37:26.000Z</published>
    <updated>2021-07-08T13:10:28.275Z</updated>
    
    <content type="html"><![CDATA[<p>multi_match 查询为能在多个字段上反复执行相同查询提供了一种便捷方式。</p><p>📒 📒 📒</p><blockquote><p>multi_match 多匹配查询的类型有多种，其中的三种恰巧与 了解我们的数据 中介绍的三个场景对应，即：<code>best_fields</code> 、 <code>most_fields</code> 和 <code>cross_fields</code> （最佳字段、多数字段、跨字段）。</p></blockquote><p>默认情况下，查询的类型是 <code>best_fields</code> ，这表示它会为每个字段生成一个 <code>match</code> 查询，然后将它们组合到 <code>dis_max</code> 查询的内部，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dis_max&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;queries&quot;</span>:  [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;Quick brown fox&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;minimum_should_match&quot;</span>: <span class="string">&quot;30%&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;body&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;Quick brown fox&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;minimum_should_match&quot;</span>: <span class="string">&quot;30%&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;tie_breaker&quot;</span>: <span class="number">0.3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个查询用 multi_match 重写成更简洁的形式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>:                <span class="string">&quot;Quick brown fox&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:                 <span class="string">&quot;best_fields&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>:               [ <span class="string">&quot;title&quot;</span>, <span class="string">&quot;body&quot;</span> ],</span><br><span class="line">        <span class="attr">&quot;tie_breaker&quot;</span>:          <span class="number">0.3</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_should_match&quot;</span>: <span class="string">&quot;30%&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ ⚠️ ⚠️</p><ul><li>best_fields 类型是默认值，可以不指定。</li><li>如 minimum_should_match 或 operator 这样的参数会被传递到生成的 match 查询中。</li></ul><h2 id="查询字段名称的模糊匹配"><a href="#查询字段名称的模糊匹配" class="headerlink" title="查询字段名称的模糊匹配"></a>查询字段名称的模糊匹配</h2><p>字段名称可以用 <code>模糊匹配</code> 的方式给出：任何与模糊模式正则匹配的字段都会被包括在搜索条件中，例如可以使用以下方式同时匹配 <code>book_title</code> 、 <code>chapter_title</code> 和 <code>section_title</code> （书名、章名、节名）这三个字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>:  <span class="string">&quot;Quick brown fox&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: <span class="string">&quot;*_title&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提升单个字段的权重"><a href="#提升单个字段的权重" class="headerlink" title="提升单个字段的权重"></a>提升单个字段的权重</h2><p>可以使用 ^ 字符语法为单个字段提升权重，在字段名称的末尾添加 ^boost ，其中 boost 是一个浮点数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>:  <span class="string">&quot;Quick brown fox&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: [ <span class="string">&quot;*_title&quot;</span>, <span class="string">&quot;chapter_title^2&quot;</span> ] </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>chapter_title 这个字段的 boost 值为 2 ，而其他两个字段 book_title 和 section_title 字段的默认 boost 值为 1 。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-match-query.html">Elasticsearch: 权威指南 » 深入搜索 » 多字段搜索 » multi_match 查询</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl-multi-match-query.html">Elasticsearch Guide [7.x] » Query DSL » Full text queries » Multi-match query</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;multi_match 查询为能在多个字段上反复执行相同查询提供了一种便捷方式。&lt;/p&gt;
&lt;p&gt;📒 📒 📒&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;multi_match 多匹配查询的类型有多种，其中的三种恰巧与 了解我们的数据 中介绍的三个场景对应，即：&lt;code&gt;</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Search in Depth" scheme="http://example.com/categories/Elasticsearch/Search-in-Depth/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>dis_max查询</title>
    <link href="http://example.com/wiki/dis-max%E6%9F%A5%E8%AF%A2/"/>
    <id>http://example.com/wiki/dis-max%E6%9F%A5%E8%AF%A2/</id>
    <published>2021-07-06T12:09:23.000Z</published>
    <updated>2021-07-08T13:20:05.026Z</updated>
    
    <content type="html"><![CDATA[<p>假设有个网站允许用户搜索博客的内容，以下面两篇博客内容文档为例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Quick brown rabbits&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>:  <span class="string">&quot;Brown rabbits are commonly seen.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /my_index/my_type/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Keeping pets healthy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>:  <span class="string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户输入词组 <code>Brown fox</code> 然后点击搜索按钮。事先，我们并不知道用户的搜索项是会在 title 还是在 body 字段中被找到，但是，用户很有可能是想搜索相关的词组。用肉眼判断，文档 2 的匹配度更高，因为它同时包括要查找的两个词：</p><p>现在运行以下 bool 查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">                &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Brown fox&quot;</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;body&quot;</span>:  <span class="string">&quot;Brown fox&quot;</span> &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们发现查询的结果是文档 1 的评分更高：</p><img src="https://oscimg.oschina.net/oscnet/up-fa805607436bd64629e31ea8ea574c330cf.png" width=920 height=450>  <p>为了理解导致这样的原因，需要回想一下 bool 是如何计算评分的：</p><p>它会执行 should 语句中的两个查询。<br>加和两个查询的评分。<br>乘以匹配语句的总数。<br>除以所有语句总数（这里为：2）。</p><p>文档 1 的两个字段都包含 <code>brown</code> 这个词，所以两个 <code>match</code> 语句都能成功匹配并且有一个评分。文档 2 的 body 字段同时包含 <code>brown</code> 和 <code>fox</code> 这两个词，但 title 字段没有包含任何词。这样， body 查询结果中的高分，加上 title 查询中的 0 分，然后乘以二分之一，就得到比文档 1 更低的整体评分。</p><p>在本例中， title 和 body 字段是相互竞争的关系，所以就需要找到单个 最佳匹配 的字段。</p><p>如果不是简单将每个字段的评分结果加在一起，而是将 <code>最佳匹配</code> 字段的评分作为查询的整体评分，结果会怎样？这样返回的结果可能是： 同时 包含 <code>brown</code> 和 <code>fox</code> 的单个字段比反复出现相同词语的多个不同字段有更高的相关度。</p><h2 id="dis-max-查询"><a href="#dis-max-查询" class="headerlink" title="dis_max 查询"></a>dis_max 查询</h2><p>不使用 <code>bool</code> 查询，可以使用 <code>dis_max</code> 即分离 最大化查询 <code>（Disjunction Max Query）</code> 。分离（Disjunction）的意思是 或（or） ，这与可以把结合（conjunction）理解成 与（and） 相对应。分离最大化查询（Disjunction Max Query）指的是： 将任何与任一查询匹配的文档作为结果返回，但只将最佳匹配的评分作为查询的评分结果返回 ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;dis_max&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;queries&quot;</span>: [</span><br><span class="line">                &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Brown fox&quot;</span> &#125;&#125;,</span><br><span class="line">                &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;body&quot;</span>:  <span class="string">&quot;Brown fox&quot;</span> &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到我们想要的结果为：<br><img src="https://oscimg.oschina.net/oscnet/up-f4e15cd66644b0031abe4757efdcfdd2886.png" width=900 height=450>  </p><h2 id="Top-level-parameters-for-dis-maxedit"><a href="#Top-level-parameters-for-dis-maxedit" class="headerlink" title="Top-level parameters for dis_maxedit"></a>Top-level parameters for dis_maxedit</h2><ul><li><code>queries</code><br>(Required, array of query objects) Contains one or more query clauses. Returned documents must match one or more of these queries. If a document matches multiple queries, Elasticsearch uses the highest relevance score.</li><li><code>tie_breaker</code><br>(Optional, float) Floating point number between 0 and 1.0 used to increase the relevance scores of documents matching multiple query clauses. Defaults to 0.0.</li></ul><p>You can use the tie_breaker value to assign higher relevance scores to documents that contain the same term in multiple fields than documents that contain this term in only the best of those multiple fields, without confusing this with the better case of two different terms in the multiple fields.</p><p>If a document matches multiple clauses, the dis_max query calculates the relevance score for the document as follows:</p><p>Take the relevance score from a matching clause with the highest score.<br>Multiply the score from any other matching clauses by the tie_breaker value.<br>Add the highest score to the multiplied scores.<br>If the tie_breaker value is greater than 0.0, all matching clauses count, but the clause with the highest score counts most.</p><p><code>dis_max</code>，只是取分数最高的那个query的分数而已，完全不考虑其他query的分数，这种一刀切的做法，可能导致在有其他query的影响下，score不准确的情况，这时为了使用结果更准确，最好还是要考虑到其他query的影响;<br>使用 <code>tie_breaker</code> 将其他query的分数也考虑进去, <code>tie_breaker</code> 参数的意义，将其他query的分数乘以<code>tie_breaker</code>，然后综合考虑后与最高分数的那个query的分数综合在一起进行计算，这样做除了取最高分以外，还会考虑其他的query的分数。<code>tie_breaker</code>的值，设置在在0~1之间，是个小数就行，没有固定的值</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_best_fields.html">Elasticsearch: 权威指南 » 深入搜索 » 多字段搜索 » 最佳字段</a></li><li><a href="https://learnku.com/docs/elasticsearch73/7.3">Elasticsearch中文文档</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl-dis-max-query.html">Elasticsearch Guide [7.x] » Query DSL » Compound queries » Disjunction max query</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假设有个网站允许用户搜索博客的内容，以下面两篇博客内容文档为例：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/categories/Elasticsearch/"/>
    
    <category term="Search in Depth" scheme="http://example.com/categories/Elasticsearch/Search-in-Depth/"/>
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
