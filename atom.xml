<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekIBLi</title>
  
  <subtitle>For Coder</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-14T01:40:57.984Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>gaolei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大厂是如何进行【负载均衡】的</title>
    <link href="http://example.com/wiki/%E5%A4%A7%E5%8E%82%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E3%80%90%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E3%80%91%E7%9A%84/"/>
    <id>http://example.com/wiki/%E5%A4%A7%E5%8E%82%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E3%80%90%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E3%80%91%E7%9A%84/</id>
    <published>2021-09-13T12:46:14.000Z</published>
    <updated>2021-09-14T01:40:57.984Z</updated>
    
    <content type="html"><![CDATA[<p>轮训算法 随机算法</p><p>平滑加权轮询算法</p><p>一致性哈希算法</p><p>最小活跃数算法</p><h2 id="权重随机"><a href="#权重随机" class="headerlink" title="权重随机"></a>权重随机</h2><p>1、存到一个list中，权重高的存多份，权重低的，存少份，具体按照权重去比</p><p>2、把权重展示在坐标轴上，然后按照随机产生的数，在坐标轴上的分布来判断</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.bilibili.com/video/BV1vz4y1679x?p=45">2021年阿里巴巴JAVA面试100道</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;轮训算法 随机算法&lt;/p&gt;
&lt;p&gt;平滑加权轮询算法&lt;/p&gt;
&lt;p&gt;一致性哈希算法&lt;/p&gt;
&lt;p&gt;最小活跃数算法&lt;/p&gt;
&lt;h2 id=&quot;权重随机&quot;&gt;&lt;a href=&quot;#权重随机&quot; class=&quot;headerlink&quot; title=&quot;权重随机&quot;&gt;&lt;/a&gt;权重随机&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>来自TCP协议的灵魂拷问</title>
    <link href="http://example.com/wiki/%E6%9D%A5%E8%87%AATCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE/"/>
    <id>http://example.com/wiki/%E6%9D%A5%E8%87%AATCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE/</id>
    <published>2021-09-10T12:05:58.000Z</published>
    <updated>2021-09-11T10:56:56.612Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-TCP-是用来解决什么问题？"><a href="#1-TCP-是用来解决什么问题？" class="headerlink" title="1. TCP 是用来解决什么问题？"></a>1. TCP 是用来解决什么问题？</h4><h4 id="2-为什么要-TCP，IP-层实现控制不行么？"><a href="#2-为什么要-TCP，IP-层实现控制不行么？" class="headerlink" title="2. 为什么要 TCP，IP 层实现控制不行么？"></a>2. 为什么要 TCP，IP 层实现控制不行么？</h4><p>之所以要<strong>提取出一个 TCP 层来实现控制是因为 IP 层涉及到的设备更多</strong>，一条数据在网络上传输需要经过很多设备，而设备之间需要靠 IP 来寻址。</p><p>假设 IP 层实现了控制，那是不是涉及到的设备都需要关心很多事情？整体传输的效率是不是大打折扣了？</p><h4 id="3-连接到底是什么？"><a href="#3-连接到底是什么？" class="headerlink" title="3. 连接到底是什么？"></a>3. 连接到底是什么？</h4><p>我们已经知道了为什么需要独立出 TCP 这一层，并且这一层主要是用来干嘛的，接下来就来看看它到底是怎么干的。</p><p>我们都知道 TCP 是面向连接的，那这个连接到底是个什么东西？真的是拉了一条线让端与端之间连起来了？</p><p><strong>所谓的连接其实只是双方都维护了一个状态，通过每一次通信来维护状态的变更</strong>，使得看起来好像有一条线关联了对方。</p><h4 id="4-TCP报文头是什么样的"><a href="#4-TCP报文头是什么样的" class="headerlink" title="4. TCP报文头是什么样的"></a>4. TCP报文头是什么样的</h4><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910200950214.png" alt="image-20210910200950214" style="zoom:50%;" /><p>首先可以看到 TCP 包只有端口，没有 IP。</p><p><font color=blue> <strong>Seq 就是 Sequence Number 即序号，它是用来解决乱序问题的</strong></font></p><p><font color=green><strong>ACK 就是 Acknowledgement Numer 即确认号，它是用来解决丢包情况的，告诉发送方这个包我收到啦</strong></font></p><p>标志位就是 TCP flags 用来标记这个包是什么类型的，用来控制 TPC 的状态。</p><p>窗口就是滑动窗口，Sliding Window，用来流控。</p><h4 id="5-三次握手流程是怎么样的"><a href="#5-三次握手流程是怎么样的" class="headerlink" title="5. 三次握手流程是怎么样的"></a>5. 三次握手流程是怎么样的</h4><p><font color=prey><strong>为什么要握手？</strong></font></p><p><strong>其实主要就是为了初始化Seq Numer</strong>，SYN 的全称是 Synchronize Sequence Numbers，这个序号是用来保证之后传输数据的顺序性。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910201233569.png" alt="image-20210910201233569" style="zoom:50%;" /><h4 id="6-第一次握手seq是怎么取值的"><a href="#6-第一次握手seq是怎么取值的" class="headerlink" title="6. 第一次握手seq是怎么取值的"></a>6. 第一次握手seq是怎么取值的</h4><p>不知道大家有没有想过 ISN 的值要设成什么？代码写死从零开始？</p><p>想象一下如果写死一个值，比如 0 ，那么假设已经建立好连接了，client 也发了很多包比如已经第 20 个包了，然后网络断了之后 client 重新，端口号还是之前那个，然后序列号又从 0 开始，此时服务端返回第 20 个包的ack，客户端是不是傻了？</p><p>所以 RFC793 中认为 ISN 要和一个假的时钟绑定在一起<strong>ISN 每四微秒加一，当超过 2 的 32 次方之后又从 0 开始，要四个半小时左右发生 ISN 回绕</strong>。</p><p>所以 ISN 变成一个递增值，真实的实现还需要加一些随机值在里面，防止被不法份子猜到 ISN。</p><h4 id="7-SYN-超时了怎么处理？"><a href="#7-SYN-超时了怎么处理？" class="headerlink" title="7. SYN 超时了怎么处理？"></a>7. SYN 超时了怎么处理？</h4><p>也就是 client 发送 SYN 至 server 然后就挂了，此时 server 发送 SYN+ACK 就一直得不到回复，怎么办？</p><p>我脑海中一想到的就是重试，但是不能连续快速重试多次，你想一下，假设 client 掉线了，你总得给它点时间恢复吧，所以呢需要<strong>慢慢重试，阶梯性重试</strong>。</p><p>在 Linux 中就是默认重试 5 次，并且就是阶梯性的重试，间隔就是1s、2s、4s、8s、16s，再第五次发出之后还得等 32s 才能知道这次重试的结果，所以说总共等63s 才能断开连接。</p><h4 id="8-SYN泛洪攻击是什么？"><a href="#8-SYN泛洪攻击是什么？" class="headerlink" title="8. SYN泛洪攻击是什么？"></a>8. SYN泛洪攻击是什么？</h4><p>你看到没 SYN 超时需要耗费服务端 63s 的时间断开连接，也就说 63s 内服务端需要保持这个资源，所以不法分子就可以构造出大量的 client 向 server 发 SYN 但就是不回 server。</p><p>使得 server 的 SYN 队列耗尽，无法处理正常的建连请求。</p><p><font color=red><strong>所以怎么办？如何解决SYN攻击呢？</strong></font></p><p>可以开启 tcp_syncookies，那就用不到 SYN 队列了。</p><p>SYN 队列满了之后 TCP 根据自己的 ip、端口、然后对方的 ip、端口，对方 SYN 的序号，时间戳等一波操作生成一个特殊的序号（即 cookie）发回去，如果对方是正常的 client 会把这个序号发回来，然后 server 根据这个序号建连。</p><p>或者调整 tcp_synack_retries 减少重试的次数，设置 tcp_max_syn_backlog 增加 SYN 队列数，设置 tcp_abort_on_overflow SYN 队列满了直接拒绝连接。</p><h4 id="9-什么是四次挥手？"><a href="#9-什么是四次挥手？" class="headerlink" title="9. 什么是四次挥手？"></a>9. 什么是四次挥手？</h4><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910202311830.png" alt="image-20210910202311830" style="zoom:50%;" /><p><font color=red><strong>那么所有的断开链接都是上面锁描述的那样吗？</strong></font></p><p>可以看到👇双方都主动发起断开请求所以各自都是主动发起方，状态会从 FIN_WAIT_1 都进入到 CLOSING 这个过度状态然后再到 TIME_WAIT。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910202609442.png" alt="image-20210910202609442" style="zoom:50%;" /><h4 id="10-挥手一定需要四次吗？"><a href="#10-挥手一定需要四次吗？" class="headerlink" title="10. 挥手一定需要四次吗？"></a>10. 挥手一定需要四次吗？</h4><p>假设 client 已经没有数据发送给 server 了，所以它发送 FIN 给 server 表明自己数据发完了，不再发了，如果这时候 server 还是有数据要发送给 client 那么它就是先回复 ack ，然后继续发送数据。</p><p>等 server 数据发送完了之后再向 client 发送 FIN 表明它也发完了，然后等 client 的 ACK 这种情况下就会有四次挥手。</p><p><font color=blue><strong>那么假设 client 发送 FIN 给 server 的时候 server 也没数据给 client，那么 server 就可以将 ACK 和它的 FIN 一起发给client ，然后等待 client 的 ACK，这样不就三次挥手了？</strong></font></p><h4 id="11-为什么要有-TIME-WAIT"><a href="#11-为什么要有-TIME-WAIT" class="headerlink" title="11. 为什么要有 TIME_WAIT?"></a>11. 为什么要有 TIME_WAIT?</h4><p>断开连接发起方在接受到接受方的 FIN 并回复 ACK 之后并没有直接进入 CLOSED 状态，而是进行了一波等待，等待时间为 2MSL。</p><p>MSL 是 Maximum Segment Lifetime，即报文最长生存时间，RFC 793 定义的 MSL 时间是 2 分钟，Linux 实际实现是 30s，那么 2MSL 是一分钟。</p><p><font color=red><strong>那么为什么要等 2MSL 呢？</strong></font></p><ul><li>就是怕被动关闭方没有收到最后的 ACK，如果被动方由于网络原因没有到，那么它会再次发送 FIN， 此时如果主动关闭方已经 CLOSED 那就傻了，因此等一会儿。</li><li>假设立马断开连接，但是又重用了这个连接，就是五元组完全一致，并且序号还在合适的范围内，虽然概率很低但理论上也有可能，那么新的连接会被已关闭连接链路上的一些残留数据干扰，因此给予一定的时间来处理一些残留数据。</li></ul><h4 id="12-等待-2MSL-会产生什么问题？"><a href="#12-等待-2MSL-会产生什么问题？" class="headerlink" title="12. 等待 2MSL 会产生什么问题？"></a>12. 等待 2MSL 会产生什么问题？</h4><p>如果服务器主动关闭大量的连接，那么会出现大量的资源占用，需要等到 2MSL 才会释放资源。</p><p>如果是客户端主动关闭大量的连接，那么在 2MSL 里面那些端口都是被占用的，端口只有 65535 个，如果端口耗尽了就无法发起送的连接了，不过我觉得这个概率很低，这么多端口你这是要建立多少个连接？</p><p><strong>对于服务端来说就是资源得不到立即释放，对于客户端来说，就是端口不能立即释放来发起新的链接。</strong></p><h4 id="13-超时重传机制是为了解决什么问题？"><a href="#13-超时重传机制是为了解决什么问题？" class="headerlink" title="13. 超时重传机制是为了解决什么问题？"></a>13. 超时重传机制是为了解决什么问题？</h4><p>前面我们提到 TCP 要提供可靠的传输，那么网络又是不稳定的如果传输的包对方没收到却又得保证可靠那么就必须重传。</p><p>TCP 的可靠性是靠确认号的，比如我发给你1、2、3、4这4个包，你告诉我你现在要 5 那说明前面四个包你都收到了，就是这么回事儿。</p><p>不过这里要注意，SeqNum 和 ACK 都是<strong>以字节数为单位的</strong>，也就是说假设你收到了1、2、4 但是 3 没有收到你不能 ACK 5，如果你回了 5 那么发送方就以为你5之前的都收到了。</p><p>所以<strong>只能回复确认最大连续收到包</strong>，也就是 3。</p><h4 id="14-为什么还需要快速重传机制？"><a href="#14-为什么还需要快速重传机制？" class="headerlink" title="14. 为什么还需要快速重传机制？"></a>14. 为什么还需要快速重传机制？</h4><p>超时重传是按时间来驱动的，如果是网络状况真的不好的情况，超时重传没问题，但是如果网络状况好的时候，只是恰巧丢包了，那等这么长时间就没必要。</p><p>于是又引入了数据驱动的重传叫快速重传，什么意思呢？就是发送方如果连续三次收到对方相同的确认号，那么马上重传数据。</p><p>因为连续收到三次相同 ACK 证明当前网络状况是 ok 的，那么确认是丢包了，于是立马重发，没必要等这么久。</p><p><font color=blue>就是发送方收到接收方连续的ACK报文之后，马上重传报文。</font></p><h4 id="14-SACK-的引入是为了解决什么问题？"><a href="#14-SACK-的引入是为了解决什么问题？" class="headerlink" title="14. SACK 的引入是为了解决什么问题？"></a>14. SACK 的引入是为了解决什么问题？</h4><p><font color=blue>SACK 即 Selective Acknowledgment，它的引入就是为了解决发送方不知道该重传哪些数据的问题。</font></p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910204103120.png" alt="image-20210910204103120" style="zoom: 50%;" /><p>SACK 就是接收方会回传它已经接受到的数据，这样发送方就知道哪一些数据对方已经收到了，所以就可以选择性的发送丢失的数据。</p><p>如图，通过 ACK 告知我接下来要 5500 开始的数据，并一直更新 SACK，6000-6500 我收到了，6000-7000的数据我收到了，6000-7500的数据我收到了，发送方很明确的知道，5500-5999 的那一波数据应该是丢了，于是重传。</p><p>而且如果数据是多段不连续的， SACK 也可以发送，比如 SACK 0-500,1000-1500，2000-2500。就表明这几段已经收到了。</p><h4 id="15-滑动窗口是什么"><a href="#15-滑动窗口是什么" class="headerlink" title="15. 滑动窗口是什么"></a>15. 滑动窗口是什么</h4><p>我们已经知道了 TCP 有序号，并且还有重传，但是这还不够，因为我们不是愣头青，还需要根据情况来控制一下发送速率，因为网络是复杂多变的，有时候就会阻塞住，而有时候又很通畅。</p><p>所以发送方需要知道接收方的情况，好控制一下发送的速率，不至于蒙着头一个劲儿的发然后接受方都接受不过来。</p><p><font color=blue>因此 TCP 就有个叫滑动窗口的东西来做流量控制，也就是接收方告诉发送方我还能接受多少数据，然后发送方就可以根据这个信息来进行数据的发送。</font></p><p>以下是<strong>发送方维护的窗口</strong>，就是黑色圈起来的。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910204451140.png" alt="image-20210910204451140" style="zoom:50%;" /><p>图中的 #1 是已收到 ACK 的数据，#2 是已经发出去但是还没收到 ACK 的数据，#3 就是在窗口内可以发送但是还没发送的数据。#4 就是还不能发送的数据。</p><h4 id="16-如果接收方回复的窗口一直是-0-怎么办？"><a href="#16-如果接收方回复的窗口一直是-0-怎么办？" class="headerlink" title="16. 如果接收方回复的窗口一直是 0 怎么办？"></a>16. 如果接收方回复的窗口一直是 0 怎么办？</h4><p>上文已经说了发送方式根据接收方回应的 window 来控制能发多少数据，如果接收方一直回应 0，那发送方就杵着？</p><p>你想一下，发送方发的数据都得到 ACK 了，但是呢回应的窗口都是 0 ，这发送方此时不敢发了啊，那也不能一直等着啊，这 Window 啥时候不变 0 啊？</p><p><font color=blue>于是 TCP 有一个 Zero Window Probe 技术，发送方得知窗口是 0 之后，会去探测探测这个接收方到底行不行，也就是发送 ZWP 包给接收方。</font></p><h4 id="17-已经有滑动窗口了为什么还要拥塞控制？"><a href="#17-已经有滑动窗口了为什么还要拥塞控制？" class="headerlink" title="17. 已经有滑动窗口了为什么还要拥塞控制？"></a>17. 已经有滑动窗口了为什么还要拥塞控制？</h4><p>前面我们提到了重传，如果不管网络整体的情况，肯定就是对方没给 ACK ，那我就无脑重传。</p><p>如果此时网络状况很差，所有的连接都这样无脑重传，是不是网络情况就更差了，更加拥堵了？</p><h4 id="18-拥塞控制怎么搞？"><a href="#18-拥塞控制怎么搞？" class="headerlink" title="18. 拥塞控制怎么搞？"></a>18. 拥塞控制怎么搞？</h4><p>主要有以下几个步骤来搞：</p><p>1、慢启动，探探路。</p><p>2、拥塞避免，感觉差不多了减速看看 </p><p>3、拥塞发生快速重传/恢复</p><h4 id="19-什么是-TCP-半连接队列和全连接队列？"><a href="#19-什么是-TCP-半连接队列和全连接队列？" class="headerlink" title="19. 什么是 TCP 半连接队列和全连接队列？"></a>19. 什么是 TCP 半连接队列和全连接队列？</h4><p>在 TCP 三次握手的时候，Linux 内核会维护两个队列，分别是：</p><ul><li>半连接队列，也称 SYN 队列；</li><li>全连接队列，也称 accepet 队列；</li></ul><p>服务端收到客户端发起的 SYN 请求后，<strong>内核会把该连接存储到半连接队列</strong>，并向客户端响应 SYN+ACK，接着客户端会返回 ACK，服务端收到第三次握手的 ACK 后，<strong>内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到 accept 队列，等待进程调用 accept 函数时把连接取出来。</strong></p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210911125838391.png" alt="image-20210911125838391" style="zoom: 33%;" /><h4 id="20-如何查看全链接队列"><a href="#20-如何查看全链接队列" class="headerlink" title="20. 如何查看全链接队列"></a>20. 如何查看全链接队列</h4><p><code>ss -lnt | grep port</code></p><p><strong>查看全链接队列溢出情况：</strong></p><p><code>netstat -s | </code></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><blockquote><ul><li><a href="https://mp.weixin.qq.com/s/LUtk6u_zv0w8g8GIGWEuCw">万字长文 | 23 个问题 TCP 疑难杂症全解析</a></li><li><a href="https://mp.weixin.qq.com/s/tRXlq1hErqKQLMMLcxoXvg">TCP 半连接队列和全连接队列满了会发生什么？又该如何应对？</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-TCP-是用来解决什么问题？&quot;&gt;&lt;a href=&quot;#1-TCP-是用来解决什么问题？&quot; class=&quot;headerlink&quot; title=&quot;1. TCP 是用来解决什么问题？&quot;&gt;&lt;/a&gt;1. TCP 是用来解决什么问题？&lt;/h4&gt;&lt;h4 id=&quot;2-为什么要-</summary>
      
    
    
    
    
    <category term="TCP" scheme="http://example.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>详解网络IO</title>
    <link href="http://example.com/wiki/%E8%AF%A6%E8%A7%A3%E7%BD%91%E7%BB%9CIO/"/>
    <id>http://example.com/wiki/%E8%AF%A6%E8%A7%A3%E7%BD%91%E7%BB%9CIO/</id>
    <published>2021-09-10T06:43:37.000Z</published>
    <updated>2021-09-10T09:40:21.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习思路可以是网络IO的演变过程，从【阻塞io】到【非阻塞io】然后到【多路复用】，后续还有【异步io】</p><h2 id="1-阻塞io"><a href="#1-阻塞io" class="headerlink" title="1. 阻塞io"></a>1. 阻塞io</h2><p>应用程序进行 recvfrom 系统调用时将阻塞在此调用，直到该套接字上有数据并且复制到用户空间缓冲区。该模式一般配合多线程使用，</p><p>应用进程每接收一个连接，为此连接创建一个线程来处理该连接上的读写以及业务处理。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910160418632.png" alt="image-20210910160418632" style="zoom:50%;" /><p><strong>缺点</strong>：如果套接字上没有数据，进程将一直阻塞。这时其他套接字上有数据也不能进行及时处理。</p><p>如果是多线程方式，除非连接关闭否则线程会一直存在，而线程的创建、维护和销毁非常消耗资源，所以能建立的连接数量非常有限。</p><h2 id="2-非阻塞io"><a href="#2-非阻塞io" class="headerlink" title="2. 非阻塞io"></a>2. 非阻塞io</h2><p>应用进程调用recefrom函数之后，不等待内核数据准备完成，而是不断轮训（注意这里是用户进程不断轮训，会有用户态到内核态的切换，性能损耗比较严重）</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910160610025.png" alt="image-20210910160610025" style="zoom:50%;" /><p><strong>优点</strong>：代码编写相对简单，进程不会阻塞，可以在同一线程中处理所有连接。</p><p><strong>缺点</strong>：需要频繁的轮询，比较耗CPU，在并发量很大的时候将花费大量时间在没有任何数据的连接上轮询。所以该模型只在专门提供某种功能的系统中才会出现。</p><h2 id="3-io复用"><a href="#3-io复用" class="headerlink" title="3. io复用"></a>3. io复用</h2><p>应用进程阻塞于 <strong>select/poll/epoll</strong> 等系统函数等待某个连接变成可读（有数据过来），再调用 recvfrom 从连接上读取数据。虽然此模式也会阻塞在 select/poll/epoll 上，但与阻塞IO 模型不同它阻塞在等待多个连接上有读（写）事件的发生，明显提高了效率且增加了单线程/单进程中并行处理多连接的可能。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910160743784.png" alt="image-20210910160743784" style="zoom:50%;" /><p><strong>优点</strong>：统一管理连接，不一定采用多线程的方式，同时也不需要轮询。只需要阻塞于 select 即可，可以同时管理多个连接。</p><p><strong>缺点</strong>：当 select/poll/epoll 管理的连接数过少时，这种模型将退化成阻塞 IO 模型。并且还多了一次系统调用：一次 select/poll/epoll 一次 recvfrom。</p><h3 id="3-1-select"><a href="#3-1-select" class="headerlink" title="3.1 select"></a>3.1 select</h3><p>1、句柄上限- 默认打开的FD有限制,1024个。</p><p>2、重复初始化-每次调用 select()，需要把 fd 集合从用户态拷贝到内核态，内核进行遍历。</p><p>3、逐个排查所有FD状态效率不高。</p><h3 id="3-2-poll"><a href="#3-2-poll" class="headerlink" title="3.2 poll"></a>3.2 poll</h3><p>poll和select相比在本质上变化不大，只是poll没有了select方式的最大文件描述符数量的限制。</p><p>缺点：逐个排查所有FD状态效率不高。</p><h3 id="3-3-epoll"><a href="#3-3-epoll" class="headerlink" title="3.3 epoll"></a>3.3 epoll</h3><p><font color=blue>没有fd个数限制，用户态拷贝到内核态只需要一次，使用事件通知机制来触发。通过epoll_ctl注册fd，一旦fd就绪就会通过callback回调机制来激活对应fd，进行相关的I/O操作。</font></p><p>epoll对文件描述符的操作有两种模式：<strong>LT（level trigger）</strong>和<strong>ET（edge trigger）</strong>。LT模式是默认模式，LT模式与ET模式的区别如下：</p><p><strong>LT模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，`应用程序可以不立即</p><p>处理该事件`。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</p><p><strong>ET模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，`应用程序必须立即处</p><p>理该事件`。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p><p><strong>缺点</strong>：</p><ul><li>跨平台，Linux 支持最好。</li><li>底层实现复杂。</li><li>同步。</li></ul><h3 id="3-4-select-poll-epoll之间的区别"><a href="#3-4-select-poll-epoll之间的区别" class="headerlink" title="3.4 select/poll/epoll之间的区别"></a>3.4 select/poll/epoll之间的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910161725824.png" alt="image-20210910161725824"></p><h2 id="4-信号驱动io"><a href="#4-信号驱动io" class="headerlink" title="4. 信号驱动io"></a>4. 信号驱动io</h2><p>应用进程创建 SIGIO 信号处理程序，此程序可处理连接上数据的读写和业务处理。并向操作系统安装此信号，进程可以往下执行。当内核数据准备好会向应用进程发送信号，触发信号处理程序的执</p><p>行。再在信号处理程序中进行 recvfrom 和业务处理。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910161310686.png" alt="image-20210910161310686" style="zoom:50%;" /><p><strong>优点：</strong>非阻塞</p><p><strong>缺点：</strong>在前一个通知信号没被处理的情况下，后一个信号来了也不能被处理。所以在信号量大</p><p>的时候会导致后面的信号不能被及时感知。</p><h2 id="5-异步io"><a href="#5-异步io" class="headerlink" title="5. 异步io"></a>5. 异步io</h2><p>应用进程通过 aio_read 告知内核启动某个操作，在整个操作完成之后内核再通知应用进程，包括把</p><p>数据从内核空间拷贝到用户空间。</p><p><font color=blue><strong>信号驱动 IO 是内核通知我们何时可以启动一个 IO 操作，而异步 IO 模型是由内核通知我们 IO 操作何时完成</strong></font>。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210910161126217.png" alt="image-20210910161126217" style="zoom:50%;" /><p><strong><font color=green>注：前 4 种模型都是带有阻塞部分的，有的阻塞在等待数据准备好，有的阻塞在从内核空间拷贝数据到用户空间(信号量io)。而这种模型应用进程从调用 aio_read 到数据被拷贝到用户空间，不用任何阻塞，所以该种模式叫异步 IO 模型。</font></strong></p><p><strong>优点</strong>：没有任何阻塞，充分利用系统内核将 IO 操作与计算逻辑并行。</p><p><strong>缺点</strong>：编程复杂、操作系统支持不好。目前只有 windows 下的 iocp 实现了真正的 AIO。linux </p><p>下在 2.6 版本中才引入，目前并不完善，所以 Linux 下一般采用多路复用模型。</p><h2 id="6-Reactor-和-Proactor"><a href="#6-Reactor-和-Proactor" class="headerlink" title="6. Reactor 和 Proactor"></a>6. Reactor 和 Proactor</h2><p>Reactor 是<font color=blue><strong>非阻塞同步网络模式，感知的是就绪可读写事件</strong></font>。在每次  感知到有事件发生（比如可读就绪事件）后，就需要应用进程主动调用 read 方法来完成数据的读  取，也就是要应用进程主动将 socket 接收缓存中的数据读到应用进程内存中，这个过程是同步的，  读取完数据后应用进程才能处理数据。</p><p>Proactor 是<font color=blue><strong>异步网络模式， 感知的是已完成的读写事件</strong></font>。在发起异步读写请求时，需要传入数据缓冲区的地址（用来存放结果数据）等信息，这样系统内核才可以自动帮我们把数据的读写工作完成，<font color=green><strong>这里的读写工作全程由操作系统来做，并不需</strong></font>要像 Reactor 那样还需要应用进程主动发起 read/write 来读写数据**</font>，操作系统完成读写工作后，就会通知应用进程直接处理数据。</p><p>因此，<font color=blue><strong>Reactor 可以理解为「来了事件操作系统通知应用进程，让应用进程来处理」</strong></font>，而 <font color=green> **Proactor 可以理解为「来了事件操作系统来处理，处理完再通知应用进程」</font>。这里的「事件」就是有新连接、有数据可读、有数据可写的这些 I/O 事件这里的「处理」包含从驱动读取到内核以及从内核读取到用户空间。</p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/20210910173232.png">  </p><p>可参见 <a href="https://mp.weixin.qq.com/s/px6-YnPEUCEqYIp_YHhDzg">https://mp.weixin.qq.com/s/px6-YnPEUCEqYIp_YHhDzg</a>    </p><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h2><blockquote><ul><li><a href="https://mp.weixin.qq.com/s/x-AZQO5uiuu5svIvScotzA">「网络IO套路」当时就靠它追到女友</a></li><li><a href="https://juejin.cn/post/6844904200141438984">彻底理解 IO多路复用</a></li><li><a href="https://juejin.cn/post/6844903678227267597">看完这个，Java IO从此不在难</a></li><li><a href="https://juejin.cn/post/6844904048198451214">从操作系统层面理解Linux下的网络IO模型</a></li><li><a href="https://juejin.cn/post/6844903728718462990#heading-8">五种IO模型介绍和对比</a></li><li><a href="https://juejin.cn/post/6844903812738596878#heading-3">服务器网络编程之 IO 模型</a></li><li><a href="https://www.processon.com/view/5f1e369ee0b34d54dacc18b9?fromnew=1">网络编程与高效IO</a></li><li><a href="https://juejin.cn/post/6979761228251922469">高性能网络IO模式Reactor</a></li><li><a href="https://juejin.cn/post/6844903488170786824#heading-15">Linux IO模式及 select、poll、epoll详解</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247489558&idx=1&sn=7a96604032d28b8843ca89cb8c129154&scene=21#wechat_redirect">这次答应我，一举拿下 I/O 多路复用！</a></li><li><a href="https://mp.weixin.qq.com/s/px6-YnPEUCEqYIp_YHhDzg">原来 8 张图，就能学废 Reactor 和 Proactor</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习思路可以是网络IO的演变过程，从【阻塞io】到【非阻塞io】然后到【多路复用】，后续还有【异步io】&lt;/p&gt;
&lt;h2 id=&quot;1-阻塞i</summary>
      
    
    
    
    
    <category term="网络IO" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9CIO/"/>
    
    <category term="epoll" scheme="http://example.com/tags/epoll/"/>
    
  </entry>
  
  <entry>
    <title>Netty基础</title>
    <link href="http://example.com/wiki/Netty%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/wiki/Netty%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-09T06:56:22.000Z</published>
    <updated>2021-09-09T07:02:21.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>1、什么是粘包和拆包，Netty如何解决这个问题</p><p>2、Netty中的空轮训bug是什么，如何解决这个问题？</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.processon.com/view/60384ce3e401fd0290002128?fromnew=1"><strong>Netty（Reactor线程模型/零拷贝/空轮询）Netty（Reactor线程模型/零拷贝/空轮询）</strong></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h2&gt;&lt;p&gt;1、什么是粘包和拆包，Netty如何解决这个问题&lt;/p&gt;
&lt;p&gt;2、Netty中的空轮训bug是什么，如何解决这个问题？&lt;/</summary>
      
    
    
    
    
    <category term="NIO" scheme="http://example.com/tags/NIO/"/>
    
    <category term="Netty" scheme="http://example.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>零拷贝技术</title>
    <link href="http://example.com/wiki/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/wiki/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/</id>
    <published>2021-09-09T06:12:33.000Z</published>
    <updated>2021-09-09T07:45:08.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><p>什么是零拷贝技术？</p><p>为什么需要零拷贝？</p><p>零拷贝有哪些应用场景？</p><p>什么叫做用户态到内核态切换？为什么需要两种状态的切换？</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="传统的数据拷贝技术"><a href="#传统的数据拷贝技术" class="headerlink" title="传统的数据拷贝技术"></a>传统的数据拷贝技术</h3><p>没有DMA的数据拷贝流程如下 👇</p><p>用户发起read的系统调用，应用进程从用户态进入到内核态，CPU发送IO请求到磁盘，磁盘准备好数据之后发送中断信号。</p><p>之后CPU响应中断，讲磁盘缓冲区数据拷贝到内核缓冲区，数据拷贝完成之后，在把内核缓冲区的数据拷贝到应用进程的缓冲区中。</p><p>这个过程中CPU是一直占用的，不能进行其他的操作。最后，应用进程在从内核态切换到用户态。一共进行和4次数据拷贝和2次用户态/内核态的切换。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210909150331477.png" alt="image-20210909150331477" style="zoom:50%;" /><p>为了提高CPU 的执行效率，于是又了DMA技术。</p><p>什么是 DMA 技术？简单理解就是，<font color=blue>在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU 不再参与任何与数据搬运相关的事情，这样 CPU 就可以去处理别的事务</font>。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210909151257401.png" alt="image-20210909151257401" style="zoom:50%;" /><p>1、用户进程调用read系统指令，进程从用户态切换到内核态，CPU发起IO请求，把读取磁盘数据的任务交给DMA</p><p>2、DMA发送IO请求到磁盘，磁盘准备好数据之后，发送中断信号，由DMA响应中断请求</p><p>3、DMA读取磁盘缓冲区的数据到内核缓冲区，数据读取完成之后，通知CPU进行处理</p><p>4、CPU把内核缓冲区的数据拷贝到应用缓冲期中，最后，进程从内核态切换到用户态。</p><h3 id="为什么系统调用的时候需要-「用户态」和-「内核态」的切换"><a href="#为什么系统调用的时候需要-「用户态」和-「内核态」的切换" class="headerlink" title="为什么系统调用的时候需要 「用户态」和 「内核态」的切换"></a>为什么系统调用的时候需要 「用户态」和 「内核态」的切换</h3><p>这是因为用户空间没有权限操作磁盘或网卡，内核的权限最高，这些操作设备的过程都需要交由操作系统内核来完成，所以一般要通过内核去完成某些任务的时候，就需要使用操作系统提供的系统调用函数。</p><p>这么设计是为了操作系统的安全考虑。</p><p>而一次系统调用必然会发生 2 次上下文切换：首先从用户态切换到内核态，当内核执行完任务后，再切换回用户态交由进程代码执行</p><h2 id="零拷贝的实现方式"><a href="#零拷贝的实现方式" class="headerlink" title="零拷贝的实现方式"></a>零拷贝的实现方式</h2><p>零拷贝有两种实现方式，mmap 和 sendFile 两种。</p><p>它们是如何减少「上下文切换」和「数据拷贝」的次数？</p><h3 id="mmap实现零拷贝"><a href="#mmap实现零拷贝" class="headerlink" title="mmap实现零拷贝"></a>mmap实现零拷贝</h3><p><code>mmap()</code> 系统调用函数会直接把内核缓冲区里的数据「<strong>映射</strong>」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210909152900745.png" alt="image-20210909152900745" style="zoom:50%;" /><ul><li>应用进程调用了 <code>mmap()</code> 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；</li><li>应用进程再调用 <code>write()</code>，<font color='blue'>操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据</font></li><li>最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。</li></ul><p>我们可以得知，通过使用 <code>mmap()</code> 来代替 <code>read()</code>， 可以减少一次数据拷贝的过程。</p><p>但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。</p><h3 id="sendfile实现零拷贝"><a href="#sendfile实现零拷贝" class="headerlink" title="sendfile实现零拷贝"></a>sendfile实现零拷贝</h3><p>在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 <code>sendfile()</code>，函数形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendfile</span><span class="params">(<span class="keyword">int</span> out_fd, <span class="keyword">int</span> in_fd, <span class="keyword">off_t</span> *offset, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"><span class="comment">// 它的前两个参数分别是目的端和源端的文件描述符，后面两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。</span></span><br></pre></td></tr></table></figure><p>该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210909153709043.png" alt="image-20210909153709043" style="zoom:50%;" /><p>但是这还不是真正的零拷贝技术。因为CPU还有执行一次内核缓冲区到Socket缓冲区的拷贝。</p><p>于是，从 Linux 内核 <code>2.4</code> 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， <code>sendfile()</code> 系统调用的过程发生了点变化，具体过程如下：</p><p>第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；</p><p>第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到<font color=blue>网卡的缓冲区</font>里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210909154030275.png" alt="image-20210909154030275" style="zoom:50%;" /><p>零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，<strong>只需要 2 次上下文切换，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://mp.weixin.qq.com/s/FgBCop2zFfcX5ZszE0NoCQ">傻瓜三歪让我教他「零拷贝」</a></li><li><a href="https://www.processon.com/view/5f559cdc5653bb53ea93bb58?fromnew=1"><strong>文件传输，零拷贝文件传输，零拷贝</strong></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;思考问题&quot;&gt;&lt;a href=&quot;#思考问题&quot; class=&quot;headerlink&quot; title=&quot;思考问题&quot;&gt;&lt;/a&gt;思考问题&lt;/h2&gt;&lt;p&gt;什么是零拷贝技术？&lt;/p&gt;
&lt;p&gt;为什么需要零拷贝？&lt;/p&gt;
&lt;p&gt;零拷贝有哪些应用场景？&lt;/p&gt;
&lt;p&gt;什么叫做用户态到内</summary>
      
    
    
    
    
    <category term="IO" scheme="http://example.com/tags/IO/"/>
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC-核心讲解</title>
    <link href="http://example.com/wiki/SpringMVC-%E6%A0%B8%E5%BF%83%E8%AE%B2%E8%A7%A3/"/>
    <id>http://example.com/wiki/SpringMVC-%E6%A0%B8%E5%BF%83%E8%AE%B2%E8%A7%A3/</id>
    <published>2021-09-03T09:10:00.000Z</published>
    <updated>2021-09-03T11:28:34.444Z</updated>
    
    <content type="html"><![CDATA[<p>SpringMVC属于Spring那个模块</p><p>SpringMVC替我们做了哪些工作</p><h2 id="SpringMVC如何简化工作的"><a href="#SpringMVC如何简化工作的" class="headerlink" title="SpringMVC如何简化工作的"></a>SpringMVC如何简化工作的</h2><p>1、请求参数不需要在手动平装到对象上了。可以直接使用@RequestBody @RequestHeader</p><p>2、SpringMVC增强了对文件的处理 <code>MultipartFile</code></p><h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><ul><li><strong>用户发送请求</strong></li><li><strong>请求交由核心控制器处理</strong></li><li><strong>核心控制器找到映射器，映射器看看请求路径是什么</strong></li><li><strong>核心控制器再找到适配器，看看有哪些类实现了Controller接口或者对应的bean对象</strong></li><li><strong>将带过来的数据进行转换，格式化等等操作</strong></li><li><strong>找到我们的控制器Action，处理完业务之后返回一个ModelAndView对象</strong></li><li><strong>最后通过视图解析器来对ModelAndView进行解析</strong></li><li><strong>跳转到对应的JSP/html页面</strong></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247487665&idx=1&sn=cffb9d634a8b770562557b72a833e591&chksm=ebd751b0dca0d8a604d89b1e3c5d1728f35b752368f5a878311066cbc09ff8a5905ad05690c7&token=1936697047&lang=zh_CN#rd">三歪肝出了期待已久的SpringMVC</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SpringMVC属于Spring那个模块&lt;/p&gt;
&lt;p&gt;SpringMVC替我们做了哪些工作&lt;/p&gt;
&lt;h2 id=&quot;SpringMVC如何简化工作的&quot;&gt;&lt;a href=&quot;#SpringMVC如何简化工作的&quot; class=&quot;headerlink&quot; title=&quot;Sprin</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-核心模块及其功能</title>
    <link href="http://example.com/wiki/Spring-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%85%B6%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/wiki/Spring-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%85%B6%E5%8A%9F%E8%83%BD/</id>
    <published>2021-09-03T06:58:39.000Z</published>
    <updated>2021-09-03T07:03:33.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Core"><a href="#Spring-Core" class="headerlink" title="Spring Core"></a>Spring Core</h2><p>IOC控制反转，SpringBean</p><p>Spring-bean</p><p>Spring-context</p><p>Spring-core</p><p>Spring-expression : 表达式相关</p><h2 id="Spring-Web"><a href="#Spring-Web" class="headerlink" title="Spring Web"></a>Spring Web</h2><p>主要是web开发相关，Spring MVC</p><h2 id="Spring-DAO"><a href="#Spring-DAO" class="headerlink" title="Spring DAO"></a>Spring DAO</h2><p>Spring 对jdbc操作的支持  【JdbcTemplate模板工具类】</p><h2 id="Spring-ORM"><a href="#Spring-ORM" class="headerlink" title="Spring ORM"></a>Spring ORM</h2><p>整个Hibernate/Mybatis</p><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p>面向切面编程</p><h2 id="Spring-EE"><a href="#Spring-EE" class="headerlink" title="Spring EE"></a>Spring EE</h2><p>spring 对javaEE其他模块的支持</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247483942&idx=1&sn=f71e1adeeaea3430dd989ef47cf9a0b3&chksm=ebd74327dca0ca3141c8636e95d41629843d2623d82be799cf72701fb02a665763140b480aec&scene=21###wechat_redirect">Spring入门这一篇就够了</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring-Core&quot;&gt;&lt;a href=&quot;#Spring-Core&quot; class=&quot;headerlink&quot; title=&quot;Spring Core&quot;&gt;&lt;/a&gt;Spring Core&lt;/h2&gt;&lt;p&gt;IOC控制反转，SpringBean&lt;/p&gt;
&lt;p&gt;Spring-b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-什么是AOP</title>
    <link href="http://example.com/wiki/Spring-%E4%BB%80%E4%B9%88%E6%98%AFAOP/"/>
    <id>http://example.com/wiki/Spring-%E4%BB%80%E4%B9%88%E6%98%AFAOP/</id>
    <published>2021-09-03T06:20:06.000Z</published>
    <updated>2021-09-03T08:01:03.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h2><p><strong>Aop： aspect object programming  面向切面编程</strong></p><ul><li><strong>功能： 让关注点代码与业务代码分离！</strong></li><li>面向切面编程就是指： <strong>对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。</strong></li></ul><p>举个例子，比如我们需要监控一个方法的执行时长，方法结束时间 - 进入方法的时间。</p><p>如果就几个方法，我们完全可以在这几个方法上实现，进入方法是获取当前时间，退出时时间戳做一下差就完事了。</p><p>但是如果很多方法或者接口需要监控，怎么办，AOP就体现出来了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy(false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切入点表达式主要就是来配置拦截哪些类的哪些方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.yj.common.app.annotation.Time)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 好处是避免before，after等每个方法都写一遍，这样只写一遍就好了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切入点的使用，</span></span><br><span class="line">    <span class="meta">@Around(&quot;timePointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Method method = ((MethodSignature) point.getSignature()).getMethod();</span><br><span class="line">        Time time = method.getAnnotation(Time.class);</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        Object object = point.proceed();</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125; : execute_totalTime: &#123;&#125; ms&quot;</span>, time.value(), (System.currentTimeMillis() - beginTime));</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们仅仅需要在需要监控的方法上添加@Time就可以了，当然还有一个参数，备注一些信息。</p><h2 id="AOP注解"><a href="#AOP注解" class="headerlink" title="AOP注解"></a>AOP注解</h2><ul><li><strong>@Aspect</strong>               指定一个类为切面类</li><li><strong>@Pointcut(“execution(* cn.itcast.e_aop_anno.*.*(..))”)  指定切入点表达式</strong></li><li><strong>@Before(“pointCut_()”)</strong>         前置通知: 目标方法之前执行</li><li><strong>@After(“pointCut_()”)</strong>         <strong>后置通知：目标方法之后执行（始终执行）</strong></li><li>@AfterReturning(“pointCut_()”)       返回后通知： <strong>执行方法结束前执行(异常不执行)</strong></li><li>@AfterThrowing(“pointCut_()”)       异常通知:  出现异常时候执行</li><li>@Around(“pointCut_()”)         环绕通知： 环绕目标方法执行</li></ul><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>静态代理<strong>需要实现目标对象的相同接口，那么可能会导致代理类会非常非常多</strong>，所以会产生动态代理。</p><p>JDK自带的动态代理JDK Proxy在实现的时候有一个限制<strong>，代理的对象一定是要有接口的。</strong>没有接口的话不能实现动态代理。</p><p>看一下JDK的API就明白了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure><p>所以JDK的动态代理就存在一定的局限性。</p><p>而cglib则比较灵活，cglib代理也叫子类代理，<strong>从内存中构建出一个子类来扩展目标对象的功能！</strong></p><p><strong>CGLIB是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口。它广泛的被许多AOP的框架使用，例如Spring AOP和dynaop，为他们提供方法的interception（拦截）。</strong></p><p><font color=blue>在Spring的动态代理中，如果代理对象是有接口的，代理的实现是JDK的Proxy，如果代理对象不是接口的，代理的实现是通过cglib。</font></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247483954&idx=1&sn=b34e385ed716edf6f58998ec329f9867&chksm=ebd74333dca0ca257a77c02ab458300ef982adff3cf37eb6d8d2f985f11df5cc07ef17f659d4&scene=21###wechat_redirect">Spring AOP就是这么简单</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247487013&idx=1&sn=f0d8c292738eb49bcd09cb2f6458dc69&chksm=ebd74f24dca0c632fa3ef8f205a2dd5c96531f78a68eae805e15b84de0b59774196a188aed14&token=306734573&lang=zh_CN#rd">三歪红着眼睛总结了Spring知识点</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AOP概述&quot;&gt;&lt;a href=&quot;#AOP概述&quot; class=&quot;headerlink&quot; title=&quot;AOP概述&quot;&gt;&lt;/a&gt;AOP概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Aop： aspect object programming  面向切面编程&lt;/strong&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-面试官问题什么是IOC</title>
    <link href="http://example.com/wiki/Spring-%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%E9%A2%98%E4%BB%80%E4%B9%88%E6%98%AFIOC/"/>
    <id>http://example.com/wiki/Spring-%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%E9%A2%98%E4%BB%80%E4%B9%88%E6%98%AFIOC/</id>
    <published>2021-09-03T05:56:20.000Z</published>
    <updated>2021-09-03T07:16:42.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、思路"><a href="#1、思路" class="headerlink" title="1、思路"></a>1、思路</h2><p>1、首先明确什么是IOC，明确什么是DI，IOC和DI有什么关系</p><p>2、说明什么是IOC之后，明确为什么需要 IOC，或者IOC的优点</p><p>3、然后是IOC是如何实现的</p><hr><h3 id="2、概述"><a href="#2、概述" class="headerlink" title="2、概述"></a>2、概述</h3><h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><p>Spring IOC 解决的是 <strong>对象管理和对象依赖的问题</strong>。Spring AOP 解决的是 <strong>非业务代码抽取的问题</strong>。</p><blockquote><p>Spring IOC 解决的是<strong>对象管理和对象依赖的问题</strong>。本来我们的对象都是<code>new</code>出来的，而我们如果使用<code>Spring</code> 则把对象交给「<strong>IOC容器</strong>」来管理。</p></blockquote><p>「IOC容器」是什么？我们可以理解为是一个「<strong>工厂</strong>」，我们把对象都交由这个「工厂」来管理，包括对象的创建和对象之间的依赖关系等等。等我们要用到对象的时候，就从这个「工厂」里边取出来。</p><p>「控制反转」指的就是：本来是「<strong>由我们自己</strong>」<code>new</code>出来的对象，现在交给了IOC容器。把这个对象的「控制权」给「他方」了。「控制反转」更多的是一种<strong>思想</strong>或者说是<strong>设计模式</strong>，把原有由自己掌控的事交给「别人」来处理。</p><p>「依赖注入」更多指的是「控制反转」这个思想的<strong>实现方式</strong>：对象<strong>无需自行创建或管理它们的依赖关系</strong>，依赖关系将被<strong>「自动注入」</strong>到需要它们的对象当中去。</p><p>最简单理解「依赖注入」和「控制反转」：本来我们的对象都是「<strong>由我们自己</strong>」<code>new</code>出来的，现在我们把这个对象的创建权限和对象之间的依赖关系交由「IOC容器」来管理。</p><h3 id="使用IOC有什么好处"><a href="#使用IOC有什么好处" class="headerlink" title="使用IOC有什么好处"></a>使用IOC有什么好处</h3><ul><li><strong>将对象集中统一管理，便于修改</strong></li><li>降低耦合度（调用方无需自己组装，也无需关心对象的实现，直接从「IOC容器」取就好了）</li></ul><h3 id="IOC如何设计实现的"><a href="#IOC如何设计实现的" class="headerlink" title="IOC如何设计实现的"></a>IOC如何设计实现的</h3><p>既然已经说到，IOC可以帮助我们管理对象，那么我们的对象是如何交给IOC的呢？</p><p>Spring提供了四种方式：</p><ul><li>注解</li><li>XML</li><li>JavaConfig</li><li>基于Groovy DSL配置</li></ul><p>我们以XML配置+注解来装配Bean比较多，其中<strong>注解这种方式占大部分。</strong></p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><strong>Spring使用依赖注入来实现对象之间的依赖关系, 在创建完对象之后，对象的关系处理就是依赖注入</strong></p><p>Spring提供了好几种的方式来给属性赋值</p><ul><li><strong>1) 通过构造函数</strong></li><li><strong>2) 通过set方法给属性注入值</strong></li><li><strong>3) p名称空间</strong></li><li><strong>4) 自动装配</strong></li><li><strong>5) 注解</strong></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247487013&idx=1&sn=f0d8c292738eb49bcd09cb2f6458dc69&chksm=ebd74f24dca0c632fa3ef8f205a2dd5c96531f78a68eae805e15b84de0b59774196a188aed14&token=306734573&lang=zh_CN#rd">三歪讲Spring</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484243&idx=1&sn=972cbe6cdb578256e4d4771e7ca25de3&chksm=ebd74252dca0cb44419903758e8ca52d9ab287562f80be9365e305d6dcc2deaa45b40f9fd2e9&scene=21###wechat_redirect">工厂模式理解了没有</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247483946&idx=1&sn=bb21dfd83cf51214b2789c9ae214410f&chksm=ebd7432bdca0ca3ded6ad9b50128d29267f1204bf5722e5a0501a1d38af995c1ee8e37ae27e7&scene=21###wechat_redirect">Spring依赖注入就是这么简单</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、思路&quot;&gt;&lt;a href=&quot;#1、思路&quot; class=&quot;headerlink&quot; title=&quot;1、思路&quot;&gt;&lt;/a&gt;1、思路&lt;/h2&gt;&lt;p&gt;1、首先明确什么是IOC，明确什么是DI，IOC和DI有什么关系&lt;/p&gt;
&lt;p&gt;2、说明什么是IOC之后，明确为什么需要 I</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode-比较版本号(165)</title>
    <link href="http://example.com/wiki/LeetCode-%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7-165/"/>
    <id>http://example.com/wiki/LeetCode-%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7-165/</id>
    <published>2021-09-02T06:08:13.000Z</published>
    <updated>2021-09-02T06:13:46.909Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/compare-version-numbers/">https://leetcode-cn.com/problems/compare-version-numbers/</a></p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210902141257542.png" alt="image-20210902141257542"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(String version1, String version2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String [] sp1 = version1.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        String [] sp2 = version2.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a &lt; sp1.length &amp;&amp; b &lt; sp2.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Integer.valueOf(sp1[a]) &gt; Integer.valueOf(sp2[b]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Integer.valueOf(sp1[a]) &lt; Integer.valueOf(sp2[b]))&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a++;</span><br><span class="line">            b++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == sp1.length)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = b; x &lt; sp2.length;x++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Integer.valueOf(sp2[x])  &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(b == sp2.length)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = a; y &lt; sp1.length; y++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Integer.valueOf(sp1[y]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点⚠️</p><p>1、<code>a++;</code>,<code>b++;</code></p><p>while里面是两次条件判断，所以 <code>if (Integer.valueOf(sp1[a]) &gt; Integer.valueOf(sp2[b]))</code>不能写成    <code>if (Integer.valueOf(sp1[a++]) &gt; Integer.valueOf(sp2[b++]))</code></p><p>2、先判断相同长度部分，如果相同长度部分能分出结果就直接返回，如果不能，就比较长度比较长的版本剩余的部分是否比0大就完事了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/compare-version-numbers/&quot;&gt;https://leetcode-cn.com/problems/compare-version-numbers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="中等" scheme="http://example.com/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-热度Top100🔥</title>
    <link href="http://example.com/wiki/LeetCode-%E7%83%AD%E5%BA%A6Top100%F0%9F%94%A5/"/>
    <id>http://example.com/wiki/LeetCode-%E7%83%AD%E5%BA%A6Top100%F0%9F%94%A5/</id>
    <published>2021-08-31T06:06:04.000Z</published>
    <updated>2021-09-11T12:51:12.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="挑战LeetCode热度Top100-👇"><a href="#挑战LeetCode热度Top100-👇" class="headerlink" title="挑战LeetCode热度Top100 👇"></a>挑战LeetCode热度Top100 👇</h1><p><a href="https://leetcode-cn.com/problem-list/2cktkvj/">https://leetcode-cn.com/problem-list/2cktkvj/</a></p><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><p><a href="https://leetcode-cn.com/problems/two-sum/submissions/">https://leetcode-cn.com/problems/two-sum/submissions/</a></p><img src="/Users/gaolei/Library/Application Support/typora-user-images/image-20210831143918937.png" alt="image-20210831143918937" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length -<span class="number">1</span> ; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = target - nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt; nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp == nums[j])&#123;</span><br><span class="line">                    arr[<span class="number">0</span>] = i;</span><br><span class="line">                    arr[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> arr;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还有一种方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">            res[<span class="number">1</span>] = i;</span><br><span class="line">            res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a><a href="https://leetcode-cn.com/problems/add-two-numbers/">2. 两数相加</a></h3><img src="/Users/gaolei/Library/Application Support/typora-user-images/image-20210831143837463.png" alt="image-20210831143837463" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode index = result;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || pre != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = l1 != <span class="keyword">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> b = l2 != <span class="keyword">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> c = a + b + pre;</span><br><span class="line">            <span class="keyword">if</span>(c &gt; <span class="number">9</span>)&#123;</span><br><span class="line">                c = c - <span class="number">10</span>;</span><br><span class="line">                pre = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.next = <span class="keyword">new</span> ListNode(c);</span><br><span class="line">            result = result.next;</span><br><span class="line">            l1 = l1 == <span class="keyword">null</span> ? l1 : l1.next;</span><br><span class="line">            l2 = l2 == <span class="keyword">null</span> ? l2 : l2.next;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>index指向result的头节点，result不断的往next添加值，最终返回index.next.</p></blockquote><p>⚠️  注意临界条件</p><p><code> while(l1 != null || l2 != null || pre != 0)</code></p><p><code>pre != 0</code> 是会出现最高位是1，但是l1和l2都是null的情况，所以最后需要判断一下pre的位置有没有值。</p><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h3><h3 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h3><img src="/Users/gaolei/Library/Application Support/typora-user-images/image-20210831164326354.png" alt="image-20210831164326354" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> [] arr = combineArr(nums1,nums2);</span><br><span class="line">        <span class="keyword">return</span> getResult(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> [] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            c = nums.length / <span class="number">2</span>;</span><br><span class="line">            d = c - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            c = (nums.length - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            d = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)(nums[c] + nums[d] ) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> [] combineArr(<span class="keyword">int</span> [] nums1, <span class="keyword">int</span> [] nums2)&#123;</span><br><span class="line">       <span class="keyword">int</span> [] target = <span class="keyword">new</span> <span class="keyword">int</span>[nums1.length + nums2.length];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums1.length &amp;&amp; j &lt; nums2.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt;= nums2[j])&#123;</span><br><span class="line">                target[offset] = nums1[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                target[offset] = nums2[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            offset++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i != nums1.length)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = i; x &lt; nums1.length;x++)&#123;</span><br><span class="line">                target[offset] = nums1[x];</span><br><span class="line">                offset++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = j; x &lt; nums2.length;x++)&#123;</span><br><span class="line">                target[offset] = nums2[x];</span><br><span class="line">                offset++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的思路比较清晰，合并两个有序数组，然后取中位数。</p><h3 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5. 最长回文子串</a></h3><img src="/Users/gaolei/Library/Application Support/typora-user-images/image-20210831233346789.png" alt="image-20210831233346789" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">int</span> step = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((i - step) &gt;= <span class="number">0</span> &amp;&amp; (i + step) &lt;= (s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - step) == s.charAt(i + step)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (step &gt;= maxLength &amp;&amp; (i - step) != (i + step)) &#123;</span><br><span class="line">                        left = Math.max((i - step), <span class="number">0</span>);</span><br><span class="line">                        right = (i + step);</span><br><span class="line">                    &#125;</span><br><span class="line">                    step++;</span><br><span class="line">                    maxLength = Math.max(maxLength, step);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(i + step)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (step &gt;= maxLength  &amp;&amp; step != <span class="number">0</span>) &#123;</span><br><span class="line">                        left = Math.max((i), <span class="number">0</span>);</span><br><span class="line">                        right = (i + step);</span><br><span class="line">                    &#125;</span><br><span class="line">                    step++;</span><br><span class="line">                    maxLength = Math.max(maxLength, step);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                step++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s.substring(left, right + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>❌ 上面这种写法在 <code>bb</code> <code>bbbb</code> <code>bbbbbb</code>这些用例下不兼容 有没有人帮忙调整一下！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> high = i, low = i;</span><br><span class="line">            <span class="keyword">while</span> (high &lt; n - <span class="number">1</span> &amp;&amp; chars[i] == chars[high + <span class="number">1</span>]) &#123;</span><br><span class="line">                high++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (low - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; high + <span class="number">1</span> &lt; n &amp;&amp; chars[low - <span class="number">1</span>] == chars[high + <span class="number">1</span>]) &#123;</span><br><span class="line">                high++;</span><br><span class="line">                low--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (high - low &gt; arr[<span class="number">1</span>] - arr[<span class="number">0</span>]) &#123;</span><br><span class="line">                arr[<span class="number">0</span>] = low;</span><br><span class="line">                arr[<span class="number">1</span>] = high;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(arr[<span class="number">0</span>], arr[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这种写法和上面👆第一种写法思想类似。</p><h3 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>) &#123;</span><br><span class="line">            n = n*<span class="number">10</span> + x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)n==n ? (<span class="keyword">int</span>)n:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种简单的方法，字符串反转。如果出现Integer.parseInt()异常，就返回0；</p><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h3><p>最先想到的肯定是暴力求解法，先对数组排个序，三层循环，判断重复组合，简单易懂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length - <span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> t = j + <span class="number">1</span>; t &lt; nums.length; t++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i] + nums[j] + nums[t] == <span class="number">0</span>)&#123;</span><br><span class="line">                        List temp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">                        temp.add(nums[i]);</span><br><span class="line">                        temp.add(nums[j]);</span><br><span class="line">                        temp.add(nums[t]);</span><br><span class="line">                        String flag = nums[i] + <span class="string">&quot;&quot;</span> + nums[j] + <span class="string">&quot;&quot;</span> +nums[t] ;</span><br><span class="line">                        <span class="keyword">if</span>(set.contains(flag))&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        set.add(flag);</span><br><span class="line">                        list.add(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方式肯定是比较差的，leetcode上也是直接执行超时了。</p><p>优化 👇： </p><img src="/Users/gaolei/Library/Application Support/typora-user-images/image-20210902154107965.png" alt="image-20210902154107965" style="zoom:50%;" /><p><a href="https://leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/"><strong>解题方案</strong></a></p><p>首先对数组进行排序，排序后固定一个数 nums[i]nums[i]，再使用左右指针指向 nums[i]nums[i]后面的两端，数字分别为 nums[L]nums[L] 和 nums[R]nums[R]，计算三个数的和 sumsum 判断是否满足为 00，满足则添加进结果集<br>如果 nums[i]nums[i]大于 00，则三数之和必然无法等于 00，结束循环<br>如果 nums[i]nums[i] == nums[i-1]nums[i−1]，则说明该数字重复，会导致结果重复，所以应该跳过<br>当 sumsum == 00 时，nums[L]nums[L] == nums[L+1]nums[L+1] 则会导致结果重复，应该跳过，L++L++<br>当 sumsum == 00 时，nums[R]nums[R] == nums[R-1]nums[R−1] 则会导致结果重复，应该跳过，R–R−−<br>时间复杂度：O(n^2)O(n 2 )，nn 为数组长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// -4,-1,-1,0,1,2</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] )&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="keyword">int</span> count = nums[i] + nums[l] + nums[r];</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    </span><br><span class="line">                    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">                    list.add(nums[i]);</span><br><span class="line">                    list.add(nums[l]);</span><br><span class="line">                    list.add(nums[r]);</span><br><span class="line">                    result.add(list);</span><br><span class="line">                    <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[l] == nums[l+<span class="number">1</span>])&#123;</span><br><span class="line">                        l++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[r] == nums[r-<span class="number">1</span>])&#123;</span><br><span class="line">                        r--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    l++;</span><br><span class="line">                    r--;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;              </span><br><span class="line">                <span class="keyword">if</span>(count &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h3><img src="/Users/gaolei/Library/Application Support/typora-user-images/image-20210902160727578.png" alt="image-20210902160727578" style="zoom:67%;" /><p>思路： 快慢指针先找到倒数第K个节点，然后把这个节点的前节点设置成这个节点的后节点。</p><p><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/</a></p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210902161032803.png" alt="image-20210902161032803"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode l = head;</span><br><span class="line">        ListNode r = head;</span><br><span class="line">        ListNode result = <span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode node = result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(r != <span class="keyword">null</span> &amp;&amp; n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            r = r.next;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(r != <span class="keyword">null</span>)&#123;</span><br><span class="line">            r = r.next;</span><br><span class="line">            result.next = l;</span><br><span class="line">            l = l.next;</span><br><span class="line">            result = result.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        result.next = l.next;</span><br><span class="line">        <span class="keyword">return</span> node.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h3><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210911204758796.png" alt="image-20210911204758796" style="zoom:50%;" /><p><strong>解题思路：</strong></p><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/yuan-lai-hui-luo-ji-qing-xi-jian-dan-yi-8t93h/">【猿来绘（逻辑清晰，简单易懂）- 24. 两两交换链表中的节点】</a></p><p><strong>非递归：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode result = <span class="keyword">new</span> ListNode();</span><br><span class="line">        result.next = head;</span><br><span class="line">        ListNode curr = result;</span><br><span class="line">        <span class="keyword">while</span>(curr.next != <span class="keyword">null</span> &amp;&amp; curr.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">           ListNode temp = curr;</span><br><span class="line">           ListNode first = curr.next;</span><br><span class="line">           ListNode second = first.next;</span><br><span class="line">           temp.next = second;</span><br><span class="line">           first.next = second.next;</span><br><span class="line">           second.next = first;</span><br><span class="line">            curr = curr.next.next;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode next = head.next;</span><br><span class="line">        head.next = swapPairs(next.next);</span><br><span class="line">        next.next = head;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：guanpengchn</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/swap-nodes-in-pairs/solution/hua-jie-suan-fa-24-liang-liang-jiao-huan-lian-biao/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61. 旋转链表"></a><a href="https://leetcode-cn.com/problems/rotate-list/">61. 旋转链表</a></h3><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。</p><p>解题思路参见：👇</p><p><a href="https://leetcode-cn.com/problems/rotate-list/solution/dong-hua-yan-shi-kuai-man-zhi-zhen-61-xu-7bp0/">https://leetcode-cn.com/problems/rotate-list/solution/dong-hua-yan-shi-kuai-man-zhi-zhen-61-xu-7bp0/</a></p><blockquote><p>向右移动k个位置就相当于倒数第k个节点做头节点，把前面的部分拼后后面就完事了，思路很简单，就这一句话。</p><p>这种思路最核心的点在于寻找倒数第k个点，这个和上面19题差不多。</p><p>快慢指针寻找倒数第k个点，快的走两步，慢的走一步，步数走完或者节点为空了，慢节点就是倒数第k个点</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span> || head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode node = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> target = k % length;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode origin = head;</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = head;</span><br><span class="line">        <span class="keyword">int</span> num = target + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(first != <span class="keyword">null</span> &amp;&amp; num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            num--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(first != <span class="keyword">null</span>)&#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode newNode = second.next;</span><br><span class="line">        second.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode tail = newNode;</span><br><span class="line">        <span class="keyword">while</span>(tail.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tail.next = origin;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;挑战LeetCode热度Top100-👇&quot;&gt;&lt;a href=&quot;#挑战LeetCode热度Top100-👇&quot; class=&quot;headerlink&quot; title=&quot;挑战LeetCode热度Top100 👇&quot;&gt;&lt;/a&gt;挑战LeetCode热度Top100 👇&lt;/</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis-布隆过滤器</title>
    <link href="http://example.com/wiki/Redis-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://example.com/wiki/Redis-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-08-31T03:46:19.000Z</published>
    <updated>2021-08-31T03:46:19.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-事务传播行为</title>
    <link href="http://example.com/wiki/Spring-%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/"/>
    <id>http://example.com/wiki/Spring-%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/</id>
    <published>2021-08-30T12:53:54.000Z</published>
    <updated>2021-08-30T12:54:29.635Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/IglQITCkmx7Lpz60QOW7HA">https://mp.weixin.qq.com/s/IglQITCkmx7Lpz60QOW7HA</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/IglQITCkmx7Lpz60QOW7HA&quot;&gt;https://mp.weixin.qq.com/s/IglQITCkmx7Lpz60QOW7HA&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis-如何实现高可用</title>
    <link href="http://example.com/wiki/Redis-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>http://example.com/wiki/Redis-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8/</id>
    <published>2021-08-30T07:54:00.000Z</published>
    <updated>2021-08-30T08:37:57.531Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7002011542145204261?utm_source=gold_browser_extension">https://juejin.cn/post/7002011542145204261?utm_source=gold_browser_extension</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7002011542145204261?utm_source=gold_browser_extension&quot;&gt;https://juejin.cn/post/7002011542145204261?utm_sou</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis-持久化机制</title>
    <link href="http://example.com/wiki/Redis-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/wiki/Redis-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</id>
    <published>2021-08-30T07:49:04.000Z</published>
    <updated>2021-08-31T03:20:40.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis启动加载"><a href="#Redis启动加载" class="headerlink" title="Redis启动加载"></a>Redis启动加载</h2><ul><li>优先加载AOF</li><li>其次加载RDB</li><li>如果都没有，直接启动成功，如果加载失败，则报错</li></ul><p><a href="https://juejin.cn/post/7002011542145204261?utm_source=gold_browser_extension">https://juejin.cn/post/7002011542145204261?utm_source=gold_browser_extension</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis启动加载&quot;&gt;&lt;a href=&quot;#Redis启动加载&quot; class=&quot;headerlink&quot; title=&quot;Redis启动加载&quot;&gt;&lt;/a&gt;Redis启动加载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优先加载AOF&lt;/li&gt;
&lt;li&gt;其次加载RDB&lt;/li&gt;
&lt;li&gt;如果</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-过期策略和内存淘汰策略</title>
    <link href="http://example.com/wiki/Redis-%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
    <id>http://example.com/wiki/Redis-%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</id>
    <published>2021-08-30T07:23:03.000Z</published>
    <updated>2021-08-30T07:29:40.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过期策略和内存淘汰策略"><a href="#过期策略和内存淘汰策略" class="headerlink" title="过期策略和内存淘汰策略"></a>过期策略和内存淘汰策略</h1><p>我们在<code>set key</code>的时候，可以给它设置一个过期时间，比如<code>expire key 60</code>。指定这key60s后过期，60s后，redis是如何处理的嘛？我们先来介绍几种过期策略：</p><h2 id="1-过期策略"><a href="#1-过期策略" class="headerlink" title="1. 过期策略"></a>1. 过期策略</h2><h3 id="1-1-定时过期"><a href="#1-1-定时过期" class="headerlink" title="1.1 定时过期"></a>1.1 定时过期</h3><p>每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即对key进行清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</p><h3 id="1-2-惰性过期"><a href="#1-2-惰性过期" class="headerlink" title="1.2 惰性过期"></a>1.2 惰性过期</h3><p>只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</p><h3 id="1-3-定期过期"><a href="#1-3-定期过期" class="headerlink" title="1.3 定期过期"></a>1.3 定期过期</h3><p>每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</p><p>expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。</p><p>Redis中同时使用了<strong>惰性过期和定期过期</strong>两种过期策略。</p><ul><li>假设Redis当前存放30万个key，并且都设置了过期时间，如果你每隔100ms就去检查这全部的key，CPU负载会特别高，最后可能会挂掉。</li><li>因此，redis采取的是定期过期，每隔100ms就随机抽取一定数量的key来检查和删除的。</li><li>但是呢，最后可能会有很多已经过期的key没被删除。这时候，redis采用惰性删除。在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间并且已经过期了，此时就会删除。</li></ul><p>但是呀，如果定期删除漏掉了很多过期的key，然后也没走惰性删除。就会有很多过期key积在内存内存，直接会导致内存爆的。或者有些时候，业务量大起来了，redis的key被大量使用，内存直接不够了，运维小哥哥也忘记加大内存了。难道redis直接这样挂掉？不会的！Redis用8种内存淘汰策略保护自己~</p><h2 id="Redis-内存淘汰策略"><a href="#Redis-内存淘汰策略" class="headerlink" title="Redis 内存淘汰策略"></a>Redis 内存淘汰策略</h2><p><strong>volatile-lru</strong>：从设置了过期时间的key中使用LRU（最近最少使用）算法进行淘汰；</p><p><strong>allkeys-lru</strong>：从所有key中使用LRU（最近最少使用）算法进行淘汰。</p><p><strong>volatile-lfu</strong>：4.0版本新增，在过期的key中，使用LFU算法进行删除key。</p><p><strong>allkeys-lfu</strong>：4.0版本新增，从所有key中使用LFU算法进行淘汰；</p><p><strong>volatile-random</strong>：从设置了过期时间的key中，随机淘汰数据；。</p><p><strong>allkeys-random</strong>：从所有key中随机淘汰数据。</p><p><strong>volatile-ttl</strong>：在设置了过期时间的key中，根据过期时间进行淘汰，越早过期的优先被淘汰；</p><p><strong>noeviction</strong>：默认策略，当内存不足以容纳新写入数据时，新写入操作会报错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过期策略和内存淘汰策略&quot;&gt;&lt;a href=&quot;#过期策略和内存淘汰策略&quot; class=&quot;headerlink&quot; title=&quot;过期策略和内存淘汰策略&quot;&gt;&lt;/a&gt;过期策略和内存淘汰策略&lt;/h1&gt;&lt;p&gt;我们在&lt;code&gt;set key&lt;/code&gt;的时候，可以给它设置一</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-ShardingJDBC分库分表实战</title>
    <link href="http://example.com/wiki/MySQL-ShardingJDBC%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/wiki/MySQL-ShardingJDBC%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%AE%9E%E6%88%98/</id>
    <published>2021-08-27T11:18:15.000Z</published>
    <updated>2021-08-30T06:13:16.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分库分表Demo"><a href="#分库分表Demo" class="headerlink" title="分库分表Demo"></a>分库分表Demo</h1><p><strong>项目地址</strong> <a href="https://github.com/geekibli/sharding-demos/tree/main/simple-sharding-stratery">https://github.com/geekibli/sharding-demos/</a></p><h2 id="Springboot-Sharding-jdbc"><a href="#Springboot-Sharding-jdbc" class="headerlink" title="Springboot + Sharding jdbc"></a>Springboot + Sharding jdbc</h2><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuridConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Filter <span class="title">statFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StatFilter filter = <span class="keyword">new</span> StatFilter();</span><br><span class="line">        filter.setSlowSqlMillis(<span class="number">5000</span>);</span><br><span class="line">        filter.setLogSlowSql(<span class="keyword">true</span>);</span><br><span class="line">        filter.setMergeSql(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建servlet注册实体</span></span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        <span class="comment">//设置ip白名单</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="comment">//设置ip黑名单，如果allow与deny共同存在时,deny优先于allow</span></span><br><span class="line">        <span class="comment">//servletRegistrationBean.addInitParameter(&quot;deny&quot;,&quot;192.168.0.19&quot;);</span></span><br><span class="line">        <span class="comment">//设置控制台管理用户</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//是否可以重置数据</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;resetEnable&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8071</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mybatis 配置</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapping/*.xml</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.ibli.sharding.simple.domain</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.names</span>=<span class="string">ds0,ds1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds0.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds0.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds0.url</span>=<span class="string">jdbc:mysql://localhost:3331/ds0?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds0.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds0.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds1.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds1.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds1.url</span>=<span class="string">jdbc:mysql://localhost:3331/ds1?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds1.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.ds1.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分库配置 ， 根据member_id分库</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column</span>=<span class="string">member_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression</span>=<span class="string">ds$-&gt;&#123;member_id % 2&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分表配置，根据member_id分表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.member.actual-data-nodes</span>=<span class="string">ds$-&gt;&#123;0..1&#125;.member</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.member.table-strategy.inline.sharding-column</span>=<span class="string">member_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.member.table-strategy.inline.algorithm-expression</span>=<span class="string">member$-&gt;&#123;member_id % 2&#125;</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.member.key-generator.column</span>=<span class="string">member_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.member.key-generator.type</span>=<span class="string">SNOWFLAKE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.shardingsphere.props.sql.show</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        <span class="comment">//不用手动设置主键id，新增时，sharding-jdbc会自动赋值，因为在配置文件中配置了该列使用SNOWFLAKE算法生成值</span></span><br><span class="line"><span class="comment">//        member.setMemberId(IdWorker.getLongId());</span></span><br><span class="line">        member.setNickName(<span class="string">&quot;nickname&quot;</span>);</span><br><span class="line">        member.setAccountNo(<span class="keyword">new</span> Date().hashCode());</span><br><span class="line">        member.setPassword(UUID.randomUUID().toString());</span><br><span class="line">        member.setAge(<span class="number">10</span>);</span><br><span class="line">        member.setDelFlag(UUID.randomUUID().toString());</span><br><span class="line">        memberServiceImpl.insert(member);</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="SQL文件"><a href="#SQL文件" class="headerlink" title="SQL文件"></a>SQL文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `member0` (</span><br><span class="line">  `member_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `nick_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `account_no` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birthday` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `del_flag` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`member_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">0</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `member1` (</span><br><span class="line">  `member_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `nick_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `account_no` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birthday` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `del_flag` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`member_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">0</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><h4 id="访问创建用户接口"><a href="#访问创建用户接口" class="headerlink" title="访问创建用户接口"></a>访问创建用户接口</h4><p><code>curl -X GET http://localhost:8071/member/add</code></p><h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/20210830141127.png"><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.cn/post/6844903773383426061">https://juejin.cn/post/6844903773383426061</a></p><p><a href="https://juejin.cn/post/6890772387000762382">https://juejin.cn/post/6890772387000762382</a></p><p><a href="https://shardingsphere.apache.org/document/current/cn/quick-start/shardingsphere-proxy-quick-start/">https://shardingsphere.apache.org/document/current/cn/quick-start/shardingsphere-proxy-quick-start/</a></p><p><a href="https://www.pianshen.com/article/7996383507/">https://www.pianshen.com/article/7996383507/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分库分表Demo&quot;&gt;&lt;a href=&quot;#分库分表Demo&quot; class=&quot;headerlink&quot; title=&quot;分库分表Demo&quot;&gt;&lt;/a&gt;分库分表Demo&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;项目地址&lt;/strong&gt; &lt;a href=&quot;https://github.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL-主从同步原理以及实现</title>
    <link href="http://example.com/wiki/MySQL-%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/wiki/MySQL-%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-08-27T08:53:05.000Z</published>
    <updated>2021-08-27T10:56:25.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h2><p>我们在平时工作中，使用最多的数据库就是 <code>MySQL</code> 了，随着业务的增加，如果单单靠一台服务器的话，负载过重，就容易造成<strong>宕机</strong>。</p><p>这样我们保存在 MySQL 数据库的数据就会丢失，那么该怎么解决呢？</p><p>其实在 MySQL 本身就自带有一个主从复制的功能，可以帮助我们实现<strong>负载均衡和读写分离</strong>。</p><p>对于主服务器（Master）来说，主要负责写，从服务器（Slave）主要负责读，这样的话，就会大大减轻压力，从而提高效率。</p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210827173121932.png" alt="image-20210827173121932" style="zoom:33%;" /><p>MySQL 的主从复制工作过程大致如下：</p><ol><li>从库生成<strong>两个线程</strong>，一个 I/O 线程，一个 SQL 线程；</li><li>I/O 线程去请求主库的 binlog，并将得到的 binlog 日志<strong>写到</strong> relay log(中继日志) 文件中；</li><li>主库会<strong>生成</strong>一个 log dump 线程，用来给从库 I/O 线程传 binlog；</li><li>SQL 线程会读取 relay log 文件中的日志，并<strong>解析</strong>成具体操作，来实现主从的操作一致，而最终数据一致；</li></ol><h4 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h4><p>MySQL 建立请求的主从的详细流程如下：</p><ol><li>当从服务器连接主服务器时，主服务器会创建一个 log dump 线程，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对象主节点上的 binlog <strong>加锁</strong>，当读取完成并发送给从服务器后解锁。</li><li>当从节点上执行 <code>start slave</code> 命令之后，从节点会创建一个 IO 线程用来连接主节点，请求主库中<strong>更新</strong>binlog。IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 relay-log 中。</li><li>从节点 SQL 线程负责读取 realy-log 中的内容，<strong>解析</strong>成具体的操作执行，最终保证主从数据的一致性。</li></ol><h2 id="主从同步实现"><a href="#主从同步实现" class="headerlink" title="主从同步实现"></a>主从同步实现</h2><p>我这里实现了一主一从。数据库版本都是用的MySQL5.8。</p><h3 id="设置主库"><a href="#设置主库" class="headerlink" title="设置主库"></a>设置主库</h3><h4 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin #添加这一行就ok</span><br><span class="line">binlog-format=ROW #选择row模式</span><br><span class="line">server_id=1 #配置mysql replaction需要定义</span><br></pre></td></tr></table></figure><h4 id="创建同步用户"><a href="#创建同步用户" class="headerlink" title="创建同步用户"></a>创建同步用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;*&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;repl&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 授权，只授予复制和客户端访问权限</span><br><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;*&#x27;</span>;#分配权限</span><br></pre></td></tr></table></figure><h4 id="查看binlog状态"><a href="#查看binlog状态" class="headerlink" title="查看binlog状态"></a>查看binlog状态</h4><p><code>SHOW MASTER STATUS;</code></p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210827170105244.png" alt="image-20210827170105244"></p><p>Position一开始同步之前是在 2729 位置。</p><h3 id="配置从库Slave"><a href="#配置从库Slave" class="headerlink" title="配置从库Slave"></a>配置从库Slave</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin #添加这一行就ok</span><br><span class="line">binlog-format=ROW #选择row模式</span><br><span class="line">server_id=2 </span><br></pre></td></tr></table></figure><h4 id="设置同步信息"><a href="#设置同步信息" class="headerlink" title="设置同步信息"></a>设置同步信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;123.56.77.177&#x27;</span>, </span><br><span class="line">        MASTER_USER<span class="operator">=</span><span class="string">&#x27;repl&#x27;</span>, </span><br><span class="line">        MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;repl&#x27;</span>,</span><br><span class="line">        MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;binlog.000001&#x27;</span>, </span><br><span class="line">        MASTER_LOG_POS<span class="operator">=</span><span class="number">2729</span>, </span><br><span class="line">        Master_Port <span class="operator">=</span> <span class="number">3306</span>;</span><br></pre></td></tr></table></figure><p>执行这个SQL必须是在 <code>slave not running</code> 状态下可以运行，可以 <code>stop slave</code>命令来停止slave。</p><h4 id="启动slave"><a href="#启动slave" class="headerlink" title="启动slave"></a>启动slave</h4><p><code>mysql&gt;start slave;</code></p><h4 id="查看slave状态"><a href="#查看slave状态" class="headerlink" title="查看slave状态"></a>查看slave状态</h4><p><code>mysql&gt; show slave status\G</code></p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210827170515304.png" alt="image-20210827170515304"></p><p>⚠️ 只有当 <code>Slave_IO_Running: Yes</code> 和 <code>Slave_SQL_Running: Yes</code> 同时是 yes的时候，才可以进行同步。</p><h4 id="Slave-IO-Running-No-可能的原因"><a href="#Slave-IO-Running-No-可能的原因" class="headerlink" title="Slave_IO_Running: No 可能的原因"></a>Slave_IO_Running: No 可能的原因</h4><p>1、端口不同</p><p><code>ping ip</code> 如果是docker启动的mysql的话，需要退出docker来测试端口。</p><p><code>telnet ip port</code></p><p>2、没有权限</p><p><code>grant replication slave, replication client on *.* to  &#39;repl&#39;@&#39;%&#39;;</code></p><p>3、binlog文件写错</p><p>可以查看 <code> Last_IO_Error</code> 的错误提示，我这里遇到一个错误，主库binlog文件是binlog.000001 ，但是我直接粘贴别人博客的时候，没有注意，博客上面写的是mysql-bin.000001。</p><h2 id="同步效果测试"><a href="#同步效果测试" class="headerlink" title="同步效果测试"></a>同步效果测试</h2><h4 id="分三个步骤测试"><a href="#分三个步骤测试" class="headerlink" title="分三个步骤测试"></a>分三个步骤测试</h4><p><strong>1、测试数据库</strong></p><p><strong>2、测试表</strong></p><p><strong>3、测试表数据</strong></p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210827171817248.png" alt="image-20210827171817248" style="zoom:50%;" /><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>主从同步的类型 （异步 同步 半同步 延迟）</p><p><a href="https://juejin.cn/post/6967224081410162696">https://juejin.cn/post/6967224081410162696</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主从复制的原理&quot;&gt;&lt;a href=&quot;#主从复制的原理&quot; class=&quot;headerlink&quot; title=&quot;主从复制的原理&quot;&gt;&lt;/a&gt;主从复制的原理&lt;/h2&gt;&lt;p&gt;我们在平时工作中，使用最多的数据库就是 &lt;code&gt;MySQL&lt;/code&gt; 了，随着业务的增加，如</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装MySQL</title>
    <link href="http://example.com/wiki/Docker%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://example.com/wiki/Docker%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2021-08-27T06:16:47.000Z</published>
    <updated>2021-08-27T08:53:43.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux安装docker"><a href="#linux安装docker" class="headerlink" title="linux安装docker"></a>linux安装docker</h2><p><code>yum update</code><br><code>yum install docker</code></p><p>结果启动docker时报错了 👇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.</span><br><span class="line">Error: open /proc/self/uid_map: no such file or directory</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong><br>1，卸载podman软件（可以使用rpm -qa|grep docker）<br><code>yum remove docker</code><br>2,下载docker-ce源<br><code>curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</code><br>3，安装docker-ce<br><code>yum install docker-ce -y</code></p><p><strong>问题原因分析：</strong><br>Centos 8使用yum install docker -y时，默认安装的是podman-docker软件</p><h3 id="查看docker状态"><a href="#查看docker状态" class="headerlink" title="查看docker状态"></a>查看docker状态</h3><img src = 'https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/20210827142038.png'><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><p><code>systemctl start docker</code><br><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/20210827142309.png"></p><h2 id="安装MySQl"><a href="#安装MySQl" class="headerlink" title="安装MySQl"></a>安装MySQl</h2><p><code>docker search mysql</code></p><h3 id="选择你要安装的版本"><a href="#选择你要安装的版本" class="headerlink" title="选择你要安装的版本"></a><strong>选择你要安装的版本</strong></h3><p><code>docker pull centos/mysql-57-centos7</code></p><h3 id="查看安装的镜像"><a href="#查看安装的镜像" class="headerlink" title="查看安装的镜像"></a><strong>查看安装的镜像</strong></h3><p><code>docker images</code><br><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/20210827142710.png"></p><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a><strong>启动mysql</strong></h3><p><code>docker run --name mysqlserver -v /etc/mysql/my.conf:/etc/my.conf -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 centos/mysql-57-centos7</code><br><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/20210827143045.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;linux安装docker&quot;&gt;&lt;a href=&quot;#linux安装docker&quot; class=&quot;headerlink&quot; title=&quot;linux安装docker&quot;&gt;&lt;/a&gt;linux安装docker&lt;/h2&gt;&lt;p&gt;&lt;code&gt;yum update&lt;/code&gt;&lt;br</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>算法-KMP算法以及扩展</title>
    <link href="http://example.com/wiki/%E7%AE%97%E6%B3%95-KMP%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    <id>http://example.com/wiki/%E7%AE%97%E6%B3%95-KMP%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%89%A9%E5%B1%95/</id>
    <published>2021-08-26T14:27:32.000Z</published>
    <updated>2021-08-26T15:23:50.995Z</updated>
    
    <content type="html"><![CDATA[<p>题目1</p><p>“123456” 和 “345612”是不是互为旋转串</p><p>思路：“123456123456” 判断 “345612”  是不是子串就可以了</p><p>题目2</p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210826225159606.png" alt="image-20210826225159606"></p><p>![image-20210826225714858](/Users/gaolei/Library/Application Support/typora-user-images/image-20210826225714858.png)</p><img src="/Users/gaolei/Library/Application Support/typora-user-images/image-20210826230341631.png" alt="image-20210826230341631" style="zoom: 25%;" /><p>荷兰国旗问题？？？</p><p>Bfprt 算法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目1&lt;/p&gt;
&lt;p&gt;“123456” 和 “345612”是不是互为旋转串&lt;/p&gt;
&lt;p&gt;思路：“123456123456” 判断 “345612”  是不是子串就可以了&lt;/p&gt;
&lt;p&gt;题目2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.n</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="KMP" scheme="http://example.com/tags/KMP/"/>
    
  </entry>
  
</feed>
