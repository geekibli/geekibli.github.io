<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekIBLi</title>
  
  <subtitle>For Coder</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-19T07:32:53.269Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>gaolei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL中的锁🔒</title>
    <link href="http://example.com/wiki/MySQL%E4%B8%AD%E7%9A%84%E9%94%81%F0%9F%94%92/"/>
    <id>http://example.com/wiki/MySQL%E4%B8%AD%E7%9A%84%E9%94%81%F0%9F%94%92/</id>
    <published>2021-08-19T07:17:31.000Z</published>
    <updated>2021-08-19T07:32:53.269Z</updated>
    
    <content type="html"><![CDATA[<p>乐观锁和悲观锁</p><h3 id="表锁和行锁"><a href="#表锁和行锁" class="headerlink" title="表锁和行锁"></a>表锁和行锁</h3><blockquote><p><strong>表锁</strong>： 开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</p></blockquote><p>表锁按照数据操作可以分成两种：</p><ul><li>表读锁（Table Read Lock）</li><li>表写锁（Table Write Lock</li></ul><p>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</p><p>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</p><p>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</p><blockquote><p><strong>行锁</strong>： 开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高</p></blockquote><p>InnoDB实现了以下<strong>两种</strong>类型的行锁。</p><ul><li><p>共享锁（S锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</p></li><li><p>也叫做<strong>读锁</strong>：读锁是<strong>共享</strong>的，多个客户可以<strong>同时读取同一个</strong>资源，但<strong>不允许其他客户修改</strong>。</p></li><li><p>排他锁（X锁)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。</p></li><li><p>也叫做<strong>写锁</strong>：写锁是排他的，<strong>写锁会阻塞其他的写锁和读锁</strong>。</p></li></ul><p>另外，<strong>为了允许行锁和表锁共存，实现多粒度锁机制</strong>，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>：</p><ul><li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</li><li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</li><li>意向锁也是数据库隐式帮我们做了，<strong>不需要程序员操心</strong>！</li></ul><p>⚠️ <strong>InnoDB行锁和表锁都支持</strong>！<font color=red><strong>MyISAM只支持表锁</strong>！</font></p><h3 id="innoDB什么时候会使用到行锁？"><a href="#innoDB什么时候会使用到行锁？" class="headerlink" title="innoDB什么时候会使用到行锁？"></a>innoDB什么时候会使用到行锁？</h3><p>InnoDB只有通过<strong>索引条件</strong>检索数据<strong>才使用行级锁</strong>，否则，InnoDB将使用<strong>表锁</strong></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484721&idx=1&sn=410dea1863ba823bec802769e1e6fe8a&chksm=ebd74430dca0cd265a9a91dcb2059e368f43a25f3de578c9dbb105e1fba0947e1fd0b9c2f4ef&token=1676899695&lang=zh_CN###rd">数据库两大神器【索引和锁】</a></p><p><a href="https://geekibli.github.io/wiki/mysql%E4%B9%90%E8%A7%82%E9%94%81%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/">基于数据表乐观锁实现分布式锁</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;乐观锁和悲观锁&lt;/p&gt;
&lt;h3 id=&quot;表锁和行锁&quot;&gt;&lt;a href=&quot;#表锁和行锁&quot; class=&quot;headerlink&quot; title=&quot;表锁和行锁&quot;&gt;&lt;/a&gt;表锁和行锁&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;表锁&lt;/strong&gt;： 开销小，加锁快；不</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能调优</title>
    <link href="http://example.com/wiki/MySQL%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <id>http://example.com/wiki/MySQL%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</id>
    <published>2021-08-19T06:06:45.000Z</published>
    <updated>2021-08-19T08:25:08.529Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、使用【-覆盖索引-】避免回表锁造成的时间消耗"><a href="#1、使用【-覆盖索引-】避免回表锁造成的时间消耗" class="headerlink" title="1、使用【 覆盖索引 】避免回表锁造成的时间消耗"></a>1、使用【 覆盖索引 】避免回表锁造成的时间消耗</h5><p>1、查询语句的时候避免使用select * </p><p>2、创建索引添加适当的列避免回表</p><h5 id="2、使用【-联合索引-】区分度比较高的列放到前面"><a href="#2、使用【-联合索引-】区分度比较高的列放到前面" class="headerlink" title="2、使用【 联合索引 】区分度比较高的列放到前面"></a>2、使用【 联合索引 】区分度比较高的列放到前面</h5><p>注意联合索引的最左匹配原则</p><h5 id="3、对索引进行函数计算或者表达式计算会导致索引失效-🔒"><a href="#3、对索引进行函数计算或者表达式计算会导致索引失效-🔒" class="headerlink" title="3、对索引进行函数计算或者表达式计算会导致索引失效 🔒"></a>3、对索引进行函数计算或者表达式计算会导致索引失效 🔒</h5><h5 id="4、利用子查询优化超多分页场景"><a href="#4、利用子查询优化超多分页场景" class="headerlink" title="4、利用子查询优化超多分页场景"></a>4、利用子查询优化超多分页场景</h5><h5 id="5、explain命令查询执行计划-show-profile查询执行的性能消耗"><a href="#5、explain命令查询执行计划-show-profile查询执行的性能消耗" class="headerlink" title="5、explain命令查询执行计划 show profile查询执行的性能消耗"></a>5、explain命令查询执行计划 show profile查询执行的性能消耗</h5><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484461&idx=2&sn=5469534e2f370aba86c3a24a2ff52b70&chksm=ebd7452cdca0cc3ad456d695a78f48e72c245f85b4afb210fb7b62218e89785d964d72ec4891&token=620000779&lang=zh_CN&scene=21###wechat_redirect">面试前必须知道的MySQL命令【expalin】 -3y</a></p><h5 id="6、在事务开始后，事务内尽可能只操作数据库，减少锁持有时间"><a href="#6、在事务开始后，事务内尽可能只操作数据库，减少锁持有时间" class="headerlink" title="6、在事务开始后，事务内尽可能只操作数据库，减少锁持有时间"></a>6、在事务开始后，事务内尽可能只操作数据库，减少锁持有时间</h5><h5 id="7、尽量避免字符串查询，如果允许的话可以使用Elasticsearch"><a href="#7、尽量避免字符串查询，如果允许的话可以使用Elasticsearch" class="headerlink" title="7、尽量避免字符串查询，如果允许的话可以使用Elasticsearch"></a>7、尽量避免字符串查询，如果允许的话可以使用Elasticsearch</h5><h5 id="8、如果优化都做了还是查询的很慢，可以做一些聚合表，线上的业务直接查聚合之后的数据"><a href="#8、如果优化都做了还是查询的很慢，可以做一些聚合表，线上的业务直接查聚合之后的数据" class="headerlink" title="8、如果优化都做了还是查询的很慢，可以做一些聚合表，线上的业务直接查聚合之后的数据"></a>8、如果优化都做了还是查询的很慢，可以做一些聚合表，线上的业务直接查聚合之后的数据</h5><h5 id="9、读写瓶颈问题"><a href="#9、读写瓶颈问题" class="headerlink" title="9、读写瓶颈问题"></a>9、读写瓶颈问题</h5><p>9.1 如果是单库的情况下，可以考虑读写分离，提升读/写的性能</p><p>9.2 主从结构下还是存在瓶颈的话，可以考虑分库分表</p><p>注意 分库分表下的id尽量保证递增</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1、使用【-覆盖索引-】避免回表锁造成的时间消耗&quot;&gt;&lt;a href=&quot;#1、使用【-覆盖索引-】避免回表锁造成的时间消耗&quot; class=&quot;headerlink&quot; title=&quot;1、使用【 覆盖索引 】避免回表锁造成的时间消耗&quot;&gt;&lt;/a&gt;1、使用【 覆盖索引 】避免</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>kafka-基础知识</title>
    <link href="http://example.com/wiki/kafka-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/wiki/kafka-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-08-18T12:05:29.000Z</published>
    <updated>2021-08-18T12:14:58.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka是什么"><a href="#kafka是什么" class="headerlink" title="kafka是什么"></a>kafka是什么</h2><h2 id="kafka运行时架构"><a href="#kafka运行时架构" class="headerlink" title="kafka运行时架构"></a>kafka运行时架构</h2><h2 id="kafka为什么能承载高并发"><a href="#kafka为什么能承载高并发" class="headerlink" title="kafka为什么能承载高并发"></a>kafka为什么能承载高并发</h2><h2 id="kafka的确认机制是什么"><a href="#kafka的确认机制是什么" class="headerlink" title="kafka的确认机制是什么"></a>kafka的确认机制是什么</h2><h2 id="kafka如何保证消息准确"><a href="#kafka如何保证消息准确" class="headerlink" title="kafka如何保证消息准确"></a>kafka如何保证消息准确</h2><p>kafka会丢消息吗？</p><p>kafka会重复消费消息吗</p><p>幂等性</p><h2 id="消息顺序消费问题"><a href="#消息顺序消费问题" class="headerlink" title="消息顺序消费问题"></a>消息顺序消费问题</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4NzA3MTc5Mg==&mid=2247484387&idx=1&sn=5bb2ba58776e65f53b091a4bcdb73755&chksm=fdf0ebbcca8762aadc359066ecd70274fa23ee846f9ba9114017402dcbed415f25f97d3020a6&token=1131755397&lang=zh_CN&scene=21#wechat_redirect">kafka基础知识 - yyy</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kafka是什么&quot;&gt;&lt;a href=&quot;#kafka是什么&quot; class=&quot;headerlink&quot; title=&quot;kafka是什么&quot;&gt;&lt;/a&gt;kafka是什么&lt;/h2&gt;&lt;h2 id=&quot;kafka运行时架构&quot;&gt;&lt;a href=&quot;#kafka运行时架构&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="kafka" scheme="http://example.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spring-事务隔离</title>
    <link href="http://example.com/wiki/Spring-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
    <id>http://example.com/wiki/Spring-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</id>
    <published>2021-08-18T03:10:21.000Z</published>
    <updated>2021-08-18T03:11:08.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.cn/post/6854573219916021767">https://juejin.cn/post/6854573219916021767</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6854573219916021767&quot;&gt;https://j</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Flink-物理分区函数</title>
    <link href="http://example.com/wiki/Flink-%E7%89%A9%E7%90%86%E5%88%86%E5%8C%BA%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/wiki/Flink-%E7%89%A9%E7%90%86%E5%88%86%E5%8C%BA%E5%87%BD%E6%95%B0/</id>
    <published>2021-08-12T08:38:31.000Z</published>
    <updated>2021-08-12T08:55:41.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flink提供的8种分区函数"><a href="#Flink提供的8种分区函数" class="headerlink" title="Flink提供的8种分区函数"></a>Flink提供的8种分区函数</h1><h2 id="GlobalPartitioner"><a href="#GlobalPartitioner" class="headerlink" title="GlobalPartitioner"></a>GlobalPartitioner</h2><p>该分区器会将所有的数据都发送到下游的某个算子实例(subtask id = 0)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  数据会被分发到下游算子的第一个实例中进行处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">global</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv().setMaxParallelism(<span class="number">8</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;qqq&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        dataStream.flatMap(<span class="keyword">new</span> RichFlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;String&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                collector.collect(s + <span class="string">&quot;_**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).setParallelism(<span class="number">2</span>).global().print(<span class="string">&quot;global : &quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="ShufflePartitioner"><a href="#ShufflePartitioner" class="headerlink" title="ShufflePartitioner"></a>ShufflePartitioner</h2><p>随机选择一个下游算子实例进行发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据会被随机分发到下游算子的每一个实例中进行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv();</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;qqq&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; broadcast = dataStream.shuffle();</span><br><span class="line">        broadcast.print(<span class="string">&quot;shuffle : &quot;</span>);</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="BroadcastPartitioner"><a href="#BroadcastPartitioner" class="headerlink" title="BroadcastPartitioner"></a>BroadcastPartitioner</h2><p>发送到下游所有的算子实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//广播分区会将上游数据输出到下游算子的每个实例中。适合于大数据集和小数据集做Jion的场景</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">broadcast</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv();</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;qqq&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; broadcast = dataStream.broadcast();</span><br><span class="line">        broadcast.print(<span class="string">&quot;broadcast : &quot;</span>);</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="RebalancePartitioner"><a href="#RebalancePartitioner" class="headerlink" title="RebalancePartitioner"></a>RebalancePartitioner</h2><p>通过循环的方式依次发送到下游的task</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rebalance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv().setParallelism(<span class="number">4</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;qqq&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        dataStream.map(<span class="keyword">new</span> RichMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s + <span class="string">&quot;_**&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).setParallelism(<span class="number">1</span>).rebalance().print(<span class="string">&quot;rebalance : &quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="RescalePartitioner"><a href="#RescalePartitioner" class="headerlink" title="RescalePartitioner"></a>RescalePartitioner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这种分区器会根据上下游算子的并行度，循环的方式输出到下游算子的每个实例。这里有点难以理解，假设上游并行度为 2，编号为 A 和 B。下游并行度为 4，编号为 1，2，3，4。那么 A 则把数据循环发送给 1 和 2，B 则把数据循环发送给 3 和 4。假设上游并行度为 4，编号为 A，B，C，D。下游并行度为 2，编号为 1，2。那么 A 和 B 则把数据发送给 1，C 和 D 则把数据发送给 2。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rescale</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv().setParallelism(<span class="number">4</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;qqq&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        dataStream.map(<span class="keyword">new</span> RichMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s + <span class="string">&quot;_**&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).setParallelism(<span class="number">1</span>).rescale().print(<span class="string">&quot;rescale : &quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="ForwardPartitioner"><a href="#ForwardPartitioner" class="headerlink" title="ForwardPartitioner"></a>ForwardPartitioner</h2><p>发送到下游对应的第一个task，保证上下游算子并行度一致，即上有算子与下游算子是1:1的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于将记录输出到下游本地的算子实例。它要求上下游算子并行度一样。简单的说，ForwardPartitioner用来做数据的控制台打印。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv().setParallelism(<span class="number">1</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;qqq&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; broadcast = dataStream.shuffle();</span><br><span class="line">        broadcast.print(<span class="string">&quot;shuffle : &quot;</span>);</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>⚠️ 在上下游的算子没有指定分区器的情况下，如果上下游的算子并行度一致，则使用ForwardPartitioner，否则使用RebalancePartitioner，对于ForwardPartitioner，必须保证上下游算子并行度一致，否则会抛出异常。</p><h2 id="KeyByPartitioner"><a href="#KeyByPartitioner" class="headerlink" title="KeyByPartitioner"></a>KeyByPartitioner</h2><p>根据key的分组索引选择发送到相对应的下游subtask</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">keyBy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv().setMaxParallelism(<span class="number">8</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        dataStream.flatMap(<span class="keyword">new</span> RichFlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;String&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                collector.collect(s + <span class="string">&quot;_**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).keyBy(String::toString).print(<span class="string">&quot;keyBy : &quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="CustomPartitionerWrapper"><a href="#CustomPartitionerWrapper" class="headerlink" title="CustomPartitionerWrapper"></a>CustomPartitionerWrapper</h2><p>通过Partitioner实例的partition方法(自定义的)将记录输出到下游。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">custom</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv().setMaxParallelism(<span class="number">8</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStream = env.fromElements(<span class="string">&quot;hhhh&quot;</span>, <span class="string">&quot;hhhss&quot;</span>, <span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;hhh&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;sss&quot;</span>, <span class="string">&quot;www&quot;</span>);</span><br><span class="line">        dataStream.flatMap(<span class="keyword">new</span> RichFlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;String&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                collector.collect(s + <span class="string">&quot;_**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).partitionCustom(<span class="keyword">new</span> CustomPartitioner(),String::toString)</span><br><span class="line">        .print(<span class="string">&quot;custom :&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// key: 根据key的值来分区</span></span><br><span class="line">        <span class="comment">// numPartitions: 下游算子并行度</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String key, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key.length() % numPartitions;<span class="comment">//在此处定义分区策略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_36039236/article/details/112576091?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.control&spm=1001.2101.3001.4242">Flink的八种分区策略源码解读</a></p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/zh/docs/dev/datastream/operators/overview/#custom-partitioning">Apache Flink 中文文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flink提供的8种分区函数&quot;&gt;&lt;a href=&quot;#Flink提供的8种分区函数&quot; class=&quot;headerlink&quot; title=&quot;Flink提供的8种分区函数&quot;&gt;&lt;/a&gt;Flink提供的8种分区函数&lt;/h1&gt;&lt;h2 id=&quot;GlobalPartitioner</summary>
      
    
    
    
    
    <category term="Apache Flink" scheme="http://example.com/tags/Apache-Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink-UDF函数类</title>
    <link href="http://example.com/wiki/Flink-UDF%E5%87%BD%E6%95%B0%E7%B1%BB/"/>
    <id>http://example.com/wiki/Flink-UDF%E5%87%BD%E6%95%B0%E7%B1%BB/</id>
    <published>2021-08-12T06:36:09.000Z</published>
    <updated>2021-08-12T07:18:26.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a>函数类</h2><p>比如说我们常用的MapFunction，FilterFunction，ProcessFunction等，每一步操作都基本上都对应一个Function。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMapper</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 首先按照空格分词</span></span><br><span class="line">      String[] words = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">      <span class="comment">// 遍历所有的word 包装成二元组输出</span></span><br><span class="line">      <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(word, <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ 简单滚动聚合函数，比如sum，max是不需要Function。</p><p><strong>好处：</strong></p><p>1、通用型强，可复用</p><p>2、可抽象方法，代码简洁</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>不需要单独定义Function，直接在Stream的操作中直接实现，效果和上面👆的完全一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; dataStream = unionStream.map(<span class="keyword">new</span> MapFunction&lt;String, SensorReading&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SensorReading <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      String[] strings = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(strings[<span class="number">0</span>], <span class="keyword">new</span> Double(strings[<span class="number">1</span>]), <span class="keyword">new</span> Double(strings[<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="富函数"><a href="#富函数" class="headerlink" title="富函数"></a>富函数</h2><p>‘‘富函数’’是DataStream API 提供的一个函数类的接口，所有Flink函数类都有其Rich版本，它与常规函数的不同在于，可以获取运行环境的上下文，并包含一些声明周期方法，所以可以实现更加复杂的功能。</p><p><code>RichMapFunction</code>，<code>RichFlatMapFunction</code>等等</p><p>Rich Function有一个生命周期的概念，典型的生命周期方法有 👇</p><p><code>open()</code> 方法是rich function的初始化方法，当一个算子比如map被调用之前被调用。</p><p><code>close()</code>方法是生命周期中最后一个被调用的方法，做一些清理工作。</p><blockquote><p>如果有多个分区的话，每个分区的open方法和close方法都会执行一次</p></blockquote><p><code>getRuntimeContext()</code>获取运行时上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RichFunctionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        DataStreamSource&lt;String&gt; dataSource = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = dataSource.map(<span class="keyword">new</span> MapFunction&lt;String, SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SensorReading <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] strings = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(strings[<span class="number">0</span>], <span class="keyword">new</span> Long(strings[<span class="number">1</span>]), <span class="keyword">new</span> Double(strings[<span class="number">2</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; stream = dataStream.map(<span class="keyword">new</span> MyMapFunction());</span><br><span class="line">        stream.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 富函数是抽象类，这里要用继承</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapFunction</span> <span class="keyword">extends</span> <span class="title">RichMapFunction</span>&lt;<span class="title">SensorReading</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;invoke open&quot;</span>);</span><br><span class="line">            <span class="comment">// 一般定义状态，或者链接数据库操作</span></span><br><span class="line">            <span class="keyword">super</span>.open(parameters);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">map</span><span class="params">(SensorReading sensorReading)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            RuntimeContext runtimeContext = <span class="keyword">this</span>.getRuntimeContext();</span><br><span class="line">            System.err.println(<span class="string">&quot;runtimeContext.getTaskName() : &quot;</span> + runtimeContext.getTaskName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(sensorReading.getSersorId(), runtimeContext.getIndexOfThisSubtask());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.close();</span><br><span class="line">            System.err.println(<span class="string">&quot;invoke close method&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数类&quot;&gt;&lt;a href=&quot;#函数类&quot; class=&quot;headerlink&quot; title=&quot;函数类&quot;&gt;&lt;/a&gt;函数类&lt;/h2&gt;&lt;p&gt;比如说我们常用的MapFunction，FilterFunction，ProcessFunction等，每一步操作都基本上都对应一个</summary>
      
    
    
    
    
    <category term="Apache Flink" scheme="http://example.com/tags/Apache-Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink-到底支持多少种数据类型</title>
    <link href="http://example.com/wiki/Flink-%E5%88%B0%E5%BA%95%E6%94%AF%E6%8C%81%E5%A4%9A%E5%B0%91%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/wiki/Flink-%E5%88%B0%E5%BA%95%E6%94%AF%E6%8C%81%E5%A4%9A%E5%B0%91%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-11T11:50:41.000Z</published>
    <updated>2021-08-12T06:35:36.160Z</updated>
    
    <content type="html"><![CDATA[<p>Flink支持所有的Java和Scala基础数据类型以及其包装类型</p><p>支持Tuple元组类型，Flink在Java API中定义了很多Tuple的实现类，从Tuple0 ~ Tuple25类型</p><p>Scala样例类 case class，对应Java中的POJO类对象(必须提供无参构造方法 get/set)</p><p>其他，比如 Arrays , Lists, Maps, Enums等都是支持的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Flink支持所有的Java和Scala基础数据类型以及其包装类型&lt;/p&gt;
&lt;p&gt;支持Tuple元组类型，Flink在Java API中定义了很多Tuple的实现类，从Tuple0 ~ Tuple25类型&lt;/p&gt;
&lt;p&gt;Scala样例类 case class，对应Java中</summary>
      
    
    
    
    
    <category term="Apache Flink" scheme="http://example.com/tags/Apache-Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink-如何读取数据源（集合｜文件｜自定义｜Kafka等）</title>
    <link href="http://example.com/wiki/Flink-%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%88%E9%9B%86%E5%90%88%EF%BD%9C%E6%96%87%E4%BB%B6%EF%BD%9C%E8%87%AA%E5%AE%9A%E4%B9%89%EF%BD%9CKafka%E7%AD%89%EF%BC%89/"/>
    <id>http://example.com/wiki/Flink-%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%88%E9%9B%86%E5%90%88%EF%BD%9C%E6%96%87%E4%BB%B6%EF%BD%9C%E8%87%AA%E5%AE%9A%E4%B9%89%EF%BD%9CKafka%E7%AD%89%EF%BC%89/</id>
    <published>2021-08-11T11:50:11.000Z</published>
    <updated>2021-08-11T12:08:35.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>这里是以txt文件为例，实现WordCount，其他文件类型同理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建执行环境</span></span><br><span class="line">        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 2、读取文件数据</span></span><br><span class="line">        String inputPath = <span class="string">&quot;/Users/gaolei/Documents/DemoProjects/flink-start/src/main/resources/hello.txt&quot;</span>;</span><br><span class="line">        DataSource&lt;String&gt; dataSource = env.readTextFile(inputPath);</span><br><span class="line">        <span class="comment">// 对数据集进行处理 按照空格分词展开 转换成（word，1）二元组</span></span><br><span class="line">        AggregateOperator&lt;Tuple2&lt;String, Integer&gt;&gt; result = dataSource.flatMap(<span class="keyword">new</span> MyFlatMapper())</span><br><span class="line">                <span class="comment">// 按照第一个位置 -&gt; word 分组</span></span><br><span class="line">                .groupBy(<span class="number">0</span>)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line">        result.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMapper</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 首先按照空格分词</span></span><br><span class="line">            String[] words = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 遍历所有的word 包装成二元组输出</span></span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(word, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现自定义数据源"><a href="#实现自定义数据源" class="headerlink" title="实现自定义数据源"></a>实现自定义数据源</h2><p>需要自己写一个类，实现SourceFunction接口的run方法和cancle方法，注意⚠️，SourceFunction<SensorReading>的泛型类型必须要写上，不然会报错的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().setParallelism(<span class="number">1</span>);</span><br><span class="line">        DataStreamSource dataStreamSource = env.addSource(<span class="keyword">new</span> MySourceFunction());</span><br><span class="line">        dataStreamSource.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的source</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySourceFunction</span> <span class="keyword">implements</span> <span class="title">SourceFunction</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 定义标识位 控制数据产生</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 定义各个随机数生成器</span></span><br><span class="line">            HashMap&lt;String, Double&gt; sensorMap = <span class="keyword">new</span> HashMap&lt;String, Double&gt;(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                sensorMap.put(<span class="string">&quot;sensor_&quot;</span> + (i + <span class="number">1</span>), <span class="number">60</span> + <span class="keyword">new</span> Random().nextGaussian() * <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (running) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String sensor : sensorMap.keySet()) &#123;</span><br><span class="line">                    <span class="keyword">double</span> newtemp = sensorMap.get(sensor) + <span class="keyword">new</span> Random().nextGaussian();</span><br><span class="line">                    sensorMap.put(sensor, newtemp);</span><br><span class="line">                    ctx.collect(<span class="keyword">new</span> SensorReading(sensor, System.currentTimeMillis(), newtemp));</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            running = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;读取文件&quot;&gt;&lt;a href=&quot;#读取文件&quot; class=&quot;headerlink&quot; title=&quot;读取文件&quot;&gt;&lt;/a&gt;读取文件&lt;/h2&gt;&lt;p&gt;这里是以txt文件为例，实现WordCount，其他文件类型同理。&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="Apache Flink" scheme="http://example.com/tags/Apache-Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink-你所知道的算子都在这</title>
    <link href="http://example.com/wiki/Flink-%E4%BD%A0%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E7%AE%97%E5%AD%90%E9%83%BD%E5%9C%A8%E8%BF%99/"/>
    <id>http://example.com/wiki/Flink-%E4%BD%A0%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E7%AE%97%E5%AD%90%E9%83%BD%E5%9C%A8%E8%BF%99/</id>
    <published>2021-08-11T11:49:20.000Z</published>
    <updated>2021-08-11T12:04:38.123Z</updated>
    
    <content type="html"><![CDATA[<p>好了，看到这的话，Apache Flink基础概念啥的都应该了解差不多了吧，我们几天就See一下，平时用到的StreamApi中各式各样的算子都有什么，然后，我们搞点Demo试一下。</p><p>📒 我也是边学边实现一些Demo,这样呢可以方便自己理解，形成体系以后也应该能帮到别人快速学习吧。</p><p>这就是地址了👉 <a href="https://github.com/geekibli/flink-study">https://github.com/geekibli/flink-study</a>  欢迎star！</p><p><strong>下面的Demo都是可以直接运行的</strong>  如果是通过socket获取数据的话，确认现开启端口啊，我用的Mac系统，可以使用以下命令 <code>nc -lk 9999</code></p><h2 id="提供一个全局获取环境的方法"><a href="#提供一个全局获取环境的方法" class="headerlink" title="提供一个全局获取环境的方法"></a>提供一个全局获取环境的方法</h2><p>我们一个静态方法getEnv(), 不然每次还要new，挺麻烦的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StreamExecutionEnvironment <span class="title">getEnv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJO类"><a href="#POJO类" class="headerlink" title="POJO类"></a>POJO类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String sersorId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> timestamp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> newtemp;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = getEnv();</span><br><span class="line">    ArrayList&lt;Integer&gt; nums = Lists.newArrayList();</span><br><span class="line">    nums.add(<span class="number">1</span>);</span><br><span class="line">    nums.add(<span class="number">2</span>);</span><br><span class="line">    nums.add(<span class="number">3</span>);</span><br><span class="line">    DataStreamSource&lt;Integer&gt; source = env.fromCollection(nums);</span><br><span class="line">    SingleOutputStreamOperator&lt;Integer&gt; map = source.map(<span class="keyword">new</span> MapFunction&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer * integer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    map.print();</span><br><span class="line">    env.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">keyByTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv();</span><br><span class="line">        DataStreamSource&lt;Tuple2&lt;String, Integer&gt;&gt; source = env.fromElements(</span><br><span class="line">                <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(<span class="string">&quot;age&quot;</span>, <span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(<span class="string">&quot;name&quot;</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(<span class="string">&quot;name&quot;</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(<span class="string">&quot;name&quot;</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        source.map(</span><br><span class="line">                <span class="keyword">new</span> MapFunction&lt;Tuple2&lt;String, Integer&gt;, Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">map</span><span class="params">(Tuple2&lt;String, Integer&gt; stringIntegerTuple2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Integer f1 = stringIntegerTuple2.f1;</span><br><span class="line">                        stringIntegerTuple2.setField(f1 + <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">return</span> stringIntegerTuple2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .keyBy(<span class="number">1</span>)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reduceTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv();</span><br><span class="line">        env.fromElements(</span><br><span class="line">                Tuple2.of(<span class="number">2L</span>, <span class="number">3L</span>),</span><br><span class="line">                Tuple2.of(<span class="number">1L</span>, <span class="number">5L</span>),</span><br><span class="line">                Tuple2.of(<span class="number">1L</span>, <span class="number">5L</span>),</span><br><span class="line">                Tuple2.of(<span class="number">1L</span>, <span class="number">7L</span>),</span><br><span class="line">                Tuple2.of(<span class="number">2L</span>, <span class="number">4L</span>),</span><br><span class="line">                Tuple2.of(<span class="number">1L</span>, <span class="number">5L</span>))</span><br><span class="line">                .keyBy(<span class="number">1</span>)</span><br><span class="line">                .reduce(<span class="keyword">new</span> ReduceFunction&lt;Tuple2&lt;Long, Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple2&lt;Long, Long&gt; <span class="title">reduce</span><span class="params">(Tuple2&lt;Long, Long&gt; longLongTuple2, Tuple2&lt;Long, Long&gt; t1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;Long, Long&gt;(t1.f0, longLongTuple2.f1 + t1.f1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .print();</span><br><span class="line">        env.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个栗子🌰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv();</span><br><span class="line">        DataStreamSource&lt;String&gt; dataSource = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = dataSource.map(<span class="keyword">new</span> MapFunction&lt;String, SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SensorReading <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] strings = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(strings[<span class="number">0</span>], <span class="keyword">new</span> Long(strings[<span class="number">1</span>]), <span class="keyword">new</span> Double(strings[<span class="number">2</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; sersorId = dataStream.keyBy(<span class="string">&quot;sersorId&quot;</span>)</span><br><span class="line">                .reduce(<span class="keyword">new</span> ReduceFunction&lt;SensorReading&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> SensorReading <span class="title">reduce</span><span class="params">(SensorReading sensorReading, SensorReading t1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        String id = t1.getSersorId();</span><br><span class="line">                        Double time = t1.getTimestamp();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(id, time, Math.max(sensorReading.getNewtemp(), t1.getNewtemp()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        sersorId.print();</span><br><span class="line">        env.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="split-select"><a href="#split-select" class="headerlink" title="split|select"></a>split|select</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">splitTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = getEnv();</span><br><span class="line">        DataStreamSource&lt;String&gt; dataSource = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = dataSource.map(<span class="keyword">new</span> MapFunction&lt;String, SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SensorReading <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] strings = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(strings[<span class="number">0</span>], <span class="keyword">new</span> Double(strings[<span class="number">1</span>]), <span class="keyword">new</span> Double(strings[<span class="number">2</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SplitStream&lt;SensorReading&gt; split = dataStream.split(<span class="keyword">new</span> OutputSelector&lt;SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(SensorReading value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (value.getNewtemp() &gt; <span class="number">30</span>) ? Collections.singleton(<span class="string">&quot;high&quot;</span>) : Collections.singleton(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; low = split.select(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; high = split.select(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; all = split.select(<span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// connect</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Double&gt;&gt; highStream = high.map(<span class="keyword">new</span> MapFunction&lt;SensorReading, Tuple2&lt;String, Double&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Double&gt; <span class="title">map</span><span class="params">(SensorReading sensorReading)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(sensorReading.getSersorId(), sensorReading.getNewtemp());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 链接之后的stream</span></span><br><span class="line">        ConnectedStreams&lt;Tuple2&lt;String, Double&gt;, SensorReading&gt; connect = highStream.connect(low);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;Object&gt; resultStream = connect.map(<span class="keyword">new</span> CoMapFunction&lt;Tuple2&lt;String, Double&gt;, SensorReading, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">map1</span><span class="params">(Tuple2&lt;String, Double&gt; stringDoubleTuple2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple3&lt;&gt;(stringDoubleTuple2.f0, stringDoubleTuple2.f0, <span class="string">&quot;high temp warning&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">map2</span><span class="params">(SensorReading sensorReading)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(sensorReading.getSersorId(), <span class="string">&quot;normal temp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        resultStream.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="connect-coMap"><a href="#connect-coMap" class="headerlink" title="connect | coMap"></a>connect | coMap</h2><p>如上split方法下面我们是有操作connect的api的</p><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unionTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 必须是数据类型相同</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; firstStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; secondStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DataStream&lt;String&gt; unionStream = firstStream.union(secondStream);</span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = unionStream.map(<span class="keyword">new</span> MapFunction&lt;String, SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SensorReading <span class="title">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] strings = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(strings[<span class="number">0</span>], <span class="keyword">new</span> Double(strings[<span class="number">1</span>]), <span class="keyword">new</span> Double(strings[<span class="number">2</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        dataStream.print();</span><br><span class="line">        env.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// TODO 不断学习 不断补充</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好了，看到这的话，Apache Flink基础概念啥的都应该了解差不多了吧，我们几天就See一下，平时用到的StreamApi中各式各样的算子都有什么，然后，我们搞点Demo试一下。&lt;/p&gt;
&lt;p&gt;📒 我也是边学边实现一些Demo,这样呢可以方便自己理解，形成体系以后也应</summary>
      
    
    
    
    
    <category term="Apache Flink" scheme="http://example.com/tags/Apache-Flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink-核心之Windows窗口</title>
    <link href="http://example.com/wiki/Flink-%E6%A0%B8%E5%BF%83%E4%B9%8BWindows%E7%AA%97%E5%8F%A3/"/>
    <id>http://example.com/wiki/Flink-%E6%A0%B8%E5%BF%83%E4%B9%8BWindows%E7%AA%97%E5%8F%A3/</id>
    <published>2021-08-10T08:55:40.000Z</published>
    <updated>2021-08-10T11:40:39.547Z</updated>
    
    <content type="html"><![CDATA[<p>什么是窗口</p><p>窗口分配器有几种</p><p>窗口如何实现增量计算和全量计算</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是窗口&lt;/p&gt;
&lt;p&gt;窗口分配器有几种&lt;/p&gt;
&lt;p&gt;窗口如何实现增量计算和全量计算&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Apache Flink" scheme="http://example.com/tags/Apache-Flink/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-门面模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T12:27:47.000Z</published>
    <updated>2021-08-07T12:36:22.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h1><p>门面模式又叫做外观模式，提供统一的一个接口，用来访问子系统中的一群接口；<br>门面模式定义了一个高层接口，让子系统更容易使用；门面模式属于结构型模式；  </p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://oscimg.oschina.net/oscnet/up-937cef58fcd4540a37854b0eeb31cda5c06.png">  </p><h3 id="Facade-门面类"><a href="#Facade-门面类" class="headerlink" title="Facade 门面类"></a>Facade 门面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承各个子系统功能，进行封装，一定程度上不遵循单一职责原则</span></span><br><span class="line">    SubSystemA subSystemA = <span class="keyword">new</span> SubSystemA();</span><br><span class="line">    SubSystemB subSystemB = <span class="keyword">new</span> SubSystemB();</span><br><span class="line">    SubSystemC subSystemC = <span class="keyword">new</span> SubSystemC();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        subSystemA.doA();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        subSystemB.doB();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        subSystemC.doC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子系统A"><a href="#子系统A" class="headerlink" title="子系统A"></a>子系统A</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子系统B"><a href="#子系统B" class="headerlink" title="子系统B"></a>子系统B</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子系统C"><a href="#子系统C" class="headerlink" title="子系统C"></a>子系统C</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doC</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上Facade类集成了三个子系统的类，在自己定义的方法中，并不是Facade自己实现的逻辑，而是<br>调用了对应子系统的方法，这种实现方式叫做门面模式；是不是很简单；  </p><p>看到这是不是有点似曾相识呢，没错，我们天天都在写的Controller,Service,Dao不就是门面模式吗，<br>没错，只不过把这种方式形成方法论，也就有了所谓的门面模式！  </p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>一些商业博客会有一个功能，就是发表文章或者评论点赞会获得一些积分啊，虚拟币啊,然后会有积分商城，在里面可以免费的兑换商品，其实很难凑的够积分，不够费劲的… 好了，结合伪代码来体验门面模式👇👇👇：  </p><p><strong>下面是一些演示所需要的类：</strong>  </p><h3 id="关系图如下"><a href="#关系图如下" class="headerlink" title="关系图如下"></a>关系图如下</h3><p><img src="https://oscimg.oschina.net/oscnet/up-e117a07cbd9489e5a037d1e64961c1062c7.png">  </p><h3 id="PaymentService-支付服务"><a href="#PaymentService-支付服务" class="headerlink" title="PaymentService 支付服务"></a>PaymentService 支付服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">pay</span><span class="params">(GiftInfo giftInfo)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣减&quot;</span> + giftInfo.getName() + <span class="string">&quot;积分成功！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QualityService-库存服务"><a href="#QualityService-库存服务" class="headerlink" title="QualityService 库存服务"></a>QualityService 库存服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QualityService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">(GiftInfo giftInfo)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;校验&quot;</span> + giftInfo.getName() + <span class="string">&quot;积分通过，库存充足！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShipService-物流服务"><a href="#ShipService-物流服务" class="headerlink" title="ShipService 物流服务"></a>ShipService 物流服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShipService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doShip</span><span class="params">(GiftInfo giftInfo)</span></span>&#123;</span><br><span class="line">        System.out.println(giftInfo.getName() + <span class="string">&quot;生成物流订单&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端-非门面模式写法"><a href="#客户端-非门面模式写法" class="headerlink" title="客户端 非门面模式写法"></a>客户端 非门面模式写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    QualityService qualityService = <span class="keyword">new</span> QualityService();</span><br><span class="line">    PaymentService paymentService = <span class="keyword">new</span> PaymentService();</span><br><span class="line">    ShipService shipService = <span class="keyword">new</span> ShipService();</span><br><span class="line"></span><br><span class="line">    GiftInfo giftInfo = <span class="keyword">new</span> GiftInfo(<span class="string">&quot; 《Java编程思想》 &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!qualityService.isAvailable(giftInfo))&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Quality not enough!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!paymentService.pay(giftInfo))&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Pay error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String shipNo = shipService.doShip(giftInfo);</span><br><span class="line">    System.err.println(<span class="string">&quot;Order shipNo:&quot;</span> + shipNo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法会将库存，支付和物流等服务都暴露给调用方，是很不安全的，而且造成客户端依赖严重，代码臃肿；  </p><h3 id="门面模式写法"><a href="#门面模式写法" class="headerlink" title="门面模式写法"></a>门面模式写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       FacadeService facadeService = <span class="keyword">new</span> FacadeService();</span><br><span class="line">       GiftInfo giftInfo = <span class="keyword">new</span> GiftInfo(<span class="string">&quot; 《Java编程思想》 &quot;</span>);</span><br><span class="line">       String shipNo = facadeService.doOrder(giftInfo);</span><br><span class="line">       System.err.println(<span class="string">&quot;Order shipNo:&quot;</span> + shipNo);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>上面这种就是门面模式的写法👆 ， 相信大家应该很熟悉吧，这样的话，暴露给客户端就一个订单服务就可以了！</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><strong>子系统越来越复杂，增加门面模式提供简单的接口，给用户使用；</strong></li><li><strong>构建多层的系统接口，利用门面对象作为每层的入口，简化层之间的调用</strong></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><code>Spring JdbcUtils</code><br><code>Mybatis configuration</code><br><code>Tomcat requestFacade responseFacade </code></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><strong>简化了调用过程，无需深入了解子系统，以防止给子系统带来风险</strong></li></ul><p>根据上面礼品兑换的逻辑，用户根本不care你底层的兑换逻辑，什么库存啊，支付状态啊，生成订单逻辑等等，对于用户来说，我只需要一步下单即可；  </p><ul><li><strong>减少系统依赖，松耦合</strong></li></ul><p>这一点也是相对客户端来说，客户端只关心的的订单服务就好了，其他的库存，供应链等都不关系；</p><ul><li><strong>更好的划分访问层次，提高了安全性</strong></li></ul><p>合理的划分层次，减少底层系统的暴露，仅仅暴露一些必要的状态和接口，这一点大家应该都知道的，像service层调用Dao层，而不能在service层直接访问数据库；</p><ul><li><strong>遵循迪米特法则</strong></li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><strong>当子系统的功能需要扩展或者修改的时候，上层封装可能要面临修改的风险，这样增加了后期的维护成本，也不遵循开闭原则</strong></li><li><strong>可能会违背单一职责原则</strong></li></ul><h2 id="门面模式和代理模式的区别"><a href="#门面模式和代理模式的区别" class="headerlink" title="门面模式和代理模式的区别"></a>门面模式和代理模式的区别</h2><p>简单来说，门面模式就是一种代理模式，是属于静态代理的模式；但是和静态代理又有一些区别，门面模式的侧重点在于对底层的封装，而静态代理则终于对代理对象的增强，除了调用受委托对象的方法之外，可以扩展额外的功能；<br>很多时候会把门面模式注入成单例，比如一些全局的Util,还有我们常见的一些Controller等等；  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;门面模式&quot;&gt;&lt;a href=&quot;#门面模式&quot; class=&quot;headerlink&quot; title=&quot;门面模式&quot;&gt;&lt;/a&gt;门面模式&lt;/h1&gt;&lt;p&gt;门面模式又叫做外观模式，提供统一的一个接口，用来访问子系统中的一群接口；&lt;br&gt;门面模式定义了一个高层接口，让子系统更容易使</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-适配器模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T12:23:59.000Z</published>
    <updated>2021-08-07T12:25:54.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>适配器模式（Adapter Pattern）又叫做变压器模式，它的功能是将一个类的接口变成客户端所期望的另一个接口，从而<br>使得原本因接口不匹配而导致无法在一起工作的两个类能够在一起工作，属于结构性设计模式的一种；</p><p>在软件开发的过程中，基本上任何问题都可以通过一个中间层解决。适配器模式其实就是一个中间层，适配器模式起着<br>转化/委托的作用，将一种接口转化为两一种服务功能或需求的接口。</p><p>下面举个例子来分析一下👇  </p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-785fc6504778eee5c2c820597c0d6e36fbd.png" style="zoom:67%;" /> 如图是一个适配器模式类图所在👆  <h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>实现一个文件上传的功能，我们有很多中选择，亚马逊的AWS,阿里的OSS等等吧，但是不同的厂商有自己的标准或者API,但是在我们系统中体现的就是一个putObject方法，所以需要定义一个CloudSDK标准，然后不同的厂商来适配我们自己的标准，在我们的putObject和三方的SDK中间加一层适配层；<br>对于客户端来说，仅仅是完成文件上传的动作，至于你服务端到底使用亚马逊的服务还是阿里的服务，它是不care的，这也体现的策略模式；  所以这个例子兼备工厂模式+策略模式+适配器模式；  </p><h3 id="CloudController"><a href="#CloudController" class="headerlink" title="CloudController"></a>CloudController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果是Spring项目这里直接注入就可以了，没必要这么麻烦</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CloudController</span><span class="params">(CloudService cloudService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cloudService = cloudService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CloudService cloudService;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;invoke upload file service!&quot;</span> + fileName);</span><br><span class="line">        cloudService.uploadFile(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloudController cloudController = <span class="keyword">new</span> CloudController(<span class="keyword">new</span> CloudService(<span class="string">&quot;ali&quot;</span>));</span><br><span class="line">        cloudController.uploadFile(<span class="string">&quot;think in java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CloudService"><a href="#CloudService" class="headerlink" title="CloudService"></a>CloudService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CloudSDK cloudSDK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CloudService</span><span class="params">(String cloudStorage)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用工厂来创建具体的SDK</span></span><br><span class="line">        <span class="keyword">this</span>.cloudSDK = CloudFactory.create(cloudStorage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        cloudSDK.putObject(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CloudSDK-定义SDK标准"><a href="#CloudSDK-定义SDK标准" class="headerlink" title="CloudSDK 定义SDK标准"></a>CloudSDK 定义SDK标准</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CloudSDK</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AWSSDKAdapter-适配CloudSDK标准"><a href="#AWSSDKAdapter-适配CloudSDK标准" class="headerlink" title="AWSSDKAdapter 适配CloudSDK标准"></a>AWSSDKAdapter 适配CloudSDK标准</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AWSSDKAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AWSSDK awssdk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AWSSDKAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.awssdk = <span class="keyword">new</span> AWSSDK();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        awssdk.putObject(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AliSDKAdapter适配CloudSDK标准"><a href="#AliSDKAdapter适配CloudSDK标准" class="headerlink" title="AliSDKAdapter适配CloudSDK标准"></a>AliSDKAdapter适配CloudSDK标准</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliSDKAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AliSDK aliSDK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AliSDKAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aliSDK = <span class="keyword">new</span> AliSDK();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个方法就是适配器的标准 不管你的三方服务需要多少接口，是要实现云上传，统一通过putObject这个接口实现就可以</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        aliSDK.setBucket();</span><br><span class="line">        aliSDK.uploadFile(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AWSSDK-三方SDK"><a href="#AWSSDK-三方SDK" class="headerlink" title="AWSSDK 三方SDK"></a>AWSSDK 三方SDK</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AWSSDK</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般以JAR的方式引入到项目中，我们也不可能去修改三方的SDK,这是各个厂商制定的自己的标准</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aws upload file &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AliSDK-三方SDK"><a href="#AliSDK-三方SDK" class="headerlink" title="AliSDK 三方SDK"></a>AliSDK 三方SDK</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliSDK</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一般以JAR的方式引入到项目中，我们也不可能去修改三方的SDK,这是各个厂商制定的自己的标准</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBucket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ali oss set bucket!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ali oss upload file!&quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CloudFactory"><a href="#CloudFactory" class="headerlink" title="CloudFactory"></a>CloudFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里是写死了 生产环境中可以通过配置文件的方式或者启动加载等等方式实现，有很多</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, CloudSDK&gt; sdkMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 总之要符合开闭原则 对修改关闭</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        sdkMap.put(<span class="string">&quot;ali&quot;</span>, <span class="keyword">new</span> AliSDKAdapter());</span><br><span class="line">        sdkMap.put(<span class="string">&quot;aws&quot;</span>, <span class="keyword">new</span> AWSSDKAdapter());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过不同的策略生成具体的SDK实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CloudSDK <span class="title">create</span><span class="params">(String storage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdkMap.get(storage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器和装饰器模式的区别"><a href="#适配器和装饰器模式的区别" class="headerlink" title="适配器和装饰器模式的区别"></a>适配器和装饰器模式的区别</h2><p>适配器模式和装饰器模式都是包装器模式，装饰器模式其实是一种特殊的代理模式；</p><table><thead><tr><th>对比维度</th><th>适配器模式</th><th>装饰器模式</th></tr></thead><tbody><tr><td>形式</td><td>没有层级关系</td><td>一种非常特别的代理模式，具有层级关系</td></tr><tr><td>定义</td><td>适配器和被适配者没有必然的联系，通常采用继承或代理的方式进行包装</td><td>装饰器和被装饰者都实现同一个接口，主要目的是扩展之后依旧保留OOP关系</td></tr><tr><td>关系</td><td>没有满足has-a的关系</td><td>满足is-a关系</td></tr><tr><td>功能</td><td>注重兼容、转换</td><td>注重覆盖、扩展</td></tr><tr><td>设计</td><td>后置考虑</td><td>前置考虑</td></tr></tbody></table><h2 id="适配器功能的优点-✅"><a href="#适配器功能的优点-✅" class="headerlink" title="适配器功能的优点 ✅"></a>适配器功能的优点 ✅</h2><ul><li><strong>能提高类的透明性和复用，但现有的类复用不需要改变</strong>  </li><li><strong>适配器类和原角色解耦，投稿程序的扩展性</strong></li><li><strong>在很多业务中符合开闭原则</strong>  </li></ul><h2 id="适配器的缺点"><a href="#适配器的缺点" class="headerlink" title="适配器的缺点"></a>适配器的缺点</h2><ul><li><strong>适配器编写过程需要结合业务场景综合考虑，可能会增加系统的复杂性</strong></li><li><strong>增加代码阅读难度，降低代码可读性，过多的适配器会使得系统代码变得紊乱</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h1&gt;&lt;p&gt;适配器模式（Adapter Pattern）又叫做变压器模式，它的功能是将一个类的接口变成客户端所期望的另一个接口，</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-责任链模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T12:21:01.000Z</published>
    <updated>2021-08-07T12:23:18.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>责任链模式（Chain of Responsibility Patter）是将链中的每一个节点看成是一个对象，每个节点处理的请求均不相同，<br>并且内部自动维护下一个节点对象。当一个请求从链的头部发出时，会沿着链的路径一次传递给每一个节点对象，直到有节点处理这个请求为止；责任链模式属于行为型模式</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-346d95211f8ced1530fe1098a480a35a535.png" style="zoom:67%;" />  <h3 id="Handler-责任链抽象类-链式结构"><a href="#Handler-责任链抽象类-链式结构" class="headerlink" title="Handler 责任链抽象类 链式结构"></a>Handler 责任链抽象类 链式结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Handler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(Handler nextHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextHandler = nextHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConcreteHandlerA-节点对象A"><a href="#ConcreteHandlerA-节点对象A" class="headerlink" title="ConcreteHandlerA 节点对象A"></a>ConcreteHandlerA 节点对象A</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerA</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;reqA&quot;</span>.equals(request)) &#123;</span><br><span class="line">            System.err.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;deal this request &quot;</span> + request);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.nextHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.nextHandler.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ConcreteHandlerB-节点对象B"><a href="#ConcreteHandlerB-节点对象B" class="headerlink" title="ConcreteHandlerB 节点对象B"></a>ConcreteHandlerB 节点对象B</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerB</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;reqB&quot;</span>.equals(request)) &#123;</span><br><span class="line">            System.err.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;deal this request &quot;</span> + request);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.nextHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.nextHandler.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DemoTest-测试类"><a href="#DemoTest-测试类" class="headerlink" title="DemoTest 测试类"></a>DemoTest 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handlerA = <span class="keyword">new</span> ConcreteHandlerA();</span><br><span class="line">        Handler handlerB = <span class="keyword">new</span> ConcreteHandlerB();</span><br><span class="line">        handlerA.setNextHandler(handlerB);</span><br><span class="line">        handlerA.handleRequest(<span class="string">&quot;reqB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">//ConcreteHandlerBdeal this request reqB</span></span><br></pre></td></tr></table></figure><h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><p>下面我们举一个业务场景的例子🌰来展示一下什么是责任链模式：<br>我们登录时，肯定要校验用户名和密码有没有传参，如果参数都是空的话，那也没有必要执行后面的登录部分，直接返回了；如果参数是合法的，那我们就要校验数据库是否存在这个用户了，如果不存在该用户，那就直接返回；如果存在，那就要校验用户有没有权限访问正在请求的资源，如果有权限，则可以正常访问资源，如果没有权限，则抛出异常；  </p><h3 id="非责任链模式写法"><a href="#非责任链模式写法" class="headerlink" title="非责任链模式写法"></a>非责任链模式写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName,String pwd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(userName) || StringUtils.isEmpty(pwd))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Member member = selectUser(userName,pwd);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(member))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!validateRoot(member))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">&quot;Login success!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这种写法虽然简单，但是将所有的操作全部杂糅在一起了，结构是十分混乱的；<br>下面👇看一下如果使用责任链模式该如何实现：<br><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-f94e4e83f493d7a998e1e8bbb36f3c8eb4b.png" style="zoom:67%;" /> </p><h3 id="Handler-抽象责任链处理器"><a href="#Handler-抽象责任链处理器" class="headerlink" title="Handler 抽象责任链处理器"></a>Handler 抽象责任链处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> Handler next;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">(Handler next)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.next = next;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandler</span><span class="params">(Member member)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ValidateHandler-参数校验处理器"><a href="#ValidateHandler-参数校验处理器" class="headerlink" title="ValidateHandler 参数校验处理器"></a>ValidateHandler 参数校验处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHandler</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(member.getLoginName()) || StringUtils.isEmpty(member.getLoginPass()))&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;登录名或者密码为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">&quot;参数校验成功！&quot;</span>);</span><br><span class="line">        next.doHandler(member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录处理器"><a href="#登录处理器" class="headerlink" title="登录处理器"></a>登录处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHandler</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;login success!&quot;</span>);</span><br><span class="line">        member.setRoleName(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        next.doHandler(member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鉴权处理器"><a href="#鉴权处理器" class="headerlink" title="鉴权处理器"></a>鉴权处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHandler</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;root&quot;</span>.equals(member.getRoleName()))&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Auth success!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">&quot;Auth failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Member成员类"><a href="#Member成员类" class="headerlink" title="Member成员类"></a>Member成员类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line">    <span class="keyword">private</span> String loginPass;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String loginName, String loginPass)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.loginName = loginName;</span><br><span class="line">            <span class="keyword">this</span>.loginPass = loginPass;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GETTER SETTER ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DemoTest-测试类-1"><a href="#DemoTest-测试类-1" class="headerlink" title="DemoTest 测试类"></a>DemoTest 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首先创建所有的处理器，设置后它们的先后顺序，设置next节点，完成之后在执行链路操作；</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ValidateHandler validateHandler = <span class="keyword">new</span> ValidateHandler();</span><br><span class="line">        LoginHandler loginHandler = <span class="keyword">new</span> LoginHandler();</span><br><span class="line">        validateHandler.next(loginHandler);</span><br><span class="line">        AuthHandler authHandler = <span class="keyword">new</span> AuthHandler();</span><br><span class="line">        loginHandler.next(authHandler);</span><br><span class="line">        Member member = <span class="keyword">new</span> Member(<span class="string">&quot;xiaoming&quot;</span>, <span class="string">&quot;222&quot;</span>);</span><br><span class="line">        validateHandler.doHandler(member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法，看起来有没有比非责任链写法要B格高一些，但是，这样每次创建节点对象，好像又显得不太爽，有些臃肿的意思！而且调整节点之间的顺序时也比较复杂，容易改错！ 那我们就进一步优化以下吧！  </p><h2 id="责任链模式-建造者模式-优化"><a href="#责任链模式-建造者模式-优化" class="headerlink" title="责任链模式+建造者模式 优化"></a>责任链模式+建造者模式 优化</h2><h3 id="添加建造器builder"><a href="#添加建造器builder" class="headerlink" title="添加建造器builder"></a>添加建造器builder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Handler next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">(Handler next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandler</span><span class="params">(Member member)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 暴露建造器，将节点对象以链表的形式串起来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Handler&lt;T&gt; head;</span><br><span class="line">        <span class="keyword">private</span> Handler&lt;T&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Handler&lt;T&gt; <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder&lt;T&gt; <span class="title">addHandler</span><span class="params">(Handler&lt;T&gt; handler)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.head = <span class="keyword">this</span>.tail = handler;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.tail.next(handler);</span><br><span class="line">            <span class="keyword">this</span>.tail = handler;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Member member = <span class="keyword">new</span> Member(<span class="string">&quot;xiaoming&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Handler.Builder&lt;Handler&gt; builder = <span class="keyword">new</span> Handler.Builder();</span><br><span class="line">        builder.addHandler(<span class="keyword">new</span> ValidateHandler())</span><br><span class="line">                .addHandler(<span class="keyword">new</span> LoginHandler())</span><br><span class="line">                .addHandler(<span class="keyword">new</span> AuthHandler())</span><br><span class="line">                .build()</span><br><span class="line">        .doHandler(member);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过添加建造器之后，责任链的组装与调用是不是显得很清晰，每个节点对象各司其职，如果需要本节点执行，则执行，如果不是，则交给下一个节点继续！  </p><h2 id="责任链适用的场景"><a href="#责任链适用的场景" class="headerlink" title="责任链适用的场景"></a>责任链适用的场景</h2><ul><li><strong>多个对象处理同一个请求，但具体由那个对象处理则在运动时动态决定</strong></li><li><strong>在不明确🈯指定接受者的情况下，向多个对象的一个提交请求</strong></li><li><strong>可以动态指定一组对象处理请求</strong></li></ul><blockquote><p>举一些实际的例子：<br>javax.servlet.Filter的doFilter方法就是使用的责任链模式;</p></blockquote><h3 id="org-springframework-web-filter-CompositeFilter-doFilter"><a href="#org-springframework-web-filter-CompositeFilter-doFilter" class="headerlink" title="org.springframework.web.filter.CompositeFilter#doFilter"></a>org.springframework.web.filter.CompositeFilter#doFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> CompositeFilter.VirtualFilterChain(chain, <span class="keyword">this</span>.filters)).doFilter(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是Spring框架中的一个实现(javax.servlet.Filter),下面展开具体的代码：</p><h3 id="org-springframework-web-filter-CompositeFilter"><a href="#org-springframework-web-filter-CompositeFilter" class="headerlink" title="org.springframework.web.filter.CompositeFilter"></a>org.springframework.web.filter.CompositeFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Filter 这里的Filter相当于处理节点，存放在List中，和我们上面的Handler存放在建造者的链式结构中，异曲同工。</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;? extends Filter&gt; filters = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompositeFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilters</span><span class="params">(List&lt;? extends Filter&gt; filters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filters = <span class="keyword">new</span> ArrayList(filters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        Iterator var2 = <span class="keyword">this</span>.filters.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">            Filter filter = (Filter)var2.next();</span><br><span class="line">            filter.init(config);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> CompositeFilter.VirtualFilterChain(chain, <span class="keyword">this</span>.filters)).doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="keyword">this</span>.filters.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Filter filter = (Filter)<span class="keyword">this</span>.filters.get(i);</span><br><span class="line">            filter.destroy();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualFilterChain</span> <span class="keyword">implements</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> FilterChain originalChain;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;? extends Filter&gt; additionalFilters;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> currentPosition = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">VirtualFilterChain</span><span class="params">(FilterChain chain, List&lt;? extends Filter&gt; additionalFilters)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.originalChain = chain;</span><br><span class="line">            <span class="keyword">this</span>.additionalFilters = additionalFilters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.currentPosition == <span class="keyword">this</span>.additionalFilters.size()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.originalChain.doFilter(request, response);</span><br><span class="line">            <span class="comment">// 通过currentPosition的移动，转移到链路上的不同处理节点，这就是责任链模式的体现</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++<span class="keyword">this</span>.currentPosition;</span><br><span class="line">                Filter nextFilter = (Filter)<span class="keyword">this</span>.additionalFilters.get(<span class="keyword">this</span>.currentPosition - <span class="number">1</span>);</span><br><span class="line">                nextFilter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像上面的例子还有很多很多，比如Spring Security和Shiro中的拦截器就是很典型的责任链模式，还有Netty中的 io.netty.channel.ChannelPipeline等等，都是责任链模式；  </p><h2 id="责任链模式的优点👍👍👍"><a href="#责任链模式的优点👍👍👍" class="headerlink" title="责任链模式的优点👍👍👍"></a>责任链模式的优点👍👍👍</h2><ul><li><strong>将请求与处理解耦</strong></li><li><strong>请求处理者（节点对象）只需要关注自己感兴趣的请求进行处理即可，对于不感兴趣的请求，直接转发给下一个节点对象</strong></li><li><strong>具备链式传递处理请求功能，请求发送者无需知晓链路结构，只需等待处理请求结果</strong></li><li><strong>链路结构灵活，可以通过改变链路结果动态的新增和删除责任</strong></li><li><strong>易于扩展新的请求节点（符合开闭原则）</strong></li></ul><h2 id="责任链模式的缺点"><a href="#责任链模式的缺点" class="headerlink" title="责任链模式的缺点"></a>责任链模式的缺点</h2><ul><li><strong>责任链太长或者处理时间太长，导致系统性能下降</strong></li><li><strong>如果节点对象存在循环♻️引用时，会造成死循环，导致系统崩溃，所以这个在设计的时候一定要注意不能形成闭环⚠️⚠️⚠️</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h1&gt;&lt;p&gt;责任链模式（Chain of Responsibility Patter）是将链中的每一个节点看成是一个对象，每个节</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-观察者模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T12:18:40.000Z</published>
    <updated>2021-08-07T12:20:21.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="观察者模式-1"><a href="#观察者模式-1" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。</p><p>属于行为型模式</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-cc1738bd0907f74ecc63783f3282a9a1aec.png" style="zoom: 50%;" />  <h3 id="ISubject"><a href="#ISubject" class="headerlink" title="ISubject"></a>ISubject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISubject</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">attach</span><span class="params">(IObserver&lt;E&gt; observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">detach</span><span class="params">(IObserver&lt;E&gt; observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(E event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ConcreteSubject"><a href="#ConcreteSubject" class="headerlink" title="ConcreteSubject"></a>ConcreteSubject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ISubject</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;IObserver&lt;E&gt;&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">attach</span><span class="params">(IObserver&lt;E&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.observers.contains(observer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">detach</span><span class="params">(IObserver&lt;E&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(E event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (IObserver observer : observers) &#123;</span><br><span class="line">            observer.update(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IObserver"><a href="#IObserver" class="headerlink" title="IObserver"></a>IObserver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">IObserver</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(E event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ConcreteObserver"><a href="#ConcreteObserver" class="headerlink" title="ConcreteObserver"></a>ConcreteObserver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">IObserver</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(E event)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;receive event  &quot;</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DemoTest"><a href="#DemoTest" class="headerlink" title="DemoTest"></a>DemoTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ISubject&lt;String&gt; subject = <span class="keyword">new</span> ConcreteSubject&lt;String&gt;();</span><br><span class="line">        subject.attach(<span class="keyword">new</span> ConcreteObserver&lt;String&gt;());</span><br><span class="line">        subject.attach(<span class="keyword">new</span> ConcreteObserver&lt;String&gt;());</span><br><span class="line">        subject.attach(<span class="keyword">new</span> ConcreteObserver&lt;String&gt;());</span><br><span class="line">        subject.notify(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JDK实现观察者模式"><a href="#JDK实现观察者模式" class="headerlink" title="JDK实现观察者模式"></a>JDK实现观察者模式</h2><blockquote><p>比如有一个博客系统提供了问题社区，一个人提出问题，会有其他人收到这个消息；我们使用JDK来模拟一个简单的场景；</p></blockquote><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-a268997531d268d3ff748a45b29adc83031.png" style="zoom:67%;" />    <h3 id="Blog-被观察对象"><a href="#Blog-被观察对象" class="headerlink" title="Blog 被观察对象"></a>Blog 被观察对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Blog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;IBLi Blog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blog <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">question</span><span class="params">(Question question)</span> </span>&#123;</span><br><span class="line">        System.out.println(question.getUserName() + <span class="string">&quot; 在 blog 提交了问题 ： &quot;</span> + question.getContent());</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(question);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Question</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Question</span><span class="params">(String userName, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Student-学生类-被通知对象"><a href="#Student-学生类-被通知对象" class="headerlink" title="Student 学生类 被通知对象"></a>Student 学生类 被通知对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is called whenever the observed object is changed. An</span></span><br><span class="line"><span class="comment">     * application calls an &lt;tt&gt;Observable&lt;/tt&gt; object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;notifyObservers&lt;/code&gt; method to have all the object&#x27;s</span></span><br><span class="line"><span class="comment">     * observers notified of the change.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o   the observable object.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg an argument passed to the &lt;code&gt;notifyObservers&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        Blog blog = (Blog) o;</span><br><span class="line">        Question question = (Question) arg;</span><br><span class="line">        System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; 看到了  &quot;</span> + question.getUserName() + <span class="string">&quot; 的问题 \n&quot;</span> + <span class="string">&quot;问题是： &quot;</span> + question.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-测试"><a href="#Client-测试" class="headerlink" title="Client 测试"></a>Client 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Blog blog = Blog.getInstance();</span><br><span class="line"></span><br><span class="line">        blog.addObserver(<span class="keyword">new</span> Student(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        blog.addObserver(<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>));</span><br><span class="line">        Question question = <span class="keyword">new</span> Question(<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;观察者模式是什么？&quot;</span>);</span><br><span class="line">        blog.question(question);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小明 在 blog 提交了问题 ： 观察者模式是什么？</span><br><span class="line">******************</span><br><span class="line">John看到了  小明 的问题 </span><br><span class="line">问题是： 观察者模式是什么？</span><br><span class="line">******************</span><br><span class="line">Tom看到了  小明 的问题 </span><br><span class="line">问题是： 观察者模式是什么？</span><br></pre></td></tr></table></figure><h2 id="基于Guava实现观察者模式"><a href="#基于Guava实现观察者模式" class="headerlink" title="基于Guava实现观察者模式"></a>基于Guava实现观察者模式</h2><h3 id="Student-被观察对象"><a href="#Student-被观察对象" class="headerlink" title="Student 被观察对象"></a>Student 被观察对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Observer</span><span class="params">(Student str)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;student invoke method + &quot;</span> + str.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Teacher-被通知对象"><a href="#Teacher-被通知对象" class="headerlink" title="Teacher 被通知对象"></a>Teacher 被通知对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Observer</span><span class="params">(Teacher str)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;teacher invoke method + &quot;</span> + str.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-测试类"><a href="#Client-测试类" class="headerlink" title="Client 测试类"></a>Client 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventBus eventBus = <span class="keyword">new</span> EventBus();</span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">&quot;Ibli&quot;</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;laoshi&quot;</span>);</span><br><span class="line">        eventBus.register(student);</span><br><span class="line">        eventBus.register(teacher);</span><br><span class="line">        eventBus.post(<span class="keyword">new</span> Student(<span class="string">&quot;xuesheng&quot;</span>));</span><br><span class="line">        eventBus.post(<span class="keyword">new</span> Teacher(<span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student invoke method + Student&#123;name=<span class="string">&#x27;xuesheng&#x27;</span>&#125;</span><br><span class="line">teacher invoke method + Teacher&#123;name=<span class="string">&#x27;teacher&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="观察者模式使用场景"><a href="#观察者模式使用场景" class="headerlink" title="观察者模式使用场景"></a>观察者模式使用场景</h2><p>1、当一个抽象模型包含两个方面内容，其中一个方面依赖另一个方面<br>2、其他一个或多个对象的变化依赖另一个对象的变化<br>3、实现类似广播机制的功能，无需知道具体收听者，只需要广播。系统中感兴趣的对象会自动接口该广播<br>4、多层级嵌套机制，形成一种链式出发机制，是的时间具备跨域（跨越两种观察者类型）通知  </p><h2 id="观察者模式优点✅"><a href="#观察者模式优点✅" class="headerlink" title="观察者模式优点✅"></a>观察者模式优点✅</h2><p>1、降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。符合依赖倒置原则。<br>2、目标与观察者之间建立了一套触发机制。   </p><h2 id="观察者模式缺点"><a href="#观察者模式缺点" class="headerlink" title="观察者模式缺点"></a>观察者模式缺点</h2><p>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。<br>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;h2 id=&quot;观察者模式-1&quot;&gt;&lt;a href=&quot;#观察者模式-1&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-装饰器模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T12:15:15.000Z</published>
    <updated>2021-08-07T12:17:52.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器模式（Decorator-Pattern）"><a href="#装饰器模式（Decorator-Pattern）" class="headerlink" title="装饰器模式（Decorator Pattern）"></a>装饰器模式（Decorator Pattern）</h1><p>装饰器模式也叫做包装模式，是指在不改变原有对象的基础上，将功能附加到对象上，提供比继承更有弹性的替代方案（扩展原有对象的功能），强调一点是基于已有对象的功能增强；装饰器模式属于结构性模式;</p><h2 id="装饰器类图"><a href="#装饰器类图" class="headerlink" title="装饰器类图"></a>装饰器类图</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-b2f04bf843bb9c3e787016e216e5fbd91cf.png" style="zoom:67%;" />  <h3 id="Component-抽象构件"><a href="#Component-抽象构件" class="headerlink" title="Component 抽象构件"></a>Component 抽象构件</h3><blockquote><p>定义一个抽象接口以规范准备接受附加责任的对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConcreteComponent-具体的构件"><a href="#ConcreteComponent-具体的构件" class="headerlink" title="ConcreteComponent 具体的构件"></a>ConcreteComponent 具体的构件</h3><blockquote><p>实现抽象构件,通过装饰角色为其添加一些职责</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Do some biz event!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Decorator-抽象装饰角色"><a href="#Decorator-抽象装饰角色" class="headerlink" title="Decorator 抽象装饰角色"></a>Decorator 抽象装饰角色</h3><blockquote><p>继承抽象构件,并包含具体构件的实例,可以通过其子类扩展具体构件的功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有组件对象</span></span><br><span class="line">    <span class="keyword">protected</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//转发请求给组件对象,可以在转发前后执行一些附加动作</span></span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConcreteDecoratorA"><a href="#ConcreteDecoratorA" class="headerlink" title="ConcreteDecoratorA"></a>ConcreteDecoratorA</h3><blockquote><p>实现抽象装饰的相关方法,并给具体构件对象添加附加的责任</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorA</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;ConcreteDecoratorA first!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;ConcreteDecoratorA last!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        operationFirst();</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        operationLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-测试类"><a href="#Client-测试类" class="headerlink" title="Client 测试类"></a>Client 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component component = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">        Decorator decoratorA = <span class="keyword">new</span> ConcreteDecoratorA(component);</span><br><span class="line">        decoratorA.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>买煎饼的时候,我们可以直接买一个煎饼,但有的时候觉得味道单一或者吃不饱,我们可以加一些东西,比如烤肠,鸡蛋,鸡排等等;  </p><p><strong>先看看非装饰器模式的写法</strong>  </p><h3 id="BatterCake"><a href="#BatterCake" class="headerlink" title="BatterCake"></a>BatterCake</h3><blockquote><p>就一个普通的煎饼类；  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatterCake</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;煎饼&quot;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BatterCakeWithEgg"><a href="#BatterCakeWithEgg" class="headerlink" title="BatterCakeWithEgg"></a>BatterCakeWithEgg</h3><blockquote><p>添加一个鸡蛋的煎饼；  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatterCakeWithEgg</span> <span class="keyword">extends</span> <span class="title">BatterCake</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getMsg() + <span class="string">&quot; 加一个鸡蛋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BatterCakeWithEggAndSauage"><a href="#BatterCakeWithEggAndSauage" class="headerlink" title="BatterCakeWithEggAndSauage"></a>BatterCakeWithEggAndSauage</h3><blockquote><p>加一个鸡蛋 再加一跟烤肠的煎饼；  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatterCakeWithEggAndSauage</span> <span class="keyword">extends</span> <span class="title">BatterCakeWithEgg</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getMsg() + <span class="string">&quot; 加一个烤肠&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-客户"><a href="#Client-客户" class="headerlink" title="Client 客户"></a>Client 客户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BatterCake batterCake = <span class="keyword">new</span> BatterCake();</span><br><span class="line">        System.err.println(batterCake.getMsg() + <span class="string">&quot;价格 &quot;</span> + batterCake.getPrice());</span><br><span class="line"></span><br><span class="line">        BatterCakeWithEgg batterCakeWithEgg = <span class="keyword">new</span> BatterCakeWithEgg();</span><br><span class="line">        System.err.println(batterCakeWithEgg.getMsg() + <span class="string">&quot;价格 &quot;</span> + batterCakeWithEgg.getPrice());</span><br><span class="line"></span><br><span class="line">        BatterCakeWithEggAndSauage batterCakeWithEggAndSauage = <span class="keyword">new</span> BatterCakeWithEggAndSauage();</span><br><span class="line">        System.err.println(batterCakeWithEggAndSauage.getMsg() + <span class="string">&quot;价格 &quot;</span> + batterCakeWithEggAndSauage.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这种写法，应该能看出它的弊端了，就是实现很简单，适合于需求固定的业务和多样性比较简单的业务；一旦客户需要一个鸡蛋，两根烤肠，那是不是还要在BatterCakeWithEggAndSauage类上继续扩展呢，这其实是很low的设计；而且非常不灵活，比如客户只需要一跟烤肠的煎饼。这个时候怎么解决呢；</p><p><strong>使用装饰器模式优化</strong>  </p><h3 id="BatterCake-抽象组件"><a href="#BatterCake-抽象组件" class="headerlink" title="BatterCake 抽象组件"></a>BatterCake 抽象组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BatterCake</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getMsg</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基础类-实现抽象接口"><a href="#基础类-实现抽象接口" class="headerlink" title="基础类 实现抽象接口"></a>基础类 实现抽象接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseBatterCake</span> <span class="keyword">extends</span> <span class="title">BatterCake</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;煎饼&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BatterCakeDecorator-装饰器"><a href="#BatterCakeDecorator-装饰器" class="headerlink" title="BatterCakeDecorator 装饰器"></a>BatterCakeDecorator 装饰器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatterCakeDecorator</span> <span class="keyword">extends</span> <span class="title">BatterCake</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BatterCake batterCake;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BatterCakeDecorator</span><span class="params">(BatterCake batterCake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.batterCake = batterCake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.batterCake.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.batterCake.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="EggDecorator-具体的装饰器对象"><a href="#EggDecorator-具体的装饰器对象" class="headerlink" title="EggDecorator 具体的装饰器对象"></a>EggDecorator 具体的装饰器对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EggDecorator</span> <span class="keyword">extends</span> <span class="title">BatterCakeDecorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EggDecorator</span><span class="params">(BatterCake batterCake)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(batterCake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getMsg() + <span class="string">&quot; 加一个鸡蛋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SauageDecorator-具体的装饰对象"><a href="#SauageDecorator-具体的装饰对象" class="headerlink" title="SauageDecorator 具体的装饰对象"></a>SauageDecorator 具体的装饰对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SauageDecorator</span> <span class="keyword">extends</span> <span class="title">BatterCakeDecorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SauageDecorator</span><span class="params">(BatterCake batterCake)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(batterCake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getMsg() + <span class="string">&quot; 加一个烤肠&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户-测试类"><a href="#客户-测试类" class="headerlink" title="客户 测试类"></a>客户 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BatterCake batterCake = <span class="keyword">new</span> BaseBatterCake();</span><br><span class="line">        System.err.println(batterCake.getMsg() + <span class="string">&quot;总计 : &quot;</span> + batterCake.getPrice());</span><br><span class="line"></span><br><span class="line">        batterCake = <span class="keyword">new</span> EggDecorator(batterCake);</span><br><span class="line">        System.err.println(batterCake.getMsg() + <span class="string">&quot;总计 : &quot;</span> + batterCake.getPrice());</span><br><span class="line"></span><br><span class="line">        batterCake = <span class="keyword">new</span> SauageDecorator(batterCake);</span><br><span class="line">        System.err.println(batterCake.getMsg() + <span class="string">&quot;总计 : &quot;</span> + batterCake.getPrice());</span><br><span class="line"></span><br><span class="line">        batterCake = <span class="keyword">new</span> EggDecorator(batterCake);</span><br><span class="line">        System.err.println(batterCake.getMsg() + <span class="string">&quot;总计 : &quot;</span> + batterCake.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种写法是运用了装饰器模式的写法，这样会增加程序的灵活性，EggDecorator返回一个BatterCake，在EggDecorator中的getMsg方法和getPrice方法中添加关于Egg的逻辑来实现对BatterCake的增强，同理SauageDecorator也是，在它自己的getMsg方法和getPrice方法中添加自己的逻辑，当然，都是基于调用super方法的基础上添加自己的逻辑，同时具体的装饰对象返回父类类型的对象；  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这里进行一下总结：</strong><br>1、具体装饰对象(EggDecorator)一定是继承自装饰组件(BatterCakeDecorator)<br>2、为了实现对象增强，子类中的方法一定是基于super方法的基础上，添加自己的逻辑的  </p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>用于扩展一个类的功能或给一个类添加附加职责</li><li>动态地给一个对象添加功能,这些功能可以在动态的撤销</li></ul><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>Spring TransactionAwareCacheManager<br>JDK FileInputStream   </p><h2 id="装饰器模式与代理模式"><a href="#装饰器模式与代理模式" class="headerlink" title="装饰器模式与代理模式"></a>装饰器模式与代理模式</h2><ul><li>装饰器模式是一种特殊的代理模式  </li><li>装饰器模式强调自身的功能扩展,透明的,动态的扩展与增强  <blockquote><p>透明指的是功能的扩展由客户端控制  </p></blockquote></li><li>代理模式强调代理过程的控制  </li></ul><h2 id="装饰器模式的优点"><a href="#装饰器模式的优点" class="headerlink" title="装饰器模式的优点"></a>装饰器模式的优点</h2><p>1、装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用<br>2、通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果<br>3、装饰器模式完全遵守开闭原则  </p><h2 id="装饰器模式的缺点"><a href="#装饰器模式的缺点" class="headerlink" title="装饰器模式的缺点"></a>装饰器模式的缺点</h2><p>1、增加了一些子类，系统代码会显得臃肿。<br>2、组合方式容易出错，代码可读性比较差。   </p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1、<a href="https://juejin.cn/post/6844903603178569741">包装模式就是这么简单啦</a><br>2、<a href="http://c.biancheng.net/view/1366.html">装饰器模式（装饰设计模式）详解</a><br>3、<a href="https://www.cnblogs.com/losedMemory/p/6246029.html">java中的装饰设计模式，浅谈与继承之间的区别</a><br>4、<a href="https://blog.csdn.net/lsgqjh/article/details/63254876">JDK IO中的适配器模式和装饰者模式</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装饰器模式（Decorator-Pattern）&quot;&gt;&lt;a href=&quot;#装饰器模式（Decorator-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;装饰器模式（Decorator Pattern）&quot;&gt;&lt;/a&gt;装饰器模式（Decorato</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-策略模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T12:09:10.000Z</published>
    <updated>2021-08-07T12:14:15.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p><strong>策略模式</strong>（Strategy Pattern）也叫做政策模式（Policy Pattern）,它是将定义的算法封装起来，<br>让它们之间可以相互替换，从而让算法的变化不影响到使用算法的用户；它属于行为型模式。可以在一定程度上规避<br>if-else/switch等<br>策略模式使用的面向对象的继承和多态机制，从而实现同一行为在不同的场景下具备不同的实现；  </p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>策略模式在实际应用场景中有很多的应用，凡是设计到选择的场景基本都可以使用策略模式来实现；比如购买一个商品选择支付方式，是选择银行卡还是快捷支付，微信？支付宝等；  </p><ul><li>假如一个系统中有很多类，而它们的区别仅仅在与它们的行为不同；</li><li>一个系统需要动态的从几种算法中选择一种；一些平台型产品中肯定会用到的</li><li>需要屏蔽算法规则；</li></ul><h2 id="策略模式类图"><a href="#策略模式类图" class="headerlink" title="策略模式类图"></a>策略模式类图</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-bcd8e7bee16acac3b254b110a2c2f3796b8.png" style="zoom:50%;" />   通过上图可以看到，策略模式主要包含3个角色：  <ul><li><strong>上下文角色（Context）</strong>: 用来操作策略的上下文环境，屏蔽高层模块（客户端）对策略/算法的直接访问，封装可能<br>存在的变化</li><li><strong>抽象策略角色（IStrategy）</strong>: 规定策略或算法的行为    </li><li><strong>具体的策略角色（ConcreteStrategy）</strong>: 具体的策略逻辑或算法  </li></ul><p>这里的上下文角色仅仅是一个称谓，大家只要知道他在策略模式中的作用就可以了，就是桥接客户端和策略/方法的作用；  </p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><blockquote><p>背景： 电商场景下，用户购买一个商品，支付时可以选择一种优惠策略，如果没有优惠，则使用默认的策略，即无任何优惠；  </p></blockquote><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-1f96ebedc89c21db9af9a2ae899918d9fb8.png" style="zoom: 33%;" />  <p>1、上面两层是定义的一个营销策略的接口，然后提供不同的策略来实现；<br>2、第三层是策略生成所使用的工厂和客户端调用策略中间的上下文，承接上下，桥接模式；<br>3、最下层的Demo可以看成是客户端；  </p><h3 id="定义策略接口-制定标准方法"><a href="#定义策略接口-制定标准方法" class="headerlink" title="定义策略接口 制定标准方法"></a>定义策略接口 制定标准方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPromotionStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doPromote</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="CashBackStrategy-现金折返策略"><a href="#CashBackStrategy-现金折返策略" class="headerlink" title="CashBackStrategy 现金折返策略"></a>CashBackStrategy 现金折返策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashBackStrategy</span> <span class="keyword">implements</span> <span class="title">IPromotionStrategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPromote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;直接返现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CouponStrategy-优惠券策略"><a href="#CouponStrategy-优惠券策略" class="headerlink" title="CouponStrategy 优惠券策略"></a>CouponStrategy 优惠券策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponStrategy</span> <span class="keyword">implements</span> <span class="title">IPromotionStrategy</span></span>&#123;</span><br><span class="line">    <span class="comment">// 优惠券策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPromote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用优惠券抵扣&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GroupBuyStrategy-团购优惠策略"><a href="#GroupBuyStrategy-团购优惠策略" class="headerlink" title="GroupBuyStrategy 团购优惠策略"></a>GroupBuyStrategy 团购优惠策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupBuyStrategy</span> <span class="keyword">implements</span> <span class="title">IPromotionStrategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPromote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;团购 5人成团&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EmptyStrategy-默认策略"><a href="#EmptyStrategy-默认策略" class="headerlink" title="EmptyStrategy 默认策略"></a>EmptyStrategy 默认策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyStrategy</span> <span class="keyword">implements</span> <span class="title">IPromotionStrategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPromote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无任何优惠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PromoteActivity-客户端和具体算法之间的上下文，用于桥接"><a href="#PromoteActivity-客户端和具体算法之间的上下文，用于桥接" class="headerlink" title="PromoteActivity 客户端和具体算法之间的上下文，用于桥接"></a>PromoteActivity 客户端和具体算法之间的上下文，用于桥接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromoteActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IPromotionStrategy promotionStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PromoteActivity</span><span class="params">(IPromotionStrategy promotionStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.promotionStrategy = promotionStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        promotionStrategy.doPromote();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PromoteStrategyFactory-策略工厂"><a href="#PromoteStrategyFactory-策略工厂" class="headerlink" title="PromoteStrategyFactory 策略工厂"></a>PromoteStrategyFactory 策略工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromoteStrategyFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PromoteStrategyFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 策略容器  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, IPromotionStrategy&gt; promotionStrategyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 默认空策略-没有任何优惠</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IPromotionStrategy emptyStrategy = <span class="keyword">new</span> EmptyStrategy();</span><br><span class="line">    <span class="comment">// 这个可以放到配置文件或者放到数据库，在项目启动的时候加载到服务中就可以了</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        promotionStrategyMap.put(PromoteKey.CASH_BACK, <span class="keyword">new</span> CashBackStrategy());</span><br><span class="line">        promotionStrategyMap.put(PromoteKey.COUPON, <span class="keyword">new</span> CouponStrategy());</span><br><span class="line">        promotionStrategyMap.put(PromoteKey.CROUP_BUY, <span class="keyword">new</span> GroupBuyStrategy());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 简单工厂创建营销策略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IPromotionStrategy <span class="title">createPromoteStrategy</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        IPromotionStrategy promotionStrategy = promotionStrategyMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (promotionStrategy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> emptyStrategy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> promotionStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有定义好的策略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">PromoteKey</span> </span>&#123;</span><br><span class="line">        String COUPON = <span class="string">&quot;coupon&quot;</span>;</span><br><span class="line">        String CROUP_BUY = <span class="string">&quot;groupBuy&quot;</span>;</span><br><span class="line">        String CASH_BACK = <span class="string">&quot;cashBack&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 因为策略模式需要用户知道所有可用的策略，所以这个方法暴露给客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getPromoteKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> promotionStrategyMap.keySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式下客户端写法"><a href="#策略模式下客户端写法" class="headerlink" title="策略模式下客户端写法"></a>策略模式下客户端写法</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String strategy = PromoteStrategyFactory.getPromoteKeySet().stream().findAny().get();</span><br><span class="line">    IPromotionStrategy promoteStrategy = PromoteStrategyFactory.createPromoteStrategy(strategy);</span><br><span class="line">    promoteStrategy.doPromote();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非策略模式下客户端写法"><a href="#非策略模式下客户端写法" class="headerlink" title="非策略模式下客户端写法"></a>非策略模式下客户端写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String strategy = <span class="string">&quot;客户选择的策略&quot;</span>;</span><br><span class="line">    IPromotionStrategy promotionStrategy;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;团购&quot;</span>.equals(strategy))&#123;</span><br><span class="line">         promotionStrategy = <span class="keyword">new</span> GroupBuyStrategy();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;优惠券&quot;</span>.equals(strategy))&#123;</span><br><span class="line">        promotionStrategy = <span class="keyword">new</span> CouponStrategy();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;现金折返&quot;</span>.equals(strategy))&#123;</span><br><span class="line">        promotionStrategy = <span class="keyword">new</span> CashBackStrategy();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        promotionStrategy = <span class="keyword">new</span> EmptyStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">    promotionStrategy.doPromote();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的对比，哪种方式比较优雅，立见高下了吧😄😄😄   </p><h2 id="策略模式的优点"><a href="#策略模式的优点" class="headerlink" title="策略模式的优点"></a>策略模式的优点</h2><ul><li><strong>策略模式是符合开闭原则的</strong></li><li><strong>避免使用多重条件转移语句 if-else语句、switch语句等</strong></li><li><strong>使用策略模式可以提高算法的保密性和安全性（客户端通过上下文组建来调用具体的算法-桥接）</strong></li></ul><h2 id="策略模式的缺点"><a href="#策略模式的缺点" class="headerlink" title="策略模式的缺点"></a>策略模式的缺点</h2><ul><li><strong>客户端必须要知道全部可用的策略，然后由用户决定使用那个策略，决定权在于客户</strong></li><li><strong>代码中会产生很多的策略类，增加代码量和系统的维护难度</strong></li></ul><h2 id="👤个人体会"><a href="#👤个人体会" class="headerlink" title="👤个人体会"></a>👤个人体会</h2><p>1、结合业务场景来设计，体会设计模式的思路，学设计模式最重要的是思想；<br>2、设计模式一般在框架中体现的比较多，大家可以多学习一些框架源码的设计理念，如果你是初级，可能一下子理解不了，慢慢体会吧，当你工作一段时间之后，见过一些工业生产的项目，看过一些优秀的框架源码的时候，会有一个 “柳暗花明又一村”的阶段；<br>3、举个例子，Controller我们都写过的，一个项目中的接口路径是唯一的，项目启动的时候，由Spring加载到容器中，<br>当由请求进来时是，Spring是根据path来返回具体的控制器，也就是Controller具体的方法；<br>4、还有Comparator比较器，不同的容器内部做数据排序的时候由不同的实现，这也是策略模式的体现；<br>5、本文中的例子虽然简单，但是包含了简单工厂模式，桥接模式，策略模式。任何一种设计模式都难以独立存在，这个大家要注意；  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;策略模式&lt;/strong&gt;（Strategy Pattern）也叫做政策模式（Policy Pattern）</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-桥接模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T11:59:32.000Z</published>
    <updated>2021-08-07T12:05:24.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a>桥接模式（Bridge Pattern）</h1><p>桥接模式也称为桥梁模式，接口（Integer）模式或者柄体（Handle and Body）模式，是将抽象部分和它的具体实现部分分离，是它们都可以独立地变化；</p><p>通过组合的方式建立两个类之间的联系，而不是继承； 桥接模式属于结构型模式；  </p><p>继承一般来作为多继承的备用方案；  </p><h2 id="桥接模式的结构"><a href="#桥接模式的结构" class="headerlink" title="桥接模式的结构"></a>桥接模式的结构</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-0d535d57f31a3116d90f4022b039595b8cd.png" style="zoom:50%;" />  <p><strong>桥接模式主要包括一下几个角色：</strong>  </p><p>1、<strong>抽象角色（Abstraction）：</strong> 定义抽象类，并包含一个对实现化对象的引用，正是这个引用，起着桥梁性的作用；<br>2、<strong>扩展抽象化（Refined Abstraction）角色</strong>：</p><h3 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> IImplementor iImplementor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Abstraction</span><span class="params">(IImplementor iImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iImplementor = iImplementor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iImplementor.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IImplementor"><a href="#IImplementor" class="headerlink" title="IImplementor"></a>IImplementor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IImplementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConcreteImplementA"><a href="#ConcreteImplementA" class="headerlink" title="ConcreteImplementA"></a>ConcreteImplementA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementA</span> <span class="keyword">implements</span> <span class="title">IImplementor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConcreteImplementB"><a href="#ConcreteImplementB" class="headerlink" title="ConcreteImplementB"></a>ConcreteImplementB</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementB</span> <span class="keyword">implements</span> <span class="title">IImplementor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RefinedAbstraction"><a href="#RefinedAbstraction" class="headerlink" title="RefinedAbstraction"></a>RefinedAbstraction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefinedAbstraction</span><span class="params">(IImplementor iImplementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(iImplementor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-e5443bab7294cf3d4213da30e87e593a889.png" style="zoom:50%;" />  <h3 id="AbstractMessage"><a href="#AbstractMessage" class="headerlink" title="AbstractMessage"></a>AbstractMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMessage</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> IMessage message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractMessage</span><span class="params">(IMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg,String toUser)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message.send(msg,toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IMessage"><a href="#IMessage" class="headerlink" title="IMessage"></a>IMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg,String toUser)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SmsMessage"><a href="#SmsMessage" class="headerlink" title="SmsMessage"></a>SmsMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsMessage</span> <span class="keyword">implements</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg, String toUser)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;使用短信消息发送 &quot;</span> + msg + <span class="string">&quot; 发送给 &quot;</span> + toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EmailMessage"><a href="#EmailMessage" class="headerlink" title="EmailMessage"></a>EmailMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailMessage</span> <span class="keyword">implements</span> <span class="title">IMessage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg, String toUser)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;使用邮件消息发送 &quot;</span> + msg + <span class="string">&quot; 发送给 &quot;</span> + toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NormalMessage"><a href="#NormalMessage" class="headerlink" title="NormalMessage"></a>NormalMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NormalMessage</span><span class="params">(IMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg, String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sendMsg(msg, toUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UegencyMessage"><a href="#UegencyMessage" class="headerlink" title="UegencyMessage"></a>UegencyMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UegencyMessage</span> <span class="keyword">extends</span> <span class="title">AbstractMessage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg,String toUser)</span></span>&#123;</span><br><span class="line">        msg = <span class="string">&quot;[ 加急]&quot;</span> + msg;</span><br><span class="line">        <span class="keyword">super</span>.sendMsg(msg,toUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UegencyMessage</span><span class="params">(IMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DemoTest"><a href="#DemoTest" class="headerlink" title="DemoTest"></a>DemoTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IMessage message = <span class="keyword">new</span> SmsMessage();</span><br><span class="line">        AbstractMessage abstractMessage = <span class="keyword">new</span> NormalMessage(message);</span><br><span class="line">        abstractMessage.sendMsg(<span class="string">&quot;加班申请&quot;</span>,<span class="string">&quot;老大&quot;</span>);</span><br><span class="line"></span><br><span class="line">        message = <span class="keyword">new</span> EmailMessage();</span><br><span class="line">        abstractMessage = <span class="keyword">new</span> UegencyMessage(message);</span><br><span class="line">        abstractMessage.sendMsg(<span class="string">&quot;调休申请&quot;</span>,<span class="string">&quot;老总&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用短信消息发送 加班申请 发送给 老大</span><br><span class="line">使用邮件消息发送 [ 加急]调休申请 发送给 老总</span><br></pre></td></tr></table></figure><h2 id="桥接模式的适用场景"><a href="#桥接模式的适用场景" class="headerlink" title="桥接模式的适用场景"></a>桥接模式的适用场景</h2><p>1、在抽象和具体实现之间需要增加更多的灵活性的场景；<br>2、一个类在两个或者多个独立变化的维度，而这两个或多个维度都需要独立的进行拓展<br>3、不希望使用继承，或者因为多层继承导致系统类的个数剧增；  </p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-e40c001a6bb521fdb429fd7436df93981f8.png">  </p><h2 id="桥接模式的优点"><a href="#桥接模式的优点" class="headerlink" title="桥接模式的优点"></a>桥接模式的优点</h2><p>1、遵循软件设计原则，分离抽象部分和具体实现部分<br>2、提高了系统的扩展性<br>3、符合开闭原则<br>4、符合合成复用原则  不使用继承而使用组合  </p><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>1、增加了系统代码可读性和复杂性<br>2、需要正确识别交接的不同维度    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;桥接模式（Bridge-Pattern）&quot;&gt;&lt;a href=&quot;#桥接模式（Bridge-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;桥接模式（Bridge Pattern）&quot;&gt;&lt;/a&gt;桥接模式（Bridge Pattern）&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-建造者模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T11:55:36.000Z</published>
    <updated>2021-08-07T11:58:49.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p> 建造者模式（Builder Pattern）将一个复杂的对象的构建过程与它的表示，使得同样的构建过程可以创建出不同的表示。<br> 建造者模式属于创建型模式；</p><p>对于用户而言，使用建造者模式只需要指定需要创建的类型就可以获取对象，创建的过程以及细节不需要了解，根据建造者模式的定义，可以简单的理解<br>为两层含义：<br>1、构建与表示分离；构建代表对象创建，表示代表对象行为，方法，也就是将对象的创建与行为分离；（对应到Java代码，其实就是使用接口规范行为，<br>然后由具体的实现进行构建）<br>2、创建不同的表示；也就是具备同样的行为，但是却由于构建的行为顺序不同或其他原因可以创建出不同的表示；</p><h3 id="Course"><a href="#Course" class="headerlink" title="Course"></a>Course</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String ppt;</span><br><span class="line">    <span class="keyword">private</span> String video;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">    <span class="keyword">private</span> String homework;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CourseBuilder"><a href="#CourseBuilder" class="headerlink" title="CourseBuilder"></a>CourseBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course = <span class="keyword">new</span> Course();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CourseBuilder <span class="title">addName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        course.setName(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CourseBuilder <span class="title">addHomework</span><span class="params">(String homework)</span></span>&#123;</span><br><span class="line">        course.setHomework(homework);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CourseBuilder <span class="title">addVideo</span><span class="params">(String video)</span></span>&#123;</span><br><span class="line">        course.setVideo(video);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CourseBuilder <span class="title">addPpt</span><span class="params">(String ppt)</span></span>&#123;</span><br><span class="line">        course.setPpt(ppt);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CourseBuilder <span class="title">addNote</span><span class="params">(String note)</span></span>&#123;</span><br><span class="line">        course.setNote(note);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DomoTest-测试"><a href="#DomoTest-测试" class="headerlink" title="DomoTest 测试"></a>DomoTest 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CourseBuilder courseBuilder = <span class="keyword">new</span> CourseBuilder();</span><br><span class="line">        courseBuilder.addHomework(<span class="string">&quot;课后作业111&quot;</span>)</span><br><span class="line">        .addName(<span class="string">&quot;设计模式&quot;</span>)</span><br><span class="line">        .addNote(<span class="string">&quot;课堂笔记&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;courseBuilder = &quot;</span> + courseBuilder.builder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">courseBuilder = Course(name=设计模式, ppt=null, video=null, note=课堂笔记, homework=课后作业111)</span><br></pre></td></tr></table></figure><h2 id="建造者在JDK中的应用"><a href="#建造者在JDK中的应用" class="headerlink" title="建造者在JDK中的应用"></a>建造者在JDK中的应用</h2><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-2381a159db921a2ce7d6b78fac5d7260ffd.png" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-StringBuilder-append-java-lang-CharSequence"><a href="#java-lang-StringBuilder-append-java-lang-CharSequence" class="headerlink" title="java.lang.StringBuilder.append(java.lang.CharSequence)"></a>java.lang.StringBuilder.append(java.lang.CharSequence)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(CharSequence s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的StringBuilder就是一个实现构造器，只不过它的上级还有一个抽象的构造器AbstractStringBuilder;<br>看到这源码是不是和我们上面举的例子类似呢，这就是JDK源码中很典型的建造者模式的应用；<br>处理上面的StringBuilder之外，还有像Mybatis框架中的CacheBuilder缓存构造器，还有像SqlSessionFactory装载时的openSession方法都是建造者模式；</p><h2 id="建造者模式的使用场景"><a href="#建造者模式的使用场景" class="headerlink" title="建造者模式的使用场景"></a>建造者模式的使用场景</h2><ul><li><strong>适用于创建对象需要很多步骤，但是步骤的顺序不一定是固定的</strong></li><li><strong>如果一个对象有非常复杂的内部结构（有很多的成员变量或属性）</strong></li><li><strong>把复杂对象的创建和使用分离</strong></li></ul><h2 id="建造者模式的优点"><a href="#建造者模式的优点" class="headerlink" title="建造者模式的优点"></a>建造者模式的优点</h2><ul><li><strong>封装行很好，使得创建过程和使用分离开</strong></li><li><strong>扩展性好，建造类之间独立，一定程度上解耦</strong></li><li><strong>便于控制细节，建造者可以对创建过程逐步细化，而不对其他模块产生任何影响</strong> </li></ul><h2 id="建造者模式的缺点"><a href="#建造者模式的缺点" class="headerlink" title="建造者模式的缺点"></a>建造者模式的缺点</h2><ul><li><strong>产生了对于的Builder对象，造成了类的冗余</strong></li><li><strong>如果产品内部发生变化，建造者都要修改，维护成本比较大；不适合经常变动的对象，这样也是不符合开闭原则的</strong></li></ul><h2 id="建造者模式和工厂模式的对比"><a href="#建造者模式和工厂模式的对比" class="headerlink" title="建造者模式和工厂模式的对比"></a>建造者模式和工厂模式的对比</h2><ul><li><strong>建造者模式更加注重方法的调用顺序，工厂模式注重于对象的创建</strong></li><li><strong>创建对象的力度不同，建造者模式创建复杂的对象，由各种复杂的组件组成，工厂模式创建出来对象的都一样</strong></li><li><strong>关注点不同，工厂模式只需要吧对象创建出来就可以了，而建造者模式中不仅要创建出这个对象，还要知道这个对象由那些组件组成</strong></li><li><strong>建造者模式根据建造过程中的顺序不一样，最终的对象不见组成也不一样，对象的每个部件的设置都是很灵活的</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h1&gt;&lt;p&gt; 建造者模式（Builder Pattern）将一个复杂的对象的构建过程与它的表示，使得同样的构建过程可以创建出不同</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-工厂模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T11:40:56.000Z</published>
    <updated>2021-08-07T11:48:14.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h2><p>简单工厂模式是指有一个工厂对象决定创建出哪一个产品类的实例；属于<code>创建型模式</code>，但它不属于GOF 23种设计模式。</p><p>UML类图<br><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-2e06fcc599aa2313d88c542a32a125934fc.png" style="zoom:50%;" /></p><p><strong>组成要素</strong><br>1、一个抽象产品类<br>2、具体产品类<br>3、一个工厂  </p><p><strong>肥宅喜爱的各种快乐水（产品接口）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Kls</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>肥宅快乐水-可乐（具体产品）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> <span class="keyword">implements</span> <span class="title">Kls</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;肥宅快乐水-可乐&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快乐水-雪碧（具体产品）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sprite</span> <span class="keyword">implements</span> <span class="title">Kls</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;快乐水-雪碧&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快乐水生产工厂(工厂类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KlsFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Kls <span class="title">getFzs</span><span class="params">(String type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Kls fzs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;coke&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            fzs = <span class="keyword">new</span> Coke();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;sprite&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            fzs = <span class="keyword">new</span> Sprite();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(fzs)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没找到快乐水~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fzs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fz</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 制造可乐</span></span><br><span class="line">        Kls coke = KlsFactory.getFzs(<span class="string">&quot;coke&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;肥宅开始喝：&quot;</span> + coke.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 制造雪碧</span></span><br><span class="line">        Kls sprite = KlsFactory.getFzs(<span class="string">&quot;sprite&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;肥宅开始喝：&quot;</span> + sprite.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1 优点"></a>1.1 优点</h3><ul><li>对客户端隐藏的具体的实现，客户端只需要知道要创建什么对象即可，不用关心对象是怎么创建的</li><li>解耦，客户端不需要通过new来创建对象，如果后期产品类需要修改，则只需要修改工厂类即可，不用整个项目遍地去寻找哪里有new </li></ul><h3 id="1-2-缺点"><a href="#1-2-缺点" class="headerlink" title="1.2 缺点"></a>1.2 缺点</h3><ul><li>由一个专门的工厂负责生产，如果业务变得复杂，这个类将变得十分臃肿</li><li>工厂类生产什么产品都是写死在工厂中的，如果增加新的产品，还要修改工厂类的生产逻辑</li></ul><h2 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2. 工厂方法模式"></a>2. 工厂方法模式</h2><p>工厂方法模式（Factory Method）是简单工厂的仅一步深化， 在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说每个对象都有一个与之对应的工厂。<br><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-11fa4bfb1062c445c055e49bc1d00b7d9cf.png" style="zoom:50%;" /></p><p><strong>组成要素</strong><br>1、一个抽象产品类<br>2、多个具体产品类<br>3、一个抽象工厂<br>4、多个具体工厂 - 每一个具体产品对应一个具体工厂<br>5、符合 - OCP开放封闭原则  </p><p>接着上面快乐水的例子。将 快乐水工厂 （KlsFactory） 抽象出共有方法，再分别实现具体的快乐水生产工厂。</p><p><strong>快乐水总工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制造快乐水</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Kls</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Kls <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可乐工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CokeFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Kls <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Coke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>雪碧工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpriteFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Kls <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sprite();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>肥宅(客户端)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fz</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 制造可乐</span></span><br><span class="line">        CokeFactory cokeFactory = <span class="keyword">new</span> CokeFactory();</span><br><span class="line">        Kls coke = cokeFactory.create();</span><br><span class="line">        System.out.println(<span class="string">&quot;肥宅开始喝：&quot;</span> + coke.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 制造雪碧</span></span><br><span class="line">        SpriteFactory spriteFactory = <span class="keyword">new</span> SpriteFactory();</span><br><span class="line">        Kls sprite = spriteFactory.create();</span><br><span class="line">        System.out.println(<span class="string">&quot;肥宅开始喝：&quot;</span> + sprite.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展芬达快乐水</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fanta</span> <span class="keyword">implements</span> <span class="title">Kls</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;快乐水-芬达&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复制代码芬达工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FantaFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Kls <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Fanta();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>肥宅使用添加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FantaFactory fantaFactory = <span class="keyword">new</span> FantaFactory();</span><br><span class="line">Kls fanta = fantaFactory.create();</span><br><span class="line">System.out.println(<span class="string">&quot;肥宅开始喝：&quot;</span> + fanta.name());</span><br></pre></td></tr></table></figure><h3 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h3><p>1、降低了代码耦合度，对象的生成交给子类去完成（这里的耦合度是相对于简单工厂模式的工厂类比较的）<br>2、降低了代码耦合度，对象的生成交给子类去完成  </p><h3 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h3><p>1、增加了代码量，每个具体产品都需要一个具体工厂（在具体的业务中可能会产生大量的重复代码）<br>2、当增加抽象产品 也就是添加一个其他产品族 需要修改工厂 违背OCP</p><h2 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-9121de8d650bac2739bb7ad27f1f4174a0c.png" style="zoom:50%;" /><p><strong>组成要素</strong><br>1、多个抽象产品类<br>2、具体产品类<br>3、抽象工厂类 - 声明(一组)返回抽象产品的方法<br>4、具体工厂类 - 生成(一组)具体产品  </p><p><strong>一个抽象产品类和两个具体的产品（可乐）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doCreate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalCoke</span> <span class="keyword">extends</span> <span class="title">Coke</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;生产本土可乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeignCoke</span> <span class="keyword">extends</span> <span class="title">Coke</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产外国可乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个抽象产品类和两个具体的产品（雪碧）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Sprite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doCreate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalSprite</span> <span class="keyword">extends</span> <span class="title">Sprite</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产本地雪碧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeignSprite</span> <span class="keyword">extends</span> <span class="title">Sprite</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;生产外国雪碧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个抽象工厂和两个具体的工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAbstractFactory</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成产可乐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 声明(一组)返回抽象产品的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Coke <span class="title">createCoke</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产雪碧</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 声明(一组)返回抽象产品的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Sprite <span class="title">createSprite</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalFactory</span> <span class="keyword">implements</span> <span class="title">IAbstractFactory</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成产可乐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成(一组)具体产品  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalCoke <span class="title">createCoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocalCoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产雪碧</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成(一组)具体产品  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalSprite <span class="title">createSprite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocalSprite();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeignFactory</span> <span class="keyword">implements</span> <span class="title">IAbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成产可乐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成(一组)具体产品  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ForeignCoke <span class="title">createCoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForeignCoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产雪碧</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成(一组)具体产品  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ForeignSprite <span class="title">createSprite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForeignSprite();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-抽象工厂的使用"><a href="#3-1-抽象工厂的使用" class="headerlink" title="3.1 抽象工厂的使用"></a>3.1 抽象工厂的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalFactory localFactory = <span class="keyword">new</span> LocalFactory();</span><br><span class="line">        LocalCoke localCoke = localFactory.createCoke();</span><br><span class="line">        localCoke.doCreate();</span><br><span class="line"></span><br><span class="line">        ForeignFactory foreignFactory = <span class="keyword">new</span> ForeignFactory();</span><br><span class="line">        ForeignSprite foreignSprite = foreignFactory.createSprite();</span><br><span class="line">        foreignSprite.doCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-优点"><a href="#3-2-优点" class="headerlink" title="3.2 优点"></a>3.2 优点</h3><p>1、代码解耦<br>2、很好的满足OCP开放封闭原则<br>3、抽象工厂模式中我们可以定义实现不止一个接口，一个工厂也可以生成不止一个产品类 对于复杂对象的生产相当灵活易扩展<br>(相对于工厂方法模式的优化)  </p><h3 id="3-3-缺点"><a href="#3-3-缺点" class="headerlink" title="3.3 缺点"></a>3.3 缺点</h3><p>1、扩展产品是需要修改所有工厂，违反违反OCP原则<br>2、整体实现也比较复杂  </p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://juejin.im/post/6844903650641330189">设计模式-简单工厂、工厂方法模式、抽象工厂模式</a></li><li><a href="https://juejin.im/post/6844903780819927054">设计模式 —— 工厂模式</a></li></ul></blockquote><p align="middle" > 还有多少个十年 继续做热血少年 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-简单工厂模式&quot;&gt;&lt;a href=&quot;#1-简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;1. 简单工厂模式&quot;&gt;&lt;/a&gt;1. 简单工厂模式&lt;/h2&gt;&lt;p&gt;简单工厂模式是指有一个工厂对象决定创建出哪一个产品类的实例；属于&lt;code&gt;创建型模式&lt;</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-原型模式</title>
    <link href="http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-07T11:31:43.000Z</published>
    <updated>2021-08-07T11:39:12.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式（Prototype Pattern）指原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象，属于创<br>建型模式；</p><p>原型模式的核心在于复制原型对象。以系统中已存在的一个对象为原型，直接基于内存二进制流进行复制，不需要<br>再精力耗时的对象初始化过程（不调用构造函数），性能提升很多。当对象的构造过程比较耗时时，可以把当前系统<br>已存在的对象作为原型，对其进行复制（一般是基于二进制流的复制），躲避初始化过程，使得新对象的创建时间大大缩短；</p><h2 id="原型模式类图"><a href="#原型模式类图" class="headerlink" title="原型模式类图"></a>原型模式类图</h2><p><img src="https://oscimg.oschina.net/oscnet/up-85e3522fe29b05e31c4957bbcdf82eeba4c.png"></p><h3 id="IPrototype-定义克隆的方法-类似于JDK自带的Cloneable"><a href="#IPrototype-定义克隆的方法-类似于JDK自带的Cloneable" class="headerlink" title="IPrototype 定义克隆的方法 类似于JDK自带的Cloneable"></a>IPrototype 定义克隆的方法 类似于JDK自带的Cloneable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPrototype</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConcretePrototype-具体的要克隆的对象"><a href="#ConcretePrototype-具体的要克隆的对象" class="headerlink" title="ConcretePrototype 具体的要克隆的对象"></a>ConcretePrototype 具体的要克隆的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title">IPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可能我们平时都这么去复制对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcretePrototype <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcretePrototype concretePrototype = <span class="keyword">new</span> ConcretePrototype();</span><br><span class="line">        concretePrototype.setAge(<span class="keyword">this</span>.age);</span><br><span class="line">        concretePrototype.setName(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">return</span> concretePrototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcretePrototype&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-客户端-测试"><a href="#Client-客户端-测试" class="headerlink" title="Client 客户端 测试"></a>Client 客户端 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//创建原型对象</span></span><br><span class="line">     ConcretePrototype prototype = <span class="keyword">new</span> ConcretePrototype();</span><br><span class="line">     prototype.setAge(<span class="number">18</span>);</span><br><span class="line">     prototype.setName(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">     System.out.println(prototype);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//拷贝原型对象</span></span><br><span class="line">     ConcretePrototype cloneType = prototype.clone();</span><br><span class="line">     System.out.println(cloneType);</span><br><span class="line">     System.err.println(cloneType == prototype);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConcretePrototype&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>&#125;</span><br><span class="line">ConcretePrototype&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">false</span> </span><br></pre></td></tr></table></figure><h3 id="实现JDK-Cloneable的克隆对象写法"><a href="#实现JDK-Cloneable的克隆对象写法" class="headerlink" title="实现JDK Cloneable的克隆对象写法"></a>实现JDK Cloneable的克隆对象写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype1</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcretePrototype1 <span class="title">clone</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">&quot;Clone Error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ConcretePrototype1) clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcretePrototype&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果同上；以上的两个属性都是基本数据类型和String，并没有引用类型，下面我们添加一个引用类型的属性测试以下👇👇  </p><h3 id="ConcretePrototype添加一个List类型属性"><a href="#ConcretePrototype添加一个List类型属性" class="headerlink" title="ConcretePrototype添加一个List类型属性"></a>ConcretePrototype添加一个List类型属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title">IPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcretePrototype <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcretePrototype concretePrototype = <span class="keyword">new</span> ConcretePrototype();</span><br><span class="line">        concretePrototype.setAge(<span class="keyword">this</span>.age);</span><br><span class="line">        concretePrototype.setName(<span class="keyword">this</span>.name);</span><br><span class="line">        concretePrototype.setHobbies(<span class="keyword">this</span>.hobbies);</span><br><span class="line">        <span class="keyword">return</span> concretePrototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcretePrototype&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SETTER方法实现浅克隆"><a href="#SETTER方法实现浅克隆" class="headerlink" title="SETTER方法实现浅克隆"></a>SETTER方法实现浅克隆</h3><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-569ebf8ef5519ace6b434b1301d87165f2c.png" style="zoom:50%;" /><blockquote><p>浅克隆也叫浅拷贝：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建原型对象</span></span><br><span class="line">        ConcretePrototype1 prototype = <span class="keyword">new</span> ConcretePrototype1();</span><br><span class="line">        prototype.setAge(<span class="number">18</span>);</span><br><span class="line">        prototype.setName(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; strings = Lists.newArrayList(<span class="string">&quot;数学&quot;</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">        prototype.setHobbies(strings);</span><br><span class="line">        System.out.println(prototype);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拷贝原型对象</span></span><br><span class="line">        ConcretePrototype1 cloneType = prototype.clone();</span><br><span class="line">        cloneType.getHobbies().add(<span class="string">&quot;语文&quot;</span>);</span><br><span class="line">        System.out.println(cloneType);</span><br><span class="line">        System.out.println(prototype);</span><br><span class="line">        System.err.println(cloneType == prototype);</span><br><span class="line">        System.err.println(cloneType.getHobbies() == prototype.getHobbies());</span><br><span class="line">    &#125;</span><br><span class="line">输出结果：</span><br><span class="line">ConcretePrototype1&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>, hobbies=[数学, 英语]&#125;</span><br><span class="line">ConcretePrototype1&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>, hobbies=[数学, 英语, 语文]&#125;</span><br><span class="line">ConcretePrototype1&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>, hobbies=[数学, 英语, 语文]&#125;</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="comment">// 这里为什么结果是true看到上面画的图应该可以看懂吧，set方法其实是将list的引用设置过去，并不是创建一个新的list再赋值！</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="通过内存字节流”克隆”对象，实现深克隆"><a href="#通过内存字节流”克隆”对象，实现深克隆" class="headerlink" title="通过内存字节流”克隆”对象，实现深克隆"></a>通过内存字节流”克隆”对象，实现深克隆</h2><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/up-41df4d66a80f2d0c2bfd87b7fea52ca9ddd.png" style="zoom:50%;" /><blockquote><p>深克隆也叫深拷贝：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototypeDeep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于内存字节流生成对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcretePrototypeDeep <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将当前对象信息写到内存</span></span><br><span class="line">            ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//从内存中读取对象信息，强制转换成当前类型</span></span><br><span class="line">            ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">            <span class="keyword">return</span> (ConcretePrototypeDeep) objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ConcretePrototype&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ConcretePrototype&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>, hobbies=[数学, 英语]&#125;</span><br><span class="line">ConcretePrototype&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>, hobbies=[数学, 英语, 语文]&#125;</span><br><span class="line">ConcretePrototype&#123;age=<span class="number">18</span>, name=<span class="string">&#x27;Tom&#x27;</span>, hobbies=[数学, 英语]&#125;</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>在Java语言中，如果需要实现深克隆，可以通过覆盖Object类的clone()方法实现，也可以通过序列化(Serialization)等方式来实现。</p><blockquote><p>要实现深拷贝，必须实现Cloneable接口，去重写clone方法，否则会抛出CloneNotSupportedException异常，<br>但是如果对象中包含很多引用类型的属性，这样去覆盖clone方法其实是很麻烦的，可以优先使用序列化的方式实现！    </p></blockquote><h2 id="克隆破坏单例模式"><a href="#克隆破坏单例模式" class="headerlink" title="克隆破坏单例模式"></a>克隆破坏单例模式</h2><p>如果我们克隆的目标的对象是单例对象，这便意味着，深克隆会破坏单例。解决以上问题的思路：</p><ul><li><strong>禁止深克隆</strong></li><li><strong>在单例对象的getInstance方法，返回当前对象，而不是去新创建一个对象或者通过内存字节流等方法生成对象</strong></li></ul><h2 id="原型模式在Java中的应用"><a href="#原型模式在Java中的应用" class="headerlink" title="原型模式在Java中的应用"></a>原型模式在Java中的应用</h2><p>ArrayList底层是基于数组结果的，它的动态扩容过程是创建一个新的数组，并把数组中的元素拷贝过去，用新的数组来继续存放元素；<br>在创建新数组的过程中便使用了原型模式。</p><h3 id="java-util-ArrayList-clone"><a href="#java-util-ArrayList-clone" class="headerlink" title="java.util.ArrayList.clone"></a>java.util.ArrayList.clone</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        v.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="comment">// this shouldn&#x27;t happen, since we are Cloneable</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-util-Arrays-copyOf-T-int"><a href="#java-util-Arrays-copyOf-T-int" class="headerlink" title="java.util.Arrays.copyOf(T[], int)"></a>java.util.Arrays.copyOf(T[], int)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">       <span class="keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="java-util-Arrays-copyOf-U-int-java-lang-Class-lt-extends-T-gt"><a href="#java-util-Arrays-copyOf-U-int-java-lang-Class-lt-extends-T-gt" class="headerlink" title="java.util.Arrays.copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;)"></a>java.util.Arrays.copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">            ? (T[]) <span class="keyword">new</span> Object[newLength]</span><br><span class="line">            : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                         Math.min(original.length, newLength));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最终还是System.arraycopy(original, 0, copy, 0,<br>                             Math.min(original.length, newLength));这个方法来完成数组的拷贝！<br>像我们使用的 </p><p><code>com.alibaba.fastjson.JSON#parseObject</code></p><p>org.springframework.beans.BeanUtils#copyProperties(java.lang.Object, java.lang.Object)`</p><p>等都是原型模式；</p><h2 id="原型模式适用场景"><a href="#原型模式适用场景" class="headerlink" title="原型模式适用场景"></a>原型模式适用场景</h2><ul><li><strong>类初始化消耗资源过多</strong>  </li><li><strong>new一个对象需要很多繁琐的过程（数据准备，访问权限等）</strong>  </li><li><strong>构造函数比较复杂</strong></li><li><strong>循环体内产生大量对象时</strong></li></ul><h2 id="原型模式的优点"><a href="#原型模式的优点" class="headerlink" title="原型模式的优点"></a>原型模式的优点</h2><ul><li><strong>Java自带的原型模式是基于内存二进制流的复制，在性能上比直接创建一个对象更加优良</strong></li><li><strong>可以使用深克隆的方式保存对象的状态，使用原型模式将对象复制一份，并将其状态保存起来，简化了创建对象的过程，<br>以便在需要的时候使用，可辅助实现撤销操作。</strong></li></ul><h2 id="原型模式的缺点"><a href="#原型模式的缺点" class="headerlink" title="原型模式的缺点"></a>原型模式的缺点</h2><ul><li><strong>需要为每一个类都配置一个 clone 方法</strong></li><li><strong>clone 方法位于类的内部，当对已有类进行改造的时候，需要修改代码，违背了开闭原则</strong></li><li><strong>当实现深克隆时，需要编写较为复杂的代码，而且当对象之间存在多重嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，<br>实现起来会比较麻烦。因此，深克隆、浅克隆需要运用得当</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;p&gt;原型模式（Prototype Pattern）指原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象，属于创&lt;br&gt;</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
