<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeekIBLi</title>
  
  <subtitle>For Coder</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-05T08:18:51.686Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>gaolei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并发中的一些问题</title>
    <link href="http://example.com/wiki/%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/wiki/%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-04T03:48:18.000Z</published>
    <updated>2022-01-05T08:18:51.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-volatile"><a href="#2-volatile" class="headerlink" title="2. volatile"></a>2. volatile</h2><h3 id="2-1-volatile的作用"><a href="#2-1-volatile的作用" class="headerlink" title="2.1 volatile的作用"></a>2.1 volatile的作用</h3><p><font color=red>Volatile 只能修饰成员变量，不能修饰局部变量。</font></p><blockquote><p>1、及时可见性   </p><p>2、指令重排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jmm04_CodeAtomic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (object)&#123;</span><br><span class="line">                        counter++;<span class="comment">//分三步- 读，自加，写回</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ <strong>volatile无法保证原子操作</strong></p><h3 id="2-2-volatile-count-为什么会小于正确的结果？"><a href="#2-2-volatile-count-为什么会小于正确的结果？" class="headerlink" title="2.2 volatile count++为什么会小于正确的结果？"></a>2.2 volatile count++为什么会小于正确的结果？</h3><p>count++ 不是原子操作！count = count + 1;</p><ul><li>读count</li><li>计算count + 1</li><li>重新赋值count</li></ul><blockquote><p>s多个线程下可能会出现少加的情况。</p></blockquote><h4 id="2-2-1-这个数据是被丢失了呢-还是被覆盖了呢？"><a href="#2-2-1-这个数据是被丢失了呢-还是被覆盖了呢？" class="headerlink" title="2.2.1 这个数据是被丢失了呢 还是被覆盖了呢？"></a>2.2.1 这个数据是被丢失了呢 还是被覆盖了呢？</h4><p>mesi协议</p><h4 id="2-2-2-如何保证count-正确呢？"><a href="#2-2-2-如何保证count-正确呢？" class="headerlink" title="2.2.2 如何保证count++正确呢？"></a>2.2.2 如何保证count++正确呢？</h4><p>同步锁 synchronized</p><h3 id="2-3-什么是指令重排序？"><a href="#2-3-什么是指令重排序？" class="headerlink" title="2.3 什么是指令重排序？"></a>2.3 什么是指令重排序？</h3><p>在保证结果正确性的前提下，指令从内存中加载，重排序之后，可以减少内存数据加载的次数。</p><p>编译器重排  指令级重排序 执行器重排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jmm05_CodeReorder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            x = <span class="number">0</span>; y = <span class="number">0</span>;</span><br><span class="line">            a = <span class="number">0</span>; b = <span class="number">0</span>;</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    shortWait(<span class="number">10000</span>);</span><br><span class="line">                    a = <span class="number">1</span>;</span><br><span class="line">                    x = b;</span><br><span class="line">                    UnsafeInstance.reflectGetUnsafe().fullFence();</span><br><span class="line">                    <span class="comment">///</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    b = <span class="number">1</span>;</span><br><span class="line">                    UnsafeInstance.reflectGetUnsafe().fullFence();</span><br><span class="line">                    y = a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line"></span><br><span class="line">            String result = <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次 (&quot;</span> + x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;）&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待一段时间，时间单位纳秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interval</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shortWait</span><span class="params">(<span class="keyword">long</span> interval)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">long</span> end;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            end = System.nanoTime();</span><br><span class="line">        &#125;<span class="keyword">while</span>(start + interval &gt;= end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上不考虑指令重拍的情况下有几种结果呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = 1, y = 0;</span><br><span class="line">x = 0, y = 1;</span><br><span class="line">x = 1, y = 1;</span><br><span class="line">x = 0, y = 0; volatile禁止指令重排序，不会出现这种情况！</span><br></pre></td></tr></table></figure><h3 id="2-4-禁止指令重排序的实现原理？"><a href="#2-4-禁止指令重排序的实现原理？" class="headerlink" title="2.4 禁止指令重排序的实现原理？"></a>2.4 禁止指令重排序的实现原理？</h3><h4 id="2-4-1-内存屏障"><a href="#2-4-1-内存屏障" class="headerlink" title="2.4.1 内存屏障"></a>2.4.1 <strong>内存屏障</strong></h4><p><img src="https://oscimg.oschina.net/oscnet/up-19f862e1ab685fc440550c90b9e3a46066b.png"></p><h3 id="2-5-指令重排有哪些现实中的例子"><a href="#2-5-指令重排有哪些现实中的例子" class="headerlink" title="2.5 指令重排有哪些现实中的例子"></a>2.5 指令重排有哪些现实中的例子</h3><h4 id="2-5-1-DCL"><a href="#2-5-1-DCL" class="headerlink" title="2.5.1 DCL"></a>2.5.1 <strong>DCL</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看汇编指令</span></span><br><span class="line"><span class="comment">     * -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -Xcomp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton myinstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双重锁机制保证单例安全</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (myinstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (myinstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    myinstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myinstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应字节码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L8</span><br><span class="line">    LINENUMBER <span class="number">26</span> L8</span><br><span class="line">    NEW com/yg/edu/jmm/dcl/Singleton</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL com/yg/edu/jmm/dcl/Singleton.&lt;init&gt; ()V</span><br><span class="line">    PUTSTATIC com/yg/edu/jmm/dcl/Singleton.myinstance : Lcom/yg/edu/jmm/dcl/Singleton;</span><br></pre></td></tr></table></figure><p>上述代码一个经典的单例的双重检测的代码，这段代码在单线程环境下并没有什么问题，但如果在多线程环境下就可以出现线程安全问题。原因在于某一个线程执行到第一次检测，读取到的instance不为null时，instance的引用对象可能没有完成初始化。</p><blockquote><p>因为instance = new DoubleCheckLock();可以分为以下3步完成(伪代码)       </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory = allocate();<span class="comment">//1.分配对象内存空间 </span></span><br><span class="line">instance(memory);<span class="comment">//2.初始化对象 </span></span><br><span class="line">instance = memory;<span class="comment">//3.设置instance指向刚分配的内存地址，此时instance！=null   </span></span><br></pre></td></tr></table></figure><p>由于步骤1和步骤2间可能会重排序，如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memory=allocate();<span class="comment">//1.分配对象内存空间 </span></span><br><span class="line">instance=memory;<span class="comment">//3.设置instance指向刚分配的内存地址，此时instance！=null，但是对象还没有初始化完成！ instance(memory);//2.初始化对象       </span></span><br></pre></td></tr></table></figure><p>由于步骤2和步骤3不存在数据依赖关系，而且无论重排前还是重排后程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的。但是指令重排只会保证串行语义的执行的一致性(单线程)，但并不会关心多线程间的语义一致性。所以当一条线程访问instance不为null时，由于instance实例未必已初始化完成，也就造成了线程安全问题。那么该如何解决呢，很简单，我们使用volatile禁止instance变量被执行指令重排优化即可。</p><blockquote><p> //禁止指令重排优化 private volatile static DoubleCheckLock instance; </p></blockquote><h3 id="2-6-volatile内存语义的实现"><a href="#2-6-volatile内存语义的实现" class="headerlink" title="2.6 volatile内存语义的实现"></a>2.6 <strong>volatile内存语义的实现</strong></h3><p><img src="https://oscimg.oschina.net/oscnet/up-506a15a3e2902d645d3b418d7af730b8bc0.png"></p><p>举例来说，第二行最后一个单元格的意思是：在程序中，当第一个操作为普通变量的读或写时，如果第二个操作为volatile写，则编译器不能重排序这两个操作。</p><p>从上图可以看出：</p><ul><li><ul><li>当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。</li><li>当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。</li><li>当第一个操作是volatile写，第二个操作是volatile读或写时，不能重排序。</li></ul></li></ul><p>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能。为此，JMM采取保守策略。下面是基于保守策略的JMM内存屏障插入策略。</p><ul><li><ul><li>·在每个volatile写操作的前面插入一个StoreStore屏障。</li><li>·在每个volatile写操作的后面插入一个StoreLoad屏障。</li><li>·在每个volatile读操作的前面插入一个LoadLoad屏障。</li><li>·在每个volatile读操作的后面插入一个LoadStore屏障。</li></ul></li></ul><p>上述内存屏障插入策略非常保守，但它可以保证在任意处理器平台，任意的程序中都能得到正确的volatile内存语义。</p><h3 id="2-7-synchronized能否禁止指令重排序？"><a href="#2-7-synchronized能否禁止指令重排序？" class="headerlink" title="2.7 synchronized能否禁止指令重排序？"></a>2.7 synchronized能否禁止指令重排序？</h3><p>不能</p><h3 id="2-8-如何在java代码中手动添加内存屏障？"><a href="#2-8-如何在java代码中手动添加内存屏障？" class="headerlink" title="2.8 如何在java代码中手动添加内存屏障？"></a>2.8 如何在java代码中手动添加内存屏障？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">reflectGetUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> (Unsafe) field.get(<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line">    UnsafeInstance.reflectGetUnsafe().fullFence();</span><br><span class="line">    y = a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-MESI协议"><a href="#3-MESI协议" class="headerlink" title="3. MESI协议"></a>3. MESI协议</h2><h3 id="3-1-java代码是如何执行的？"><a href="#3-1-java代码是如何执行的？" class="headerlink" title="3.1 java代码是如何执行的？"></a>3.1 java代码是如何执行的？</h3><img src="https://oscimg.oschina.net/oscnet/up-5e2b4236c26b626b78e0a5c54ffd60478eb.png" style="zoom:50%;" /><h3 id="3-2-CPU是如何与内存交互的？"><a href="#3-2-CPU是如何与内存交互的？" class="headerlink" title="3.2 CPU是如何与内存交互的？"></a>3.2 CPU是如何与内存交互的？</h3><img src="https://oscimg.oschina.net/oscnet/up-da07e86004a11f1c46c1734fa59ba63daac.png" style="zoom:50%;" /><p><font color=red>CPU访问内存是通过总线，而访问总线，必须先获取总线索，而lock前缀的执行，可以获取总线锁，阻塞其他CPU进行访问。</font>这是最初的一种设计，这种方式的效率显然是很差的。</p><h3 id="3-3-MESI协议工作流程？"><a href="#3-3-MESI协议工作流程？" class="headerlink" title="3.3 MESI协议工作流程？"></a>3.3 MESI协议工作流程？</h3><img src="https://oscimg.oschina.net/oscnet/up-8b18e489f07c8be3db2b26eb2e90524ca1b.png" style="zoom:50%;" /><h3 id="3-4-什么是总线裁决？"><a href="#3-4-什么是总线裁决？" class="headerlink" title="3.4 什么是总线裁决？"></a>3.4 什么是总线裁决？</h3><p>多个cpu操作一个数据的时候，去对缓存行加锁的时候，需要总线来判断给那个cpu加锁。获取锁的缓存行变成m状态，其他的缓存行变成i状态。</p><h3 id="3-5-缓存行是几级缓存的？"><a href="#3-5-缓存行是几级缓存的？" class="headerlink" title="3.5 缓存行是几级缓存的？"></a>3.5 缓存行是几级缓存的？</h3><p>L1 Cache</p><h3 id="3-6-一个缓存行64字节装不下数据会怎样？"><a href="#3-6-一个缓存行64字节装不下数据会怎样？" class="headerlink" title="3.6 一个缓存行64字节装不下数据会怎样？"></a>3.6 一个缓存行64字节装不下数据会怎样？</h3><p><font color=red>升级成总线锁</font></p><h3 id="3-7-缓存行上加锁会影响到其他的数据吗？"><a href="#3-7-缓存行上加锁会影响到其他的数据吗？" class="headerlink" title="3.7 缓存行上加锁会影响到其他的数据吗？"></a>3.7 缓存行上加锁会影响到其他的数据吗？</h3><p>？？？</p><h3 id="3-8-MESI协议不能对寄存器失效"><a href="#3-8-MESI协议不能对寄存器失效" class="headerlink" title="3.8 MESI协议不能对寄存器失效"></a>3.8 MESI协议不能对寄存器失效</h3><p>已经加载到寄存器的指令不能失效，比如count++操作不能保证原子性</p><h3 id="3-9-MESI-数据失效之后，怎么读正确的数据呢？"><a href="#3-9-MESI-数据失效之后，怎么读正确的数据呢？" class="headerlink" title="3.9 MESI 数据失效之后，怎么读正确的数据呢？"></a>3.9 MESI 数据失效之后，怎么读正确的数据呢？</h3><p>是实时去内存中读取数据吗？ 不是的。</p><img src="https://oscimg.oschina.net/oscnet/up-c037376bafc96bbbe79db73378d27e402c2.png" style="zoom:50%;" /><ul><li>获取到lock的数据修改之后，并不是直接把数据写到缓存行中，而是写到了store buffer中。</li><li>获取lock的cpu在修改数据是，会把当前缓存行设置成m状态，同时发送一个消息到其他cpu</li><li>其他没有获取到lock的缓存行中的数据就失效了，变成i状态，同时把失效的数据放到一个队列中</li><li>当失效数据都放到缓冲队列之后，获取lock的cpu把store buffer中的数据刷到缓存行中。最后在更新到内存中。</li><li>在Cpu空闲的时候，将失效的数据在队列中清除，之前仅仅是把数据放到失效队列中，缓存行中的数据其实还在</li></ul><h3 id="3-10-happens-before原则"><a href="#3-10-happens-before原则" class="headerlink" title="3.10 happens-before原则"></a>3.10 happens-before原则</h3><p><img src="https://oscimg.oschina.net/oscnet/up-f9a3b32c0737241fdbbe79d7bf104de61b4.png"></p><h2 id="4、synchronized关键字"><a href="#4、synchronized关键字" class="headerlink" title="4、synchronized关键字"></a>4、synchronized关键字</h2><h3 id="4-1-synchronized-1-6之前和之后有什么区别"><a href="#4-1-synchronized-1-6之前和之后有什么区别" class="headerlink" title="4.1 synchronized 1.6之前和之后有什么区别"></a>4.1 synchronized 1.6之前和之后有什么区别</h3><img src="https://oscimg.oschina.net/oscnet/up-b88652d8e316f622103f29c5c917e92f5c6.png" style="zoom:50%;" /><ul><li>偏向锁只针对有一个线程加锁的情况</li><li>轻量级锁针对有少数线程竞争，但是竞争不强烈（如何定义不强烈？ 锁占用时间短，线程可交替执行）</li><li>重量级锁 依赖管程 依靠操作系统底层的互斥量Mutex, 由操作系统维护，涉及到CPU用户态和内核态的切换，比较重</li></ul><h3 id="4-2-什么是自旋锁"><a href="#4-2-什么是自旋锁" class="headerlink" title="4.2 什么是自旋锁"></a>4.2 什么是自旋锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line"><span class="keyword">do</span>....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当多个线程竞争锁资源的时候，后到的线程自旋等待正在执行的线程释放锁资源，然后自己去竞争，自旋的过程中，一直占用CPU。</p><p><font color=red>自旋锁使用于同步代码块里面执行逻辑很简单或者比较快的场景。这样另一个进程可以很快获得锁。</font></p><p><strong>自旋锁是处于性能的考虑。避免进程上下文切换，等待线程阻塞和唤醒的性能开销。</strong></p><p>自旋锁成功之后升级为轻量级锁，如果自旋次数够了依旧没有获取到锁，便升级成为重量级锁。</p><h3 id="4-3-锁升级的过程是否可逆？"><a href="#4-3-锁升级的过程是否可逆？" class="headerlink" title="4.3 锁升级的过程是否可逆？"></a><strong>4.3 锁升级的过程是否可逆？</strong></h3><p>不可逆</p><h3 id="4-4-synchronized如何使用？"><a href="#4-4-synchronized如何使用？" class="headerlink" title="4.4 synchronized如何使用？"></a>4.4 synchronized如何使用？</h3><ul><li>普通方法<ul><li>锁的是当前的对象，凡是这个实例对象相关的方法都互斥</li><li>即便这个类存在static的同步方法，不和这个实例对象相关的两个线程，不会冲突</li></ul></li><li>静态方法<ul><li>锁范围是当前类实例</li><li>注意所的范围才好弄清楚是否冲突</li><li>普通同步方法和静态同步方法不冲突，因为不是所的一个实例</li></ul></li><li>方法内部同步块<ul><li>锁的范围最小</li><li>锁实例一般是成员对象，不同成员对象的同步代码块执行不冲突</li></ul></li></ul><h3 id="4-5-synchronized底层原理是怎样的？"><a href="#4-5-synchronized底层原理是怎样的？" class="headerlink" title="4.5 synchronized底层原理是怎样的？"></a>4.5 synchronized底层原理是怎样的？</h3><p><strong>synchronized内置锁是一种对象锁(锁的是对象而非引用)，作用粒度是对象，可以用来实现对临界资源的同步互斥访问，是可重入的。</strong></p><p>synchronized加锁的方式如上已经阐述。</p><p><strong>synchronized是基于JVM</strong>内置锁实现，通过内部对象<strong>Monitor</strong>(监视器锁)实现，基于进入与退出<strong>Monitor</strong>对象实现方法与代码块同步，监视器锁的实现依赖底层操作系统的<strong>Mutex lock</strong>（互斥锁）实现，它是一个重量级锁性能较低。当然，<strong>JVM内置锁在1.5之后版本做了重大的优化，</strong>如锁粗化（Lock Coarsening）、锁消除（Lock Elimination）、轻量级锁（Lightweight Locking）、偏向锁（Biased Locking）、适应性自旋（Adaptive Spinning）等技术来减少锁操作的开销，，内置锁的并发性能已经基本与Lock持平。</p><p><font color=red>synchronized关键字被编译成字节码后会被翻译成monitorenter 和 monitorexit 两条指令分别在同步块逻辑代码的起始位置与结束位置。</font></p><img src="https://oscimg.oschina.net/oscnet/up-53aba5e9abb1ea04b386b23591a04372c6a.png" style="zoom:50%;" /><h3 id="4-6什么是Monitor监视器锁？"><a href="#4-6什么是Monitor监视器锁？" class="headerlink" title="4.6什么是Monitor监视器锁？"></a>4.6什么是<strong>Monitor监视器锁</strong>？</h3><p><strong>Monitor监视器锁</strong></p><p>​    <strong>任何一个对象都有一个Monitor与之关联，当且一个Monitor被持有后，它将处于锁定状态</strong>。Synchronized在JVM里的实现都是 <strong>基于进入和退出Monitor对象来实现方法同步和代码块同步</strong>，虽然具体实现细节不一样，但是都可以通过成对的MonitorEnter和MonitorExit指令来实现。</p><ul><li><p><strong>monitorenter</strong>：每个对象都是一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p></li><li><ol><li><strong>如果monitor的进入数为0</strong>，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者；</li><li><strong>如果线程已经占有该monitor</strong>，只是重新进入，则进入monitor的进入数加1；</li><li><strong>如果其他线程已经占用了monitor</strong>，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权；</li></ol></li><li><p><strong>monitorexit</strong>：执行monitorexit的线程必须是objectref所对应的monitor的所有者。<strong>指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者</strong>。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。</p></li></ul><p><strong>monitorexit，指令出现了两次，第1次为同步正常退出释放锁；第2次为发生异步退出释放锁</strong>；</p><p>通过上面两段描述，我们应该能很清楚的看出Synchronized的实现原理，<strong>Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象</strong>，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，<strong>否则会抛出java.lang.IllegalMonitorStateException的异常的原因</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-e69029578748db53d6ce688c724f4771610.png"></p><p>从编译的结果来看，方法的同步并没有通过指令 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 来完成（理论上其实也可以通过这两条指令来实现），不过相对于普通方法，其常量池中多了 <strong>ACC_SYNCHRONIZED</strong> 标示符。<strong>JVM就是根据该标示符来实现方法的同步的</strong>：</p><p><font color=red>当方法调用时，<strong>调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置</strong>，如果设置了，<strong>执行线程将先获取monitor</strong>，获取成功之后才能执行方法体，<strong>方法执行完后再释放monitor</strong>。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。</font></p><p>两种同步方式本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。<strong>两个指令的执行是JVM通过调用操作系统的互斥原语mutex来实现，被阻塞的线程会被挂起、等待重新调度</strong>，会导致“用户态和内核态”两个态之间来回切换，对性能有较大影响。</p><h4 id="什么是monitor？"><a href="#什么是monitor？" class="headerlink" title="什么是monitor？"></a><strong>什么是monitor？</strong></h4><p>可以把它理解为 <strong>一个同步工具</strong>，也可以描述为 <strong>一种同步机制</strong>，它通常被 <strong>描述为一个对象</strong>。与一切皆对象一样，所有的Java对象是天生的Monitor，每一个Java对象都有成为Monitor的潜质，<strong>因为在Java的设计中 ，每一个Java对象自打娘胎里出来就带了一把看不见的锁，它叫做内部锁或者Monitor锁</strong>。<strong>也就是通常说Synchronized的对象锁，MarkWord锁标识位为10，其中指针指向的是Monitor对象的起始地址</strong>。在Java虚拟机（HotSpot）中，<strong>Monitor是由ObjectMonitor实现的</strong>，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">// 记录个数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;</span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">// 处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ; <span class="comment">// 处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ObjectMonitor中有两个队列，**_WaitSet 和 _EntryList<strong>，用来保存ObjectWaiter对象列表（ <strong>每个等待锁的线程都会被封装成ObjectWaiter对象</strong> ），</strong>_owner指向持有ObjectMonitor对象的线程**，当多个线程同时访问一段同步代码时：</p><ol><li>首先会进入 _EntryList 集合，<strong>当线程获取到对象的monitor后，进入 _Owner区域并把monitor中的owner变量设置为当前线程，同时monitor中的计数器count加1</strong>；</li><li>若线程调用 wait() 方法，<strong>将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入 WaitSet集合中等待被唤醒</strong>；</li><li>若当前线程执行完毕，**也将释放monitor（锁）并复位count的值，以便其他线程进入获取monitor(锁)**；</li></ol><p>同时，<strong>Monitor对象存在于每个Java对象的对象头Mark Word中（存储的指针的指向），Synchronized锁便是通过这种方式获取锁的</strong>，也是为什么Java中任意对象可以作为锁的原因，<strong>同时notify/notifyAll/wait等方法会使用到Monitor锁对象，所以必须在同步代码块中使用</strong>。监视器Monitor有两种同步方式：<strong>互斥与协作</strong>。多线程环境下线程之间如果需要共享数据，需要解决互斥访问数据的问题，<strong>监视器可以确保监视器上的数据在同一时刻只会有一个线程在访问</strong>。</p><h3 id="4-7-对象头中锁是如何标记的？"><a href="#4-7-对象头中锁是如何标记的？" class="headerlink" title="4.7 对象头中锁是如何标记的？"></a>4.7 对象头中锁是如何标记的？</h3><p>32位虚拟机的对象头如下👇</p><p><img src="https://oscimg.oschina.net/oscnet/up-f5d9bf5e5d69b16c4201310d0401065d8b0.png"></p><h3 id="4-8-锁对象hashCode在各种状态下都存放在那里？"><a href="#4-8-锁对象hashCode在各种状态下都存放在那里？" class="headerlink" title="4.8 锁对象hashCode在各种状态下都存放在那里？"></a>4.8 锁对象hashCode在各种状态下都存放在那里？</h3><ul><li>无锁状态下hashcode存放在markword中</li><li>偏向锁调用hashcode会升级成轻量级锁</li><li>轻量级锁的hashCode存放在线程栈的Lock Record中</li><li>重量级锁的hashCode存放在Monitor中</li></ul><h3 id="4-9-验证锁标志"><a href="#4-9-验证锁标志" class="headerlink" title="4.9 验证锁标志"></a>4.9 验证锁标志</h3><p>项目中引入一下依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">0.10</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>打印锁对象的对象头，如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//  TimeUnit.SECONDS.sleep(5);</span></span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">    System.out.println(<span class="string">&quot;a   &quot;</span> + ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">    o.hashCode();</span><br><span class="line">    System.out.println(<span class="string">&quot;b    &quot;</span> + ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">    <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;c   &quot;</span> + ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-一开始要sleep5-秒有什么作用？"><a href="#4-9-一开始要sleep5-秒有什么作用？" class="headerlink" title="4.9 一开始要sleep5 秒有什么作用？"></a>4.9 一开始要sleep5 秒有什么作用？</h3><p>因为jvm在启动的时候，要初始化很多的数据，会涉及到很多对象处于偏向锁。</p><ul><li>如果一开始不sleep，第一次打印是无锁状态，第二次打印，是轻量级锁，因为此时进程中可能有很多偏向锁占用CPU,这里直接升级为轻量级锁</li><li>一开始sleep，锁对象会是偏向锁的状态，然后只有一个线程竞争，第二次打印也还是偏向锁</li></ul><h3 id="4-10-什么是匿名偏向？"><a href="#4-10-什么是匿名偏向？" class="headerlink" title="4.10 什么是匿名偏向？"></a>4.10 什么是匿名偏向？</h3><h3 id="4-11-为什么偏向锁的对象调用hashCode方法之后，会升级为轻量级锁？"><a href="#4-11-为什么偏向锁的对象调用hashCode方法之后，会升级为轻量级锁？" class="headerlink" title="4.11 为什么偏向锁的对象调用hashCode方法之后，会升级为轻量级锁？"></a>4.11 为什么偏向锁的对象调用hashCode方法之后，会升级为轻量级锁？</h3><p>可能是因为轻量级锁的对象头markword中，没有地方存放偏向锁的标志和hashcode，而轻量级锁则由地方存储，在线程栈的Lock record中记录</p><h3 id="4-12-锁升级过程是怎样的？"><a href="#4-12-锁升级过程是怎样的？" class="headerlink" title="4.12 锁升级过程是怎样的？"></a>4.12 锁升级过程是怎样的？</h3><p><img src="https://oscimg.oschina.net/oscnet/up-c4d41493d771bf980f88488c2a928e23439.png"></p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a><strong>偏向锁</strong></h4><p>偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。\</p><p>偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。</p><p>但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。下面我们接着了解轻量级锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认开启偏向锁</span><br><span class="line">开启偏向锁：-XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0</span><br><span class="line">关闭偏向锁：-XX:-UseBiasedLocking</span><br></pre></td></tr></table></figure><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a><strong>轻量级锁</strong></h4><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p><h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a><strong>自旋锁</strong></h5><p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。<strong>这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，</strong>因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p><h5 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a><strong>锁消除</strong></h5><p>消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间，如下StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除。<strong>锁消除的依据是逃逸分析的数据支持。</strong></p><p>锁消除，前提是java必须运行在server模式（server模式会比client模式作更多的优化），同时必须开启逃逸分析</p><p>:-XX:+DoEscapeAnalysis 开启逃逸分析</p><p>-XX:+EliminateLocks 表示开启锁消除。</p><h5 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h5><p><a href="https://geekibli.github.io/wiki/Java-%E9%94%81%E6%B6%88%E9%99%A4%E5%92%8C%E9%94%81%E8%86%A8%E8%83%80/">Java-锁消除和锁膨胀</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="https://note.youdao.com/ynoteshare/index.html?id=e59837f57323a12defbb62fa837b330d&type=note&_time=1641267390260">JMM讲解&amp;volatile</a></p></li><li><p><a href="https://note.youdao.com/ynoteshare/index.html?id=73fc01483ff8b40c47d6898ad17a66c8&type=note&_time=1641280508219">MESI协议</a></p></li><li><p><a href="https://note.youdao.com/ynoteshare/index.html?id=ee257490aa10fc87bb8c3823ed1e5421&type=note&_time=1641289972738">并发编程之synchronized详解</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-volatile&quot;&gt;&lt;a href=&quot;#2-volatile&quot; class=&quot;headerlink&quot; title=&quot;2. volatile&quot;&gt;&lt;/a&gt;2. volatile&lt;/h2&gt;&lt;h3 id=&quot;2-1-volatile的作用&quot;&gt;&lt;a href=&quot;#2-1-</summary>
      
    
    
    
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL为什么有时会选错索引</title>
    <link href="http://example.com/wiki/MySQL%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E4%BC%9A%E9%80%89%E9%94%99%E7%B4%A2%E5%BC%95/"/>
    <id>http://example.com/wiki/MySQL%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E4%BC%9A%E9%80%89%E9%94%99%E7%B4%A2%E5%BC%95/</id>
    <published>2021-12-07T11:48:16.000Z</published>
    <updated>2021-12-07T11:49:06.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL为什么有时会选错索引"><a href="#MySQL为什么有时会选错索引" class="headerlink" title="MySQL为什么有时会选错索引"></a>MySQL为什么有时会选错索引</h1><p>前面我们介绍过索引，你已经知道了在MySQL中一张表其实是可以支持多个索引的。但是，你 写SQL语句的时候，并没有主动指定使用哪个索引。也就是说，使用哪个索引是由MySQL来确 定的。</p><p>不知道你有没有碰到过这种情况，一条本来可以执行得很快的语句，却由于MySQL选错了索 引，而导致执行速度变得很慢?</p><p>我们一起来看一个例子吧。 我们先建一个简单的表，表里有a、b两个字段，并分别建上索引:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `a` int(11) DEFAULT NULL,</span><br><span class="line">  `b` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `a` (`a`),</span><br><span class="line">  KEY `b` (`b`)</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure><p>然后，我们往表t中插入10万行记录，取值按整数递增，即:(1,1,1)，(2,2,2)，(3,3,3) 直到 (100000,100000,100000)。</p><p>我是用存储过程来插入数据的，这里我贴出来方便你复现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter ;;</span><br><span class="line">create procedure idata()</span><br><span class="line">begin</span><br><span class="line">  declare i int;</span><br><span class="line">  set i=1;</span><br><span class="line">  while(i&lt;=100000)do</span><br><span class="line">    insert into t values(i, i, i);</span><br><span class="line">    set i=i+1;</span><br><span class="line">  end while;</span><br><span class="line">end;;</span><br><span class="line">delimiter ;</span><br><span class="line">call idata();</span><br></pre></td></tr></table></figure><p>接下来，我们分析一条SQL语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t where a between 10000 and 20000;</span><br></pre></td></tr></table></figure><p>你一定会说，这个语句还用分析吗，很简单呀，a上有索引，肯定是要使用索引a的。 你说得没错，图1显示的就是使用explain命令看到的这条语句的执行情况。</p><p><img src="https://oscimg.oschina.net/oscnet/up-45dfccea9790939067fb35e26f7155fce11.png"></p><p>从图1看上去，这条查询语句的执行也确实符合预期，key这个字段值是’a’，表示优化器选择了索</p><p>引a。</p><p>不过别急，这个案例不会这么简单。在我们已经准备好的包含了10万行数据的表上，我们再做 如下操作。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8a91fd7aff5e63d7798db49127b6d2fd6fd.png"></p><p>这里，session A的操作你已经很熟悉了，它就是开启了一个事务。随后，session B把数据都删</p><p>除后，又调用了 idata这个存储过程，插入了10万行数据。</p><p>这时候，session B的查询语句select * from t where a between 10000 and 20000就不会再选择索引a了。我们可以通过慢查询日志(slow log)来查看一下具体的执行情况。</p><p>为了说明优化器选择的结果是否正确，我增加了一个对照，即:使用force index(a)来让优化器强</p><p>制使用索引a(这部分内容，我还会在这篇文章的后半部分中提到)。 下面的三条SQL语句，就是这个实验过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set long_query_time=0;</span><br><span class="line">select * from t where a between 10000 and 20000; /*Q1*/</span><br><span class="line">select * from t force index(a) where a between 10000 and 20000;/*Q2*/</span><br></pre></td></tr></table></figure><ul><li>第一句，是将慢查询日志的阈值设置为0，表示这个线程接下来的语句都会被记录入慢查询日 志中;</li><li> 第二句，Q1是session B原来的查询;</li><li> 第三句，Q2是加了force index(a)来和session B原来的查询语句执行情况对比。</li></ul><p>如图3所示是这三条SQL语句执行完成后的慢查询日志。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6d0b7f98193f539ed902b463d2660b305b6.png"></p><p>可以看到，Q1扫描了10万行，显然是走了全表扫描，执行时间是40毫秒。Q2扫描了10001行，</p><p>执行了21毫秒。也就是说，我们在没有使用force index的时候，MySQL用错了索引，导致了更长的执行时间。</p><p>这个例子对应的是我们平常不断地删除历史数据和新增数据的场景。这时，MySQL竟然会选错索引，是不是有点奇怪呢?今天，我们就从这个奇怪的结果说起吧。</p><h2 id="优化器的逻辑"><a href="#优化器的逻辑" class="headerlink" title="优化器的逻辑"></a>优化器的逻辑</h2><p>在第一篇文章中，我们就提到过，选择索引是优化器的工作。</p><p>而优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。在数据库里面，<strong>扫描行数是影响执行代价的因素之一</strong>。扫描的行数越少，意味着访问磁盘数据的次数越 少，消耗的CPU资源越少。</p><p>当然，扫描行数并不是唯一的判断标准，<strong>优化器还会结合是否使用临时表、是否排序等因素进行综合判断。</strong></p><p>我们这个简单的查询语句并没有涉及到临时表和排序，所以MySQL选错索引肯定是在判断扫描行数的时候出问题了。</p><h3 id="那么，问题就是-扫描行数是怎么判断的"><a href="#那么，问题就是-扫描行数是怎么判断的" class="headerlink" title="那么，问题就是:扫描行数是怎么判断的?"></a><font color=red>那么，问题就是:扫描行数是怎么判断的?</font></h3><p> MySQL在真正开始执行语句之前，并不能精确地知道满足这个条件的记录有多少条，而只能根据统计信息来估算记录数。</p><p>这个统计信息就是索引的“区分度”。显然，一个索引上不同的值越多，这个索引的区分度就越好。</p><p>而一个索引上不同的值的个数，我们称之为“基数”(cardinality)。也就是说，这个基数越 大，索引的区分度越好。</p><p>我们可以使用<code>show index</code>方法，看到一个索引的基数。</p><p>如图4所示，就是表t的show index 的结果 。虽然这个表的每一行的三个字段值都是一样的，但是在统计信息中，这三个索引的基数值并不 同，而且其实都不准确。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6cf5345e7c9034a3953e7f1b4227f4cc8cc.png"></p><h3 id="那么，MySQL是怎样得到索引的基数的呢"><a href="#那么，MySQL是怎样得到索引的基数的呢" class="headerlink" title="那么，MySQL是怎样得到索引的基数的呢?"></a><strong>那么，MySQL是怎样得到索引的基数的呢?</strong></h3><p>这里，我给你简单介绍一下MySQL采样统计的方法。 为什么要采样统计呢?  因为把整张表取出来一行行统计，虽然可以得到精确的结果，但是代价太</p><p>高了，所以只能选择“采样统计”。 采样统计的时候，InnoDB默认会选择N个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。</p><p>而数据表是会持续更新的，索引统计信息也不会固定不变。所以，当变更的数据行数超过1/M的 时候，会自动触发重新做一次索引统计。</p><p>在MySQL中，有两种存储索引统计的方式，可以通过设置参数innodb_stats_persistent的值来选择:</p><ul><li>设置为on的时候，表示统计信息会持久化存储。这时，默认的N是20，M是10。 </li><li>设置为off的时候，表示统计信息只存储在内存中。这时，默认的N是8，M是16。</li></ul><p>由于是采样统计，所以不管N是20还是8，这个基数都是很容易不准的。 但，这还不是全部。</p><p>你可以从图4中看到，这次的索引统计值(cardinality列)虽然不够精确，但大体上还是差不多 的，选错索引一定还有别的原因。</p><p>其实索引统计只是一个输入，对于一个具体的语句来说，优化器还要判断，执行这个语句本身要 扫描多少行。</p><p>接下来，我们再一起看看优化器预估的，这两个语句的扫描行数是多少。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5ef0aee057f2071d38388ec66b71d8f2b01.png"></p><p>rows这个字段表示的是预计扫描行数。</p><p>其中，Q1的结果还是符合预期的，rows的值是104620;但是Q2的rows值是37116，偏差就大了。而图1中我们用explain命令看到的rows是只有10001行，是这个偏差误导了优化器的判断。</p><p>到这里，可能你的第一个疑问不是为什么不准，而是优化器为什么放着扫描37000行的执行计划不用，却选择了扫描行数是100000的执行计划呢?</p><p>这是因为，如果使用索引a，每次从索引a上拿到一个值，都要回到主键索引上查出整行数据， 这个代价优化器也要算进去的。</p><p>而如果选择扫描10万行，是直接在主键索引上扫描的，没有额外的代价。 优化器会估算这两个选择的代价，从结果看来，优化器认为直接扫描主键索引更快。当然，从执行时间看来，这个选择并不是最优的。 </p><blockquote><p><strong>使用普通索引需要把回表的代价算进去</strong></p></blockquote><p>在图1执行explain的时候，也考虑了这个策略的代价 ，但图1的选择是对的。也就是说，这个策略并没有问题。 所以冤有头债有主，MySQL选错索引，这件事儿</p><p>还得归咎到没能准确地判断出扫描行数。</p><p>既然是统计信息不对，那就修正。<code>analyze table t</code> 命令，可以用来重新统计索引信息。</p><p>我们来看 一下执行效果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-770cd142953256e165de08dd8f0e5c2fa3b.png"></p><p>所以在实践中，如果你发现explain的结果预估的rows值跟实际情况差距比较大，可以采用这个 方法来处理。</p><p>其实，如果只是索引统计不准确，通过analyze命令可以解决很多问题，但是前面我们说了，优 化器可不止是看扫描行数。</p><p>依然是基于这个表t，我们看看另外一个语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t where (a between 1 and 1000)  and (b between 50000 and 100000) order by b limit 1</span><br></pre></td></tr></table></figure><p>从条件上看，这个查询没有符合条件的记录，因此会返回空集合。 在开始执行这条语句之前，你可以先设想一下，如果你来选择索引，会选择哪一个呢? </p><p>为了便于分析，我们先来看一下a、b这两个索引的结构图。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6988e9b1a37bda5f715216d0131f2face47.png"></p><p>如果使用索引a进行查询，那么就是扫描索引a的前1000个值，然后取到对应的id，再到主键索</p><p>引上去查出每一行，然后根据字段b来过滤。显然这样需要扫描1000行。 如果使用索引b进行查询，那么就是扫描索引b的最后50001个值，与上面的执行过程相同，也是</p><p>需要回到主键索引上取值再判断，所以需要扫描50001行。</p><p>所以你一定会想，如果使用索引a的话，执行速度明显会快很多。那么，下面我们就来看看到底 是不是这么一回事儿。</p><p><img src="https://oscimg.oschina.net/oscnet/up-bbcf622b5cb93c997f77d3bd2c25cc9796a.png"></p><p>可以看到，返回结果中key字段显示，这次优化器选择了索引b，而rows字段显示需要扫描的行</p><p>数是50198。 从这个结果中，你可以得到两个结论:</p><ul><li>扫描行数的估计值依然不准确;</li><li>这个例子里MySQL又选错了索引</li></ul><h2 id="索引选择异常和处理"><a href="#索引选择异常和处理" class="headerlink" title="索引选择异常和处理"></a>索引选择异常和处理</h2><p>其实大多数时候优化器都能找到正确的索引，但偶尔你还是会碰到我们上面举例的这两种情况: 原本可以执行得很快的SQL语句，执行速度却比你预期的慢很多，你应该怎么办呢?</p><p>一种方法是，像我们第一个例子一样，采用force index强行选择一个索引。MySQL会根据 词法解析的结果分析出可能可以使用的索引作为候选项，然后在候选列表中依次判断每个索引需 要扫描多少行。如果force index指定的索引在候选索引列表中，就直接选择这个索引，不再评估 其他索引的执行代价。</p><p>我们来看看第二个例子。刚开始分析时，我们认为选择索引a会更好。现在，我们就来看看执行 效果:</p><p><img src="https://oscimg.oschina.net/oscnet/up-2953174a3c3cf4fdc4d9c8f2a8975a904cd.png"></p><p>可以看到，原本语句需要执行2.23秒，而当你使用force index(a)的时候，只用了0.05秒，比优化</p><p>器的选择快了40多倍。<br> 也就是说，优化器没有选择正确的索引，force index起到了“矫正”的作用。 不过很多程序员不喜欢使用force index，一来这么写不优美，二来如果索引改了名字，这个语句也得改，显得很麻烦。而且如果以后迁移到别的数据库的话，这个语法还可能会不兼容。</p><blockquote><p>但其实使用force index最主要的问题还是变更的及时性。因为选错索引的情况还是比较少出现 的，所以开发的时候通常不会先写上force index。而是等到线上出现问题的时候，你才会再去修 改SQL语句、加上force index。但是修改之后还要测试和发布，对于生产系统来说，这个过程不够敏捷。</p></blockquote><p>所以，数据库的问题最好还是在数据库内部来解决。那么，在数据库里面该怎样解决呢?</p><p>既然优化器放弃了使用索引a，说明a还不够合适，所以第二种方法就是，我们可以考虑修改 语句，引导MySQL使用我们期望的索引。比如，在这个例子里，显然把“orderbyblimit1”改 成 “order by b,a limit 1” ，语义的逻辑是相同的。</p><p>我们来看看改之后的效果:</p><p><img src="https://oscimg.oschina.net/oscnet/up-697b792f8cd9e11b702ee9c5d2b8362f152.png"></p><p>之前优化器选择使用索引b，是因为它认为使用索引b可以避免排序(b本身是索引，已经是有序</p><p>的了，如果选择索引b的话，不需要再做排序，只需要遍历)，所以即使扫描行数多，也判定为 代价更小。</p><p>现在order by b,a 这种写法，要求按照b,a排序，就意味着使用这两个索引都需要排序。因此，扫 描行数成了影响决策的主要条件，于是此时优化器选了只需要扫描1000行的索引a。</p><p>当然，这种修改并不是通用的优化手段，只是刚好在这个语句里面有limit 1，因此如果有满足条 件的记录， order by b limit 1和order by b,a limit 1 都会返回b是最小的那一行，逻辑上一致，才 可以这么做。</p><p>如果你觉得修改语义这件事儿不太好，这里还有一种改法，图11是执行效果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-bb1eee544d4ffe4a4dd3a74e15f4aa08538.png"></p><p>在这个例子里，我们用limit 100让优化器意识到，使用b索引代价是很高的。其实是我们根据<strong>数据特征诱导了一下优化器</strong>，也不具备通用性。</p><p><strong>第三种方法是，在有些场景下，我们可以新建一个更合适的索引，来提供给优化器做选 择，或删掉误用的索引。</strong></p><p>不过，在这个例子中，我没有找到通过新增索引来改变优化器行为的方法。这种情况其实比较 少，尤其是经过DBA索引优化过的库，再碰到这个bug，找到一个更合适的索引一般比较难。</p><p>如果我说还有一个方法是删掉索引b，你可能会觉得好笑。但实际上我碰到过两次这样的例子， 最终是DBA跟业务开发沟通后，发现这个优化器错误选择的索引其实根本没有必要存在，于是 就删掉了这个索引，优化器也就重新选择到了正确的索引。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>前面我们在构造第一个例子的过程中，通过session A的配合， 让session B删除数据后又重新插入了一遍数据，然后就发现explain结果中，rows字段从10001 变成37000多。</p><p>而如果没有session A的配合，只是单独执行delete from t 、call idata()、explain这三句话，会看 到rows字段其实还是10000左右。你可以自己验证一下这个结果。</p><p>这是为什么呢？</p><p>为什么经过这个操作序列，explain的结果就不对了?这 里，我来为你分析一下原因。</p><p>delete 语句删掉了所有的数据，然后再通过call idata()插入了10万行数据，看上去是覆盖了原来 的10万行。</p><p>但是，<strong>session A开启了事务并没有提交，所以之前插入的10万行数据是不能删除的</strong>。这样，之前的数据每一行数据都有两个版本，旧版本是delete之前的数据，新版本是标记为deleted的数 据。</p><p>这样，索引a上的数据其实就有两份。</p><p>然后你会说，不对啊，主键上的数据也不能删，那没有使用force index的语句，使用explain命令 看到的扫描行数为什么还是100000左右?(潜台词，如果这个也翻倍，也许优化器还会认为选 字段a作为索引更合适)</p><p>是的，不过这个是主键，主键是直接按照表的行数来估计的。而表的行数，优化器直接用的是 show table status的值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL为什么有时会选错索引&quot;&gt;&lt;a href=&quot;#MySQL为什么有时会选错索引&quot; class=&quot;headerlink&quot; title=&quot;MySQL为什么有时会选错索引&quot;&gt;&lt;/a&gt;MySQL为什么有时会选错索引&lt;/h1&gt;&lt;p&gt;前面我们介绍过索引，你已经知道了在M</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>字符串字段如何创建索引</title>
    <link href="http://example.com/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95/"/>
    <id>http://example.com/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95/</id>
    <published>2021-12-07T11:46:33.000Z</published>
    <updated>2021-12-07T11:47:11.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="怎么给字符串字段添加索引"><a href="#怎么给字符串字段添加索引" class="headerlink" title="怎么给字符串字段添加索引"></a>怎么给字符串字段添加索引</h1><p>现在，几乎所有的系统都支持邮箱登录，如何在邮箱这样的字段上建立合理的索引，是我们今天 要讨论的问题。</p><p>假设，你现在维护一个支持邮箱登录的系统，用户表是这么定义的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> SUser(</span><br><span class="line">ID <span class="type">bigint</span> unsigned <span class="keyword">primary</span> key,</span><br><span class="line">email <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">...</span><br><span class="line">)engine<span class="operator">=</span>innodb;</span><br></pre></td></tr></table></figure><p>由于要使用邮箱登录，所以业务代码中一定会出现类似于这样的语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> f1, f2 <span class="keyword">from</span> SUser <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure><p>从第4和第5篇讲解索引的文章中，我们可以知道，如果email这个字段上没有索引，那么这个语 句就只能做全表扫描。</p><p>同时，MySQL是支持前缀索引的，也就是说，你可以定义字符串的一部分作为索引。默认地，<strong>如果你创建索引的语句不指定前缀长度，那么索引就会包含整个字符串。</strong></p><p>比如，这两个在email字段上创建索引的语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table SUser add index index1(email);</span><br><span class="line">或</span><br><span class="line">mysql&gt; alter table SUser add index index2(email(6));</span><br></pre></td></tr></table></figure><p>第一个语句创建的index1索引里面，包含了每个记录的整个字符串;而第二个语句创建的index2 索引里面，对于每个记录都是只取前6个字节。</p><p>那么，这两种不同的定义在数据结构和存储上有什么区别呢?如图2和3所示，就是这两个索引 的示意图。</p><p><img src="https://oscimg.oschina.net/oscnet/up-fa537bde10fbcdecaf1b58576ec108c66f9.png"></p><p>索引2 👇</p><p><img src="https://oscimg.oschina.net/oscnet/up-68ada8a9dc6378cf9e9b3d35b9aab0a0bef.png"></p><p>从图中你可以看到，由于email(6)这个索引结构中每个邮箱字段都只取前6个字节(即:zhangs)，所以占用的空间会更小，这就是使用前缀索引的优势。</p><p>但，这同时带来的损失是，<strong>可能会增加额外的记录扫描次数</strong>。</p><p>接下来，我们再看看下面这个语句，在这两个索引定义下分别是怎么执行的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email <span class="keyword">from</span> SUser <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;zhangssxyz@xxx.com&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>如果使用的是index1(即email整个字符串的索引结构)，执行顺序是这样的:</p><ul><li><p>从index1索引树找到满足索引值是’<a href="mailto:&#122;&#x68;&#x61;&#x6e;&#x67;&#115;&#115;&#120;&#121;&#x7a;&#x40;&#120;&#120;&#x78;&#x2e;&#x63;&#111;&#x6d;">&#122;&#x68;&#x61;&#x6e;&#x67;&#115;&#115;&#120;&#121;&#x7a;&#x40;&#120;&#120;&#x78;&#x2e;&#x63;&#111;&#x6d;</a>’的这条记录，取得ID2的值;</p></li><li><p>到主键上查到主键值是ID2的行，判断email的值是正确的，将这行记录加入结果集;</p></li><li><p>取index1索引树上刚刚查到的位置的下一条记录，发现已经不满足 email=‘<a href="mailto:&#122;&#x68;&#x61;&#110;&#103;&#x73;&#x73;&#x78;&#x79;&#122;&#x40;&#x78;&#120;&#120;&#x2e;&#99;&#x6f;&#109;">&#122;&#x68;&#x61;&#110;&#103;&#x73;&#x73;&#x78;&#x79;&#122;&#x40;&#x78;&#120;&#120;&#x2e;&#99;&#x6f;&#109;</a>’的条件了，循环结束。</p></li></ul><p>这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</p></li><li><p>如果使用的是index2(即email(6)索引结构)，执行顺序是这样的:</p><ul><li>从index2索引树找到满足索引值是’zhangs’的记录，找到的第一个是ID1;</li><li>到主键上查到主键值是ID1的行，判断出email的值不是’<a href="mailto:&#x7a;&#x68;&#x61;&#x6e;&#103;&#115;&#115;&#x78;&#x79;&#122;&#64;&#x78;&#x78;&#120;&#x2e;&#x63;&#111;&#x6d;">&#x7a;&#x68;&#x61;&#x6e;&#103;&#115;&#115;&#x78;&#x79;&#122;&#64;&#x78;&#x78;&#120;&#x2e;&#x63;&#111;&#x6d;</a>’，这行记录丢 弃;</li><li>取index2上刚刚查到的位置的下一条记录，发现仍然是’zhangs’，取出ID2，再到ID索引上取 整行然后判断，这次值对了，将这行记录加入结果集;</li><li>重复上一步，直到在idxe2上取到的值不是’zhangs’时，循环结束。</li></ul><p>在这个过程中，要回主键索引取4次数据，也就是扫描了4行。</p></li></ul><p><strong>通过这个对比，你很容易就可以发现，使用前缀索引后，可能会导致查询语句读数据的次数变多。</strong></p><blockquote><p>但是，对于这个查询语句来说，如果你定义的index2不是email(6)而是email(7)，也就是说取 email字段的前7个字节来构建索引的话，即满足前缀’zhangss’的记录只有一个，也能够直接查到 ID2，只扫描一行就结束了。</p></blockquote><p><font color=blue>也就是说使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查 询成本。</font></p><h2 id="如何定义前缀索引的长度呢"><a href="#如何定义前缀索引的长度呢" class="headerlink" title="如何定义前缀索引的长度呢"></a>如何定义前缀索引的长度呢</h2><p>于是，你就有个问题:当要给字符串创建前缀索引时，有什么方法能够确定我应该使用多长的前缀呢?</p><p>实际上，我们在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的 键值越少。因此，我们可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。</p><p>首先，你可以使用下面这个语句，算出这个列上有多少个不同的值:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> email) <span class="keyword">as</span> L <span class="keyword">from</span> SUser;</span><br></pre></td></tr></table></figure><p>然后，依次选取不同长度的前缀来看这个值，比如我们要看一下4~7个字节的前缀索引，可以用 这个语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">4</span>))<span class="keyword">as</span> L4, <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">5</span>))<span class="keyword">as</span> L5, <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">6</span>))<span class="keyword">as</span> L6, <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(email,<span class="number">7</span>))<span class="keyword">as</span> L7,</span><br><span class="line"><span class="keyword">from</span> SUser;</span><br></pre></td></tr></table></figure><p>当然，使用前缀索引很可能会损失区分度，所以你需要预先设定一个可以接受的损失比例，比如 5%。然后，在返回的L4~L7中，找出不小于 L * 95%的值，假设这里L6、L7都满足，你就可以 选择前缀长度为6。</p><h2 id="前缀索引对覆盖索引的影响"><a href="#前缀索引对覆盖索引的影响" class="headerlink" title="前缀索引对覆盖索引的影响"></a>前缀索引对覆盖索引的影响</h2><p>前面我们说了使用前缀索引可能会增加扫描行数，这会影响到性能。其实，前缀索引的影响不止 如此，我们再看一下另外一个场景。</p><p>你先来看看这个SQL语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,email <span class="keyword">from</span> SUser <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;zhangssxyz@xxx.com&#x27;</span>;</span><br></pre></td></tr></table></figure><p>与前面例子中的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email <span class="keyword">from</span> SUser <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;zhangssxyz@xxx.com&#x27;</span>;</span><br></pre></td></tr></table></figure><p>相比，这个语句只要求返回id和email字段。</p><p>所以，如果使用index1(即email整个字符串的索引结构)的话，可以利用覆盖索引，从index1查 到结果后直接就返回了，不需要回到ID索引再去查一次。而如果使用index2(即email(6)索引结 构)的话，就不得不回到ID索引再去判断email字段的值。</p><p><strong>即使你将index2的定义修改为email(18)的前缀索引，这时候虽然index2已经包含了所有的信息， 但InnoDB还是要回到id索引再查一下，因为系统并不确定前缀索引的定义是否截断了完整信息。</strong></p><p><font color=red>也就是说，使用前缀索引就用不上覆盖索引对查询性能的优化了，这也是你在选择是否使用前缀 索引时需要考虑的一个因素。</font></p><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><p>对于类似于邮箱这样的字段来说，使用前缀索引的效果可能还不错。但是，遇到前缀的区分度不够好的情况时，我们要怎么办呢?</p><p>比如，我们国家的身份证号，一共18位，其中前6位是地址码，所以同一个县的人的身份证号前</p><p>6位一般会是相同的。 假设你维护的数据库是一个市的公民信息系统，这时候如果对身份证号做长度为6的前缀索引的话，这个索引的区分度就非常低了。 按照我们前面说的方法，可能你需要创建长度为12以上的前缀索引，才能够满足区分度要求。</p><p>但是，索引选取的越长，占用的磁盘空间就越大，相同的数据页能放下的索引值就越少，搜索的 效率也就会越低。</p><p>那么，如果我们能够确定业务需求里面只有按照身份证进行等值查询的需求，还有没有别的处理 方法呢?这种方法，既可以占用更小的空间，也能达到相同的查询效率。</p><p>答案是，有的。</p><h3 id="第一种方式是使用倒序存储"><a href="#第一种方式是使用倒序存储" class="headerlink" title="第一种方式是使用倒序存储"></a>第一种方式是使用倒序存储</h3><p>如果你存储身份证号的时候把它倒过来存，每次查询的时候，你 可以这么写:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> field_list <span class="keyword">from</span> t <span class="keyword">where</span> id_card <span class="operator">=</span> reverse(<span class="string">&#x27;input_id_card_string&#x27;</span>);</span><br></pre></td></tr></table></figure><p>由于身份证号的最后6位没有地址码这样的重复逻辑，所以最后这6位很可能就提供了足够的区 分度。当然了，实践中你不要忘记使用count(distinct)方法去做个验证。</p><h3 id="第二种方式是使用hash字段"><a href="#第二种方式是使用hash字段" class="headerlink" title="第二种方式是使用hash字段"></a>第二种方式是使用hash字段</h3><p>你可以在表上再创建一个整数字段，来保存身份证的校验码， 同时在这个字段上创建索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table t add id_card_crc int unsigned, add index(id_card_crc);</span><br></pre></td></tr></table></figure><p>然后每次插入新记录的时候，都同时用crc32()这个函数得到校验码填到这个新字段。由于校验码 可能存在冲突，也就是说两个不同的身份证号通过crc32()函数得到的结果可能是相同的，所以你 的查询语句where部分要判断id_card的值是否精确相同。</p><p>这样，<strong>索引的长度变成了4个字节</strong>，比原来小了很多。</p><p>接下来，我们再一起看看使用倒序存储和使用hash字段这两种方法的异同点。</p><h3 id="首先，它们的相同点是，"><a href="#首先，它们的相同点是，" class="headerlink" title="首先，它们的相同点是，"></a>首先，它们的相同点是，</h3><p>都不支持范围查询。倒序存储的字段上创建的索引是按照倒序字符串的 方式排序的，已经没有办法利用索引方式查出身份证号码在[ID_X, ID_Y]的所有市民了。同样 地，hash字段的方式也只能支持等值查询。</p><h3 id="它们的区别，"><a href="#它们的区别，" class="headerlink" title="它们的区别，"></a>它们的区别，</h3><p>主要体现在以下三个方面:</p><ol><li>从占用的额外空间来看，倒序存储方式在主键索引上，不会消耗额外的存储空间，而hash字 段方法需要增加一个字段。当然，倒序存储方式使用4个字节的前缀长度应该是不够的，如 果再长一点，这个消耗跟额外这个hash字段也差不多抵消了。</li><li>在CPU消耗方面，倒序方式每次写和读的时候，都需要额外调用一次reverse函数，而hash 字段的方式需要额外调用一次crc32()函数。如果只从这两个函数的计算复杂度来看的 话，reverse函数额外消耗的CPU资源会更小些。</li><li>从查询效率上看，使用hash字段方式的查询性能相对更稳定一些。因为crc32算出来的值虽 然有冲突的概率，但是概率非常小，可以认为每次查询的平均扫描行数接近1。而倒序存储 方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在今天这篇文章中，我跟你聊了聊字符串字段创建索引的场景。我们来回顾一下，你可以使用的 方式有:</p><ol><li>直接创建完整索引，这样可能比较占用空间;</li><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引;</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题;</li><li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描。</li></ol><p>在实际应用中，你要根据业务字段的特点选择使用哪种方式。</p><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>好了，又到了最后的问题时间。</p><p>如果你在维护一个学校的学生信息数据库，学生登录名的统一格式是”学号@gmail.com”, 而学号的规则是:十五位的数字，其中前三位是所在城市编号、第四到第六位是学校编号、第七位到第 十位是入学年份、最后五位是顺序编号。</p><p>系统登录的时候都需要学生输入登录名和密码，验证正确后才能继续使用系统。就只考虑登录验证这个行为的话，你会怎么设计这个登录名的索引呢?</p><p>由于这个学号的规则，无论是正向还是反向的前缀索引，重复度都比较高。因为维护的只是一个学校的，因此前面6位（其中，前三位是所在城市编号、第四到第六位是学校编号）其实是固定的，邮箱后缀都是@gamil.com，因此可以只存入学年份加顺序编号，它们的长度是9位。</p><p>而其实在此基础上，可以用数字类型来存这9位数字。比如201100001，这样只需要占4个字节。其实这个就是一种hash，只是它用了最简单的转换规则：字符串转数字的规则，而刚好我们设定的这个背景，可以保证这个转换后结果的唯一性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;怎么给字符串字段添加索引&quot;&gt;&lt;a href=&quot;#怎么给字符串字段添加索引&quot; class=&quot;headerlink&quot; title=&quot;怎么给字符串字段添加索引&quot;&gt;&lt;/a&gt;怎么给字符串字段添加索引&lt;/h1&gt;&lt;p&gt;现在，几乎所有的系统都支持邮箱登录，如何在邮箱这样的字段上建</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>innodb是如何处理脏页的</title>
    <link href="http://example.com/wiki/innodb%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%84%8F%E9%A1%B5%E7%9A%84/"/>
    <id>http://example.com/wiki/innodb%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%84%8F%E9%A1%B5%E7%9A%84/</id>
    <published>2021-12-07T11:45:11.000Z</published>
    <updated>2021-12-07T11:46:04.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的mysql为什么会抖一下"><a href="#我的mysql为什么会抖一下" class="headerlink" title="我的mysql为什么会抖一下"></a>我的mysql为什么会抖一下</h1><blockquote><p>innodb引擎是如何处理 <strong>脏页</strong> 的</p></blockquote><p>平时的工作中，不知道你有没有遇到过这样的场景，一条SQL语句，正常执行的时候特别快，但 是有时也不知道怎么回事，它就会变得特别慢，并且这样的场景很难复现，它不只随机，而且持续时间还很短。</p><h2 id="你的SQL语句为什么变“慢”了"><a href="#你的SQL语句为什么变“慢”了" class="headerlink" title="你的SQL语句为什么变“慢”了"></a>你的SQL语句为什么变“慢”了</h2><p>在前面《一条SQL更新语句是如何执行的?》中，介绍了WAL机制。现在你知道了，InnoDB在处理更新语句的时候，只做了写日志这一个磁盘操作。这个日志 叫作redo log(重做日志)，也就是《孔乙己》里咸亨酒店掌柜用来记账的粉板，在更新内存写 完redo log后，就返回给客户端，本次更新成功。</p><p>做下类比的话，掌柜记账的账本是数据文件，记账用的粉板是日志文件(redo log)，掌柜的记忆就是内存。</p><p>掌柜总要找时间把账本更新一下，这对应的就是把内存里的数据写入磁盘的过程，术语就是 <strong>flush</strong>。在这个flush操作执行之前，孔乙己的赊账总额，其实跟掌柜手中账本里面的记录是不一 致的。因为孔乙己今天的赊账金额还只在粉板上，而账本里的记录是老的，还没把今天的赊账算进去。</p><ul><li><p>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。</p></li><li><p>内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。</p></li></ul><p><strong>不论是脏页还是干净页，都在内存中</strong>。在这个例子里，内存对应的就是掌柜的记忆。</p><p>接下来，我们用一个示意图来展示一下“孔乙己赊账”的整个操作过程。假设原来孔乙己欠账10 文，这次又要赊9文。</p><p><img src="https://oscimg.oschina.net/oscnet/up-81108822d1cb4643a5d86440190c0790bc6.png"></p><p>回到文章开头的问题，你不难想象，平时执行很快的更新操作，其实就是在写内存和日志，而</p><p><strong>MySQL偶尔“抖”一下的那个瞬间，可能就是在刷脏页(flush)。</strong></p><h3 id="那么，什么情况会引发数据库的flush过程呢"><a href="#那么，什么情况会引发数据库的flush过程呢" class="headerlink" title="那么，什么情况会引发数据库的flush过程呢?"></a>那么，什么情况会引发数据库的flush过程呢?</h3><p>我们还是继续用咸亨酒店掌柜的这个例子，想一想:掌柜在什么情况下会把粉板上的赊账记录改</p><p>到账本上?</p><h4 id="第一种场景"><a href="#第一种场景" class="headerlink" title="第一种场景"></a>第一种场景</h4><p>粉板满了，记不下了。这时候如果再有人来赊账，掌柜就只得放下手里的活 儿，将粉板上的记录擦掉一些，留出空位以便继续记账。当然在擦掉之前，他必须先将正确 的账目记录到账本中才行。</p><p> 这个场景，对应的就是InnoDB的redo log写满了。这时候系统会停止所有更新操作，把 checkpoint往前推进，redo log留出空间可以继续写。我在第二讲画了一个redo log的示意 图，这里我改成环形，便于大家理解。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4e9f7569d6266f23dd6ea7df11fd9a1bc82.png"></p><p>checkpoint可不是随便往前修改一下位置就可以的。比如图2中 👆，把checkpoint位置从CP推进到CP’，就需要将两个点之间的日志(浅绿色部分)，对应的所有脏页都flush到磁盘上。之后，图 中从write pos到CP’之间就是可以再写入的redo log的区域。</p><h4 id="第二种场景"><a href="#第二种场景" class="headerlink" title="第二种场景"></a>第二种场景</h4><p>这一天生意太好，要记住的事情太多，掌柜发现自己快记不住了，赶紧找出 账本把孔乙己这笔账先加进去。 </p><p>这种场景，对应的就是系统内存不足。当需要新的内存页，而内存不够用的时候，就要淘汰一些数据页，空出内存给别的数据页使用。如果淘汰的是“脏页”，就要先将脏页写到磁盘。 </p><p>你一定会说，这时候难道不能直接把内存淘汰掉，下次需要请求的时候，从磁盘读入数据页，然后拿redo log出来应用不就行了? 这里其实是从性能考虑的。</p><p><strong>如果刷脏页一定会写盘， 就保证了每个数据页有两种状态:</strong></p><ul><li><p>一种是内存里存在，内存里就肯定是正确的结果，直接返回; </p></li><li><p>另一种是内存里没有数据，就可以肯定数据文件上是正确的结果，读入内存后返回。 这样的效率最高。</p></li></ul><h4 id="第三种场景"><a href="#第三种场景" class="headerlink" title="第三种场景"></a>第三种场景</h4><p>生意不忙的时候，或者打烊之后。这时候柜台没事，掌柜闲着也是闲着，不 如更新账本。 </p><p>这种场景，对应的就是MySQL认为系统“空闲”的时候。当然，MySQL“这家酒店”的生意好起 来可是会很快就能把粉板记满的，所以“掌柜”要合理地安排时间，即使是“生意好”的时候，也 要见缝插针地找时间，只要有机会就刷一点“脏页”。</p><h4 id="第四种场景"><a href="#第四种场景" class="headerlink" title="第四种场景"></a>第四种场景</h4><p>年底了咸亨酒店要关门几天，需要把账结清一下。这时候掌柜要把所有账都 记到账本上，这样过完年重新开张的时候，就能就着账本明确账目情况了。 </p><p>这种场景，对应的就是MySQL正常关闭的情况。这时候，MySQL会把内存的脏页都flush到磁 盘上，这样下次MySQL启动的时候，就可以直接从磁盘上读数据，启动速度会很快。</p><h4 id="接下来，你可以分析一下上面四种场景对性能的影响。"><a href="#接下来，你可以分析一下上面四种场景对性能的影响。" class="headerlink" title="接下来，你可以分析一下上面四种场景对性能的影响。"></a>接下来，你可以分析一下上面四种场景对性能的影响。</h4><p>其中，第三种情况是属于MySQL空闲时的操作，这时系统没什么压力，而第四种场景是数据库 本来就要关闭了。这两种情况下，你不会太关注“性能”问题。所以这里，我们主要来分析一下前 两种场景下的性能问题。</p><p>第一种是“<strong>redo log写满了，要flush脏页</strong>”，这种情况是InnoDB要尽量避免的。因为出现这种情况 的时候，整个系统就不能再接受更新了，所有的更新都必须堵住。如果你从监控上看，这时候更 新数会跌为0。</p><p>第二种是“内存不够用了，要先将脏页写到磁盘”，这种情况其实是常态。</p><p>InnoDB用缓冲池 (buffer pool)管理内存，缓冲池中的内存页有三种状态:</p><ul><li>第一种是，还没有使用的;</li><li>第二种是，使用了并且是干净页;</li><li>第三种是，使用了并且是脏页。</li></ul><p><strong>InnoDB的策略是尽量使用内存，因此对于一个长时间运行的库来说，未被使用的页面很少。</strong></p><p>而当要读入的数据页没有在内存的时候，就必须到缓冲池中申请一个数据页。</p><p>这时候只能把最久不使用的数据页从内存中淘汰掉: </p><ul><li><p>如果要淘汰的是一个干净页，就直接释放出来复用;</p></li><li><p>但如果是脏页呢，就必须将脏页先刷到磁盘，变成干净页后才能复用。 所以，刷脏页虽然是常态，但是出现以下这两种情况，都是会明显影响性能的:</p><ul><li><p>一个查询要淘汰的脏页个数太多，会导致查询的响应时间明显变长;</p></li><li><p>日志写满，更新全部堵住，写性能跌为0，这种情况对敏感业务来说，是不能接受的。 </p></li></ul><p>所以，InnoDB需要有控制脏页比例的机制，来尽量避免上面的这两种情况。</p></li></ul><h2 id="InnoDB刷脏页的控制策略"><a href="#InnoDB刷脏页的控制策略" class="headerlink" title="InnoDB刷脏页的控制策略"></a>InnoDB刷脏页的控制策略</h2><p>接下来，我就来和你说说InnoDB脏页的控制策略，以及和这些策略相关的参数。</p><p>首先，<strong>你要正确地告诉InnoDB所在主机的IO能力</strong>，这样InnoDB才能知道需要全力刷脏页的时 候，可以刷多快。</p><p>这就要用到 <code>innodb_io_capacity</code> 这个参数了，它会告诉InnoDB你的磁盘能力。这个值我<strong>建议你设置成磁盘的IOPS</strong>。</p><p>磁盘的IOPS可以通过fio这个工具来测试，下面的语句是我用来测试磁盘随机 读写的命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -filename=$filename -direct=1 -iodepth 1 -thread -rw=randrw -ioengine=psync -bs=16k -size=500M -numjobs=10 -runtime=10 -group_reporting -name=mytest </span><br></pre></td></tr></table></figure><p>其实，因为没能正确地设置innodb_io_capacity参数，而导致的性能问题也比比皆是。之前，就曾有其他公司的开发负责人找我看一个库的性能问题，<strong>说MySQL的写入速度很慢，TPS很低， 但是数据库主机的IO压力并不大</strong>。经过一番排查，发现罪魁祸首就是这个参数的设置出了问题。</p><p>他的主机磁盘用的是SSD，但是innodb_io_capacity的值设置的是300。于是，InnoDB认为这个 系统的能力就这么差，所以刷脏页刷得特别慢，甚至比脏页生成的速度还慢，这样就造成了<strong>脏页累积</strong>，影响了查询和更新性能。</p><p>虽然我们现在已经定义了“全力刷脏页”的行为，但平时总不能一直是全力刷吧? 毕竟磁盘能力不能只用来刷脏页，还需要服务用户请求。所以接下来，我们就一起看看InnoDB怎么控制引擎按 照“全力”的百分比来刷脏页。</p><h3 id="根据我前面提到的知识点，试想一下，如果你来设计策略控制刷脏页的速度，会参考哪些因素呢"><a href="#根据我前面提到的知识点，试想一下，如果你来设计策略控制刷脏页的速度，会参考哪些因素呢" class="headerlink" title="根据我前面提到的知识点，试想一下，如果你来设计策略控制刷脏页的速度，会参考哪些因素呢?"></a>根据我前面提到的知识点，试想一下，如果你来设计策略控制刷脏页的速度，会参考哪些因素呢?</h3><p>这个问题可以这么想，如果刷太慢，会出现什么情况?  首先是内存脏页太多，其次是redo log写满。</p><p>所以，InnoDB的刷盘速度就是要参考这两个因素:一个是脏页比例，一个是redo log写盘速度。</p><p>InnoDB会根据这两个因素先单独算出两个数字。 </p><p>参数 <code>innodb_max_dirty_pages_pct</code> 是脏页比例上限，默认值是75%。InnoDB会根据当前的脏页比例(假设为M)，算出一个范围在0到100之间的数字，计算这个数字的伪代码类似这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F1(M) &#123;</span><br><span class="line">  if M&gt;=innodb_max_dirty_pages_pct then</span><br><span class="line">      return 100;</span><br><span class="line">  return 100*M/innodb_max_dirty_pages_pct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InnoDB每次写入的日志都有一个序号，当前写入的序号跟checkpoint对应的序号之间的差值， 我们假设为N。InnoDB会根据这个N算出一个范围在0到100之间的数字，这个计算公式可以记为 F2(N)。F2(N)算法比较复杂，你只要知道N越大，算出来的值越大就好了。</p><p>然后，根据上述算得的F1(M)和F2(N)两个值，取其中较大的值记为R，之后引擎就可以按照 <code>innodb_io_capacity</code> 定义的能力**乘以R%**来控制刷脏页的速度。</p><p>上述的计算流程比较抽象，不容易理解，所以我画了一个简单的流程图。图中的F1、F2就是上 面我们通过脏页比例和redo log写入速度算出来的两个值。</p><p><img src="https://oscimg.oschina.net/oscnet/up-20c9667918f63b5caa0ca3397366d407a73.png"></p><p>现在你知道了，InnoDB会在后台刷脏页，而刷脏页的过程是要将内存页写入磁盘。</p><p>所以，无论是你的查询语句在需要内存的时候可能要求淘汰一个脏页，还是由于刷脏页的逻辑会占用IO资源并可能影响到了你的更新语句，都可能是造成你从业务端感知到MySQL“抖”了一下的原因。</p><p>要尽量避免这种情况，你就要合理地设置innodb_io_capacity的值，并且平时要多关注脏页比例，<strong>不要让它经常接近75%。</strong></p><p>其中，脏页比例是通过<code>Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total</code>得到 的，具体的命令参考下面的代码:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> VARIABLE_VALUE <span class="keyword">into</span> <span class="variable">@a</span> <span class="keyword">from</span> global_status <span class="keyword">where</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_dirty&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> VARIABLE_VALUE <span class="keyword">into</span> <span class="variable">@b</span> <span class="keyword">from</span> global_status <span class="keyword">where</span> VARIABLE_NAME <span class="operator">=</span> <span class="string">&#x27;Innodb_buffer_pool_pages_total&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@a</span><span class="operator">/</span><span class="variable">@b</span>;</span><br></pre></td></tr></table></figure><p>接下来，我们再看一个有趣的策略。</p><p>一旦一个查询请求需要在执行过程中先flush掉一个脏页时，这个查询就可能要比平时慢了。而MySQL中的一个机制，可能让你的查询会更慢：在准备刷一个脏页的时候，如果这个数据页旁边的数据页刚好是脏页，就会把这个“邻居”也带着一起刷掉；而且这个把“邻居”拖下水的逻辑还可以继续蔓延，也就是对于每个邻居数据页，如果跟它相邻的数据页也还是脏页的话，也会被放到一起刷。</p><p>在InnoDB中，<code>innodb_flush_neighbors</code> 参数就是用来控制这个行为的，值为1的时候会有上述的“连坐”机制，值为0时表示不找邻居，自己刷自己的。</p><p>找“邻居”这个优化在机械硬盘时代是很有意义的，可以减少很多随机IO。机械硬盘的随机IOPS一般只有几百，相同的逻辑操作减少随机IO就意味着系统性能的大幅度提升。</p><p>而如果使用的是SSD这类IOPS比较高的设备的话，<strong>我就建议你把innodb_flush_neighbors的值设置成0</strong>。因为这时候IOPS往往不是瓶颈，而“只刷自己”，就能更快地执行完必要的刷脏页操作，减少SQL语句响应时间。</p><p><strong>在MySQL 8.0中，innodb_flush_neighbors参数的默认值已经是0了。</strong></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>今天这篇文章，我延续第2篇中介绍的WAL的概念，和你解释了这个机制后续需要的刷脏页操作和执行时机。利用WAL技术，数据库将随机写转换成了顺序写，大大提升了数据库的性能。</p><p>但是，由此也带来了内存脏页的问题。脏页会被后台线程自动flush，也会由于数据页淘汰而触发flush，而刷脏页的过程由于会占用资源，可能会让你的更新和查询语句的响应时间长一些。在文章里，我也给你介绍了控制刷脏页的方法和对应的监控方式。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一个内存配置为128GB、innodb_io_capacity设置为20000的大规格实例，正常会建议你将redo log设置成4个1GB的文件。</p><p>但如果你在配置的时候不慎将redo log设置成了1个100M的文件，会发生什么情况呢？又为什么会出现这样的情况呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我的mysql为什么会抖一下&quot;&gt;&lt;a href=&quot;#我的mysql为什么会抖一下&quot; class=&quot;headerlink&quot; title=&quot;我的mysql为什么会抖一下&quot;&gt;&lt;/a&gt;我的mysql为什么会抖一下&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;innodb引擎是</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>一条更新语句是如何执行的</title>
    <link href="http://example.com/wiki/%E4%B8%80%E6%9D%A1%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"/>
    <id>http://example.com/wiki/%E4%B8%80%E6%9D%A1%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/</id>
    <published>2021-12-06T10:47:01.000Z</published>
    <updated>2021-12-06T10:47:33.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一条更新语句是如何执行的"><a href="#一条更新语句是如何执行的" class="headerlink" title="一条更新语句是如何执行的"></a>一条更新语句是如何执行的</h1><p>前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还 记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后 到达存储引擎。</p><p>那么，一条更新语句的执行流程又是怎样的呢?</p><p>之前你可能经常听DBA同事说，MySQL可以恢复到半个月内任意一秒的状态，惊叹的同时，你 是不是心中也会不免会好奇，这是怎样做到的呢?</p><p>我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键ID和一个 整型字段c:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table T(ID int primary key, c int);</span><br></pre></td></tr></table></figure><p>如果要将ID=2这一行的值加1，SQL语句就会这么写:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure><p>前面我有跟你介绍过SQL语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看 这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。</p><p><img src="https://oscimg.oschina.net/oscnet/up-661c52fa2ca85182e119823265a003d152b.png" alt="MySQL的逻辑架构图"></p><p>你执行语句前要先连接数据库，这是连接器的工作。</p><p>前面我们说过，<font color=blue>在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会 把表T上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</font></p><p>接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用ID这个索引。 然后，执行器负责具体执行，找到这一行，然后更新。</p><p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主 角:<strong>redo log(重做日志)和 binlog(归档日志)<strong>。如果接触MySQL，那这两个词肯定是绕不过 的，我后面的内容里也会不断地和你强调。</strong>不过话说回来，redo log和binlog在设计上有很多有 意思的地方，这些设计思路也可以用到你自己的程序里。</strong></p><h2 id="重要的日志模块-redo-log"><a href="#重要的日志模块-redo-log" class="headerlink" title="重要的日志模块:redo log"></a>重要的日志模块:redo log</h2><p>不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记 录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会 有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。</p><p>如果有人要赊账或者还账的话，掌柜一般有两种做法:</p><ul><li><p>一种做法是直接把账本翻出来，把这次赊的账加上去或者扣除掉;</p></li><li><p>另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算。</p></li></ul><p>在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到 这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老 花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。</p><p>这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的 帮助，每次记账都得翻账本，效率是不是低得让人难以忍受?</p><p>同样，<font color=blue>在MySQL里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到 对应的那条记录，然后再更新，整个过程IO成本、查找成本都很高。</font>为了解决这个问 题，MySQL的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。</p><p>而粉板和账本配合的整个过程，其实就是MySQL里经常说到的<code>WAL</code>技术，WAL的全称是<code>Write- Ahead Logging</code>，<font color=red>它的关键点就是先写日志，再写磁盘</font>，也就是先写粉板，等不忙的时候再写账本。</p><blockquote><p>具体来说，当有一条记录需要更新的时候，InnoDB引擎就会先把记录写到redo log(粉板)里 面，并更新内存，这个时候更新就算完成了。同时，InnoDB引擎会在适当的时候，将这个操作 记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p></blockquote><p>如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎 么办呢?这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把 这些记录从粉板上擦掉，为记新账腾出空间。</p><p>与此类似，InnoDB的redo log是固定大小的，比如可以配置为一组4个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录4GB的操作。从头开始写，写到末尾就又回到开头循环 写，如下面这个图所示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-846e5f4de8648713e24cdd7a028b547f4a6.png"></p><p>write pos是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。 checkpoint是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文 件。</p><p>write pos和checkpoint之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果write pos 追上checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint推进一下。</p><p>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</p><p>要理解crash-safe这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或 写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板 上的数据明确赊账账目。</p><h2 id="重要的日志模块-binlog"><a href="#重要的日志模块-binlog" class="headerlink" title="重要的日志模块:binlog"></a>重要的日志模块:binlog</h2><p>前面我们讲过，MySQL整体来看，其实就有两块:一块是Server层，它主要做的是MySQL功能 层面的事情;还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板redo log是 InnoDB引擎特有的日志，而Server层也有自己的日志，称为binlog(归档日志)。</p><p>我想你肯定会问，为什么会有两份日志呢?</p><p>因为最开始MySQL里并没有InnoDB引擎。MySQL自带的引擎是MyISAM，但是MyISAM没有 crash-safe的能力，binlog日志只能用于归档。而InnoDB是另一个公司以插件形式引入MySQL 的，既然只依靠binlog是没有crash-safe能力的，所以InnoDB使用另外一套日志系统— — 也就是redo log来实现crash-safe能力。</p><p>这两种日志有以下三点不同。</p><ol><li><font color=red>redolog是InnoDB引擎特有的;</font> binlog是MySQL的Server层实现的，所有引擎都可以使用。</li><li>redolog是物理日志，记录的是“在某个数据页上做了什么修改”; binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1 ”。</li><li>redolog是循环写的，空间固定会用完;binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>有了对这两个日志的概念性理解，我们再来看执行器和InnoDB引擎在执行这个简单的update语 句时的内部流程。</p><ol><li>执行器先找引擎取ID=2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID=2这一 行所在的数据页本来就在内存中，就直接返回给执行器;否则，需要先从磁盘读入内存，然 后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行 数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redolog里面，此时redolog处 于prepare状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redolog改成提交(commit)状态，更新完成。</li></ol><p>这里我给出这个update语句的执行流程图，图中浅色框表示是在InnoDB内部执行的，深色框表示是在执行器中执行的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-67fa7fe81e054dbaaae134dea88c9d651f3.png"></p><p><strong><font color=blue>你可能注意到了，最后三步看上去有点“绕”，将redo log的写入拆成了两个步骤:prepare和commit，这就是”两阶段提交”。</font></strong></p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p>为什么必须有“两阶段提交”呢?这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得 从文章开头的那个问题说起:怎样让数据库恢复到半个月内任意一秒的状态?</p><p>前面我们说过了，binlog会记录所有的逻辑操作，并且是采用“追加写”的形式。如果你的DBA承 诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有binlog，同时系统会定期 做整库备份。这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。</p><p>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数 据，那你可以这么做:</p><ul><li><p>首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备 份恢复到临时库;</p></li><li><p>然后，从备份的时间点开始，将备份的binlog依次取出来，重放到中午误删表之前的那个时刻。</p></li></ul><p>这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。</p><p>好了，说完了数据恢复过程，我们回来说说，为什么日志需要“两阶段提交”。这里不妨用反证法 来进行解释。</p><blockquote><p>由于redo log和binlog是两个独立的逻辑，如果不用两阶段提交，要么就是先写完redo log再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。</p></blockquote><p>仍然用前面的update语句来做例子。假设当前ID=2的行，字段c的值是0，再假设执行update语 句过程中在写完第一个日志后，第二个日志还没有写完期间发生了crash，会出现什么情况呢?</p><ul><li><p>先写redo log后写binlog。假设在redo log写完，binlog还没有写完的时候，MySQL进程异 常重启。由于我们前面说过的，redo log写完之后，系统即使崩溃，仍然能够把数据恢复回 来，所以恢复后这一行c的值是1。 但是由于binlog没写完就crash了，这时候binlog里面就没有记录这个语句。因此，之后备份 日志的时候，存起来的binlog里面就没有这条语句。 然后你会发现，如果需要用这个binlog来恢复临时库的话，由于这个语句的binlog丢失，这 个临时库就会少了这一次更新，恢复出来的这一行c的值就是0，与原库的值不同。</p></li><li><p>先写binlog后写redo log。如果在binlog写完之后crash，由于redo log还没写，崩溃恢复以 后这个事务无效，所以这一行c的值是0。但是binlog里面已经记录了“把c从0改成1”这个日 志。所以，在之后用binlog来恢复的时候就多了一个事务出来，恢复出来的这一行c的值就是 1，与原库的值不同。</p></li></ul><p>可以看到，如果不使用“两阶段提交”，<font color=blue>那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</font></p><p>你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀?</p><p>其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用binlog来实现的，<font color=blue>这个“不一致”就会导致你的线上出现主从数据库不一致的情况。</font></p><p>简单说，redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>今天，我介绍了MySQL里面最重要的两个日志，即物理日志redo log和逻辑日志binlog。</p><ul><li><p>redo log用于保证crash-safe能力。innodb_flush_log_at_trx_commit这个参数设置成1的时候， 表示每次事务的redo log都直接持久化到磁盘。这个参数我建议你设置成1，这样可以保证 MySQL异常重启之后数据不丢失。</p></li><li><p>sync_binlog这个参数设置成1的时候，表示每次事务的binlog都持久化到磁盘。这个参数我也建 议你设置成1，这样可以保证MySQL异常重启之后binlog不丢失。</p></li></ul><p>我还跟你介绍了与MySQL日志系统密切相关的“两阶段提交”。<strong>两阶段提交是跨系统维持数据逻辑 一致性时常用的一个方案</strong>，即使你不做数据库内核开发，日常开发中也有可能会用到。</p><p>文章的最后，我给你留一个思考题吧。前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢?或者说，它影响了这个数据库系统的哪个指标?</p><h3 id="问题回答"><a href="#问题回答" class="headerlink" title="问题回答"></a>问题回答</h3><p>一天一备好处是“最长恢复时间”更短。</p><p>在一天一备的模式里，最坏情况下需要应用一天的binlog。比如，你每天0点做一次全量备份， 而要恢复出一个到昨天晚上23点的备份。</p><p>一周一备最坏情况就要应用一周的binlog了。系统的对应指标就是RTO(恢复目标时间)。</p><p>当然这个是有成本的，因为更频繁全量备份需要消耗更多存储空间，所以这个RTO是成本换来 的，就需要你根据业务重要性来评估了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一条更新语句是如何执行的&quot;&gt;&lt;a href=&quot;#一条更新语句是如何执行的&quot; class=&quot;headerlink&quot; title=&quot;一条更新语句是如何执行的&quot;&gt;&lt;/a&gt;一条更新语句是如何执行的&lt;/h1&gt;&lt;p&gt;前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>事务隔离：为什么你改了我还看不见</title>
    <link href="http://example.com/wiki/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
    <id>http://example.com/wiki/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</id>
    <published>2021-12-06T10:45:45.000Z</published>
    <updated>2021-12-06T10:46:46.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务隔离：为什么你改了我还看不见"><a href="#事务隔离：为什么你改了我还看不见" class="headerlink" title="事务隔离：为什么你改了我还看不见"></a>事务隔离：为什么你改了我还看不见</h1><p>提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。最经典的例子就是转 账，你要给朋友小王转100块钱，而此时你的银行卡只有100块钱。</p><p>转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必 须保证是一体的，不然等程序查完之后，还没做减法之前，你这100块钱，完全可以借着这个时 间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么?这时就要用到“事 务”这个概念了。</p><p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在MySQL中，事 务支持是在引擎层实现的。你现在知道，MySQL是一个支持多引擎的系统，但并不是所有的引 擎都支持事务。比如MySQL原生的MyISAM引擎就不支持事务，这也是MyISAM被InnoDB取代 的重要原因之一。</p><p>今天的文章里，我将会以InnoDB为例，剖析MySQL在事务支持方面的特定实现，并基于原理给 出相应的实践建议，希望这些案例能加深你对MySQL事务原理的理解。</p><h2 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h2><p>提到事务，你肯定会想到ACID(Atomicity、Consistency、Isolation、Durability，即原子性、一 致性、隔离性、持久性)，今天我们就来说说其中I，也就是“隔离性”。</p><p>当数据库上有多个事务同时执行的时候，就可能出现脏读(dirty read)、不可重复读(non-repeatable read)、幻读(phantom read)的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><p>在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要 在二者之间寻找一个平衡点。SQL标准的事务隔离级别包括:读未提交(read uncommitted)、 读提交(read committed)、可重复读(repeatable read)和串行化(serializable )。下面我逐 一为你解释:</p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。 </li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一 致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。 </li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突 的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表T中 只有一列，其中一行的值为1，下面是按照时间顺序执行两个事务的行为。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T(c <span class="type">int</span>) engine<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(c) <span class="keyword">values</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://oscimg.oschina.net/oscnet/up-4263a773c9c9bf065d77d3f59bdb13b004f.png"></p><p>我们来看看在不同的隔离级别下，事务A会有哪些不同的返回结果，也就是图里面V1、V2、V3 的返回值分别是什么。</p><ul><li><p>若隔离级别是“读未提交”， 则V1的值就是2。这时候事务B虽然还没有提交，但是结果已经被 A看到了。因此，V2、V3也都是2。 </p></li><li><p>若隔离级别是“读提交”，则V1是1，V2的值是2。事务B的更新在提交后才能被A看到。所以， V3的值也是2。</p></li><li><p>若隔离级别是“可重复读”，则V1、V2是1，V3是2。之所以V2还是1，遵循的就是这个要求: 事务在执行期间看到的数据前后必须是一致的。</p></li><li><p>若隔离级别是“串行化”，则在事务B执行“将1改成2”的时候，会被锁住。直到事务A提交后， 事务B才可以继续执行。所以从A的角度看， V1、V2值是1，V3的值是2。</p></li></ul><p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。<font color="red">在“可重复读”隔离 级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</font><font color=blue>在“读提交”隔离级 别下，这个视图是在每个SQL语句开始执行的时候创建的</font>。这里需要注意的是，“读未提交”隔离 级别下直接返回记录上的最新值，没有视图概念;而“串行化”隔离级别下直接用加锁的方式来避免并行访问。</p><p>我们可以看到在不同的隔离级别下，数据库行为是有所不同的。Oracle数据库的默认隔离级别其 实就是“读提交”，因此对于一些从Oracle迁移到MySQL的应用，为保证数据库隔离级别的一致， 你一定要记得将MySQL的隔离级别设置为“读提交”。</p><p>配置的方式是，将启动参数transaction-isolation的值设置成READ-COMMITTED。你可以用<code>show variables</code>来查看当前的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;transaction_isolation&#x27;;</span><br><span class="line">+-----------------------+----------------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+-----------------------+----------------+</span><br><span class="line">| transaction_isolation | READ-COMMITTED |</span><br><span class="line">+-----------------------+----------------+</span><br></pre></td></tr></table></figure><p>总结来说，存在即合理，哪个隔离级别都有它自己的使用场景，你要根据自己的业务情况来定。 我想你可能会问那什么时候需要“可重复读”的场景呢?我们来看一个数据校对逻辑的案例。</p><p>假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时 候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。 你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。</p><p>这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务 更新的影响。</p><h2 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h2><p>理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复 读”。</p><p>在MySQL中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通 过回滚操作，都可以得到前一个状态的值。</p><p>假设一个值从1被按顺序改成了2、3、4，在回滚日志里面就会有类似下面的记录。</p><p><img src="https://oscimg.oschina.net/oscnet/up-823d70046a45479d602f2a8e62bc33ad0a2.png"></p><p>当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的read-view。如图中看 到的，在视图A、B、C里面，这一个记录的值分别是1、2、4，同一条记录在系统中可以存在多 个版本，就是数据库的多版本并发控制(MVCC)。对于read-view A，要得到1，就必须将当前 值依次执行图中所有的回滚操作得到。</p><p>同时你会发现，即使现在有另外一个事务正在将4改成5，这个事务跟read-view A、B、C对应的 事务是不会冲突的。</p><p>你一定会问，回滚日志总不能一直保留吧，什么时候删除呢? 答案是，在不需要的时候才删除。 也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。</p><p>什么时候才不需要了呢?就是当系统里没有比这个回滚日志更早的read-view的时候。 基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。</p><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数 据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占 用存储空间。</p><p>在MySQL 5.5及以前的版本，回滚日志是跟数据字典一起放在ibdata文件里的，即使长事务最终 提交，回滚段被清理，文件也不会变小。我见过数据只有20GB，而回滚段有200GB的库。最终 只好为了清理回滚段，重建整个库。</p><p>除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候 展开。</p><h3 id="事务的启动方式"><a href="#事务的启动方式" class="headerlink" title="事务的启动方式"></a>事务的启动方式</h3><p>如前面所述，长事务有这些潜在风险，我当然是建议你尽量避免。其实很多时候业务开发同学并 不是有意使用长事务，通常是由于误用所致。MySQL的事务启动方式有以下几种:</p><ul><li><p>显式启动事务语句， begin 或 start transaction。配套的提交语句是commit，回滚语句是 rollback。</p></li><li><p>set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</p></li></ul><p>有些客户端连接框架会默认连接成功后先执行一个set autocommit=0的命令。这就导致接下来的 查询都在事务中，如果是长连接，就导致了意外的长事务。</p><p>因此，我会建议你总是使用set autocommit=1, 通过显式语句的方式来启动事务。</p><p>但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式 每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。如果你也有这个顾 虑，我建议你使用<font color=red>commit work and chain</font>语法。</p><p>在autocommit为1的情况下，用begin显式启动的事务，如果执行commit则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行begin语 句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。</p><p>你可以在information_schema库的innodb_trx这个表中查询长事务，比如下面这个语句，用于查 找持续时间超过60s的事务。</p><p><code>select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60 </code> </p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我给你留一个问题吧。你现在知道了系统里面应该避免长事务，如果你是业务开发负责人同时也 是数据库负责人，你会有什么方案来避免出现或者处理这种情况呢?</p><p>这个问题，我们可以从应用开发端和数据库端来看。 首先，从应用开发端来看:</p><ol><li>确认是否使用了set autocommit=0。这个确认工作可以在测试环境中开展，把MySQL的 general_log开起来，然后随便跑一个业务逻辑，通过general_log的日志来确认。一般框架 如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成1。</li><li>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用begin/commit框起来。我 见过有些是业务并没有这个需要，但是也把好几个select语句放到了事务中。这种只读事务 可以去掉。</li><li>业务连接数据库的时候，根据业务本身的预估，通过SETMAX_EXECUTION_TIME命令， 来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。(为什么会意外?在后 续的文章中会提到这类案例)</li></ol><p>其次，从数据库端来看:</p><ol><li>监控 information_schema.Innodb_trx表，设置长事务阈值，超过就报警/或者kill;</li><li>Percona的pt-kill这个工具不错，推荐使用;</li><li>在业务功能测试阶段要求输出所有的general_log，分析日志行为提前发现问题;</li><li>如果使用的是MySQL5.6或者更新版本，把innodb_undo_tablespaces设置成2(或更大的 值)。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务隔离：为什么你改了我还看不见&quot;&gt;&lt;a href=&quot;#事务隔离：为什么你改了我还看不见&quot; class=&quot;headerlink&quot; title=&quot;事务隔离：为什么你改了我还看不见&quot;&gt;&lt;/a&gt;事务隔离：为什么你改了我还看不见&lt;/h1&gt;&lt;p&gt;提到事务，你肯定不陌生，和数</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>全局锁和表锁：给表加个字段怎么这么多阻碍</title>
    <link href="http://example.com/wiki/%E5%85%A8%E5%B1%80%E9%94%81%E5%92%8C%E8%A1%A8%E9%94%81/"/>
    <id>http://example.com/wiki/%E5%85%A8%E5%B1%80%E9%94%81%E5%92%8C%E8%A1%A8%E9%94%81/</id>
    <published>2021-12-06T10:43:52.000Z</published>
    <updated>2021-12-06T10:45:28.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局锁和表锁：给表加个字段怎么这么多阻碍"><a href="#全局锁和表锁：给表加个字段怎么这么多阻碍" class="headerlink" title="全局锁和表锁：给表加个字段怎么这么多阻碍"></a>全局锁和表锁：给表加个字段怎么这么多阻碍</h1><p>今天我要跟你聊聊MySQL的锁。数据库锁设计的初衷是处理并发问题。作为多用户共享的资 源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。</p><p>根据加锁的范围，MySQL里面的锁大致可以分成<strong>全局锁、表级锁和行锁</strong>三类。今天这篇文章，我会和你分享全局锁和表级锁。而关于行锁的内容，我会留着在下一篇文章中再和你详细介 绍。</p><p>这里需要说明的是，锁的设计比较复杂，这两篇文章不会涉及锁的具体实现细节，主要介绍的是碰到锁时的现象和其背后的原理。</p><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>顾名思义，全局锁就是对整个数据库实例加锁。MySQL提供了一个加全局读锁的方法，命令是 <code>Flush tables with read lock</code> (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞:数据更新语句(数据的增删改)、数据定义语句(包括 建表、修改表结构等)和更新类事务的提交语句。</p><p><strong><font color=blue>全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都select出来存成文本。</font></strong></p><p>以前有一种做法，是通过FTWRL确保不会有其他线程对数据库做更新，然后对整个库做备份。 注意，在备份过程中整个库完全处于只读状态。</p><p>但是让整库都只读，听上去就很危险:</p><ul><li><p>如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆;</p></li><li><p>如果你在从库上备份，那么备份期间从库不能执行主库同步过来的binlog，会导致主从延迟。</p></li></ul><p>看来加全局锁不太好。但是细想一下，<font color=red>备份为什么要加锁呢? 我们来看一下不加锁会有什么问题。</font></p><p>假设你现在要维护“极客时间”的购买系统，关注的是用户账户余额表和用户课程表。</p><p>现在发起一个逻辑备份。假设备份期间，有一个用户，他购买了一门课程，业务逻辑里就要扣掉 他的余额，然后往已购课程里面加上一门课。</p><p>如果时间顺序上是先备份账户余额表(u_account)，然后用户购买，然后备份用户课程表 (u_course)，会怎么样呢?你可以看一下这个图:</p><p><img src="https://oscimg.oschina.net/oscnet/up-b686a902a661f2ba86e2820a32f1fd1b7c5.png"></p><p>可以看到，这个备份结果里，用户A的数据状态是“账户余额没扣，但是用户课程表里面已经多了</p><p>一门课”。如果后面用这个备份来恢复数据的话，用户A就发现，自己赚了。 作为用户可别觉得这样可真好啊，你可以试想一下:如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果?</p><p>也就是说，不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致 的。</p><p>说到视图你肯定想起来了，我们在前面讲事务隔离的时候，其实是有一个方法能够拿到一致性视 图的，对吧?</p><p>是的，就是在可重复读隔离级别下开启一个事务。</p><p>官方自带的逻辑备份工具是mysqldump。当<code>mysqldump</code>使用参数<code>–single-transaction</code>的时候，导 数据之前就会启动一个事务，来确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是 可以正常更新的。</p><p>你一定在疑惑，有了这个功能，为什么还需要FTWRL呢?一致性读是好，但前提是引擎要支持这个隔离级别。比如，<font color=blue>对于MyISAM这种不支持事务的引擎，如果备份过程中有更新，总是 只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用FTWRL命令了。</font></p><p>所以，<font color=blue>single-transaction方法只适用于所有的表使用事务引擎的库</font>。如果有的表使用了不支持事务的引擎，那么备份就只能通过FTWRL方法。这往往是DBA要求业务开发人员使用 InnoDB替代MyISAM的原因之一。</p><p>你也许会问，既然要全库只读，为什么不使用 <code>set global readonly=true</code>的方式呢? 确实 readonly方式也可以让全库进入只读状态，但我还是会建议你用FTWRL方式，主要有两个原因:</p><ul><li>在有些系统中，readonly的值会被用来做其他逻辑，比如用来判断一个库是主库还是备 库。因此，修改global变量的方式影响面更大，我不建议你使用。</li><li>在异常处理机制上有差异。如果执行FTWRL命令之后由于客户端发生异常断开，那么 MySQL会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly之后，如果客户端发生异常，则数据库就会一直保持readonly状态，这样会导致整个 库长时间处于不可写状态，风险较高。</li></ul><p>业务的更新不只是增删改数据(DML)，还有可能是加字段等修改表结构的操作(DDL)。不论 是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。</p><p>但是，即使没有被全局锁住，加字段也不是就能一帆风顺的，因为你还会碰到接下来我们要介绍 的表级锁。</p><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>MySQL里面表级别的锁有两种:一种是表锁，一种是元数据锁(meta data lock，MDL)。</p><p>表锁的语法是 <code>lock tables ...read/write</code>。与FTWRL类似，可以用unlock tables主动释放锁， 也可以在客户端断开的时候自动释放。需要注意，lock tables语法除了会限制别的线程的读写 外，也限定了本线程接下来的操作对象。</p><p>举个例子, 如果在某个线程A中执行lock tables t1 read, t2 write; 这个语句，则其他线程写t1、读 写t2的语句都会被阻塞。同时，线程A在执行unlock tables之前，也只能执行读t1、读写t2的操 作。连写t1都不允许，自然也不能访问其他表。</p><p>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于InnoDB这种支持 行锁的引擎，一般不使用lock tables命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><h3 id="metadata-lock"><a href="#metadata-lock" class="headerlink" title="metadata lock"></a>metadata lock</h3><p>另一类表级的锁是<font color=blue>MDL(metadata lock)</font>。MDL不需要显式使用，在访问一个表的时候会被自动加上。</p><p>MDL的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个 表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果 跟表结构对不上，肯定是不行的。</p><p>因此，在MySQL 5.5版本中引入了MDL，**<font color=blue>当对一个表做增删改查操作的时候，加MDL读锁;当 要对表做结构变更操作的时候，加MDL写锁。</font>**</p><ul><li><p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</p></li><li><p>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线 程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</p></li></ul><p>虽然MDL锁是系统默认会加的，但却是你不能忽略的一个机制。</p><p><strong>比如下面这个例子，我经常看到有人掉到这个坑里:给一个小表加个字段，导致整个库挂了。</strong></p><p>你肯定知道，给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操 作的时候，你肯定会特别小心，以免对线上服务造成影响。而实际上，即使是小表，操作不慎也 会出问题。我们来看一下下面的操作序列，假设表t是一个小表。</p><p>⚠️备注:这里的实验环境是MySQL 5.6。</p><p><img src="https://oscimg.oschina.net/oscnet/up-968696480927070a2a696f9d8f05bccda93.png"></p><p>我们可以看到session A先启动，这时候会对表t加一个MDL读锁。由于session B需要的也是 MDL读锁，因此可以正常执行。</p><p>之后session C会被blocked，是因为session A的MDL读锁还没有释放，而session C需要MDL写 锁，因此只能被阻塞。</p><p>如果只有session C自己被阻塞还没什么关系，但是之后所有要在表t上新申请MDL读锁的请求也 会被session C阻塞。前面我们说了，所有对表的增删改查操作都需要先申请MDL读锁，就都被 锁住，等于这个表现在完全不可读写了。</p><p><strong><font color=red>如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新session 再请求的话，这个库的线程很快就会爆满。</font></strong></p><p>你现在应该知道了，事务中的MDL锁，在语句执行开始时申请，但是语句结束后并不会马上释 放，而会等到整个事务提交后再释放。</p><hr><p>基于上面的分析，<font color=red>我们来讨论一个问题，如何安全地给小表加字段?</font></p><p><strong>首先我们要解决长事务，事务不提交，就会一直占着MDL锁。</strong></p><p>在MySQL的information_schema 库的 innodb_trx表中，你可以查到当前执行中的事务。如果你要做DDL变更的表刚好有长事务 在执行，要考虑先暂停DDL，或者kill掉这个长事务。</p><p>但考虑一下这个场景。如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频 繁，而你不得不加个字段，你该怎么做呢?</p><p>这时候kill可能未必管用，因为新的请求马上就来了。比较理想的机制是，在alter table语句里面 设定等待时间，如果在这个指定的等待时间里面能够拿到MDL写锁最好，拿不到也不要阻塞后 面的业务语句，先放弃。之后开发人员或者DBA再通过重试命令重复这个过程。</p><p>MariaDB已经合并了AliSQL的这个功能，所以这两个开源分支目前都支持DDL NOWAIT/WAIT n 这个语法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name NOWAIT <span class="keyword">add</span> <span class="keyword">column</span> ...</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name WAIT N <span class="keyword">add</span> <span class="keyword">column</span> ...</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>备份一般都会在备库上执行，你在用–single-transaction方法做逻 辑备份的过程中，如果主库上的一个小表做了一个DDL，比如给一个表上加了一列。这时候，从 备库上会看到什么现象呢?</p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><p><a href="https://blog.csdn.net/qq_26502245/article/details/111688120">https://blog.csdn.net/qq_26502245/article/details/111688120</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全局锁和表锁：给表加个字段怎么这么多阻碍&quot;&gt;&lt;a href=&quot;#全局锁和表锁：给表加个字段怎么这么多阻碍&quot; class=&quot;headerlink&quot; title=&quot;全局锁和表锁：给表加个字段怎么这么多阻碍&quot;&gt;&lt;/a&gt;全局锁和表锁：给表加个字段怎么这么多阻碍&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>一条sql是如何执行的</title>
    <link href="http://example.com/wiki/%E4%B8%80%E6%9D%A1sql%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"/>
    <id>http://example.com/wiki/%E4%B8%80%E6%9D%A1sql%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/</id>
    <published>2021-12-06T10:35:29.000Z</published>
    <updated>2021-12-06T10:36:26.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一条sql到底是怎么执行的？"><a href="#一条sql到底是怎么执行的？" class="headerlink" title="一条sql到底是怎么执行的？"></a>一条sql到底是怎么执行的？</h1><p>这个问题等同于： <strong>请将一下mysql的基础架构</strong></p><h2 id="MySQL的逻辑架构"><a href="#MySQL的逻辑架构" class="headerlink" title="MySQL的逻辑架构"></a>MySQL的逻辑架构</h2><p>我们经常说，看一个事儿千万不 要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简 单的表，表里只有一个ID字段，在执行下面这个查询语句时:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在MySQL内部的执行过程。</p><p>所以今天我想和你一起把MySQL拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程， 让你对MySQL有更深入的理解。这样当我们碰到MySQL的一些异常或者问题时，就能够直戳本 质，更为快速地定位并解决问题。</p><p>下面我给出的是MySQL的基本架构示意图，从中你可以清楚地看到SQL语句在MySQL的各个功 能模块中的执行过程。</p><p><img src="https://oscimg.oschina.net/oscnet/up-661c52fa2ca85182e119823265a003d152b.png" alt="MySQL的逻辑架构图"></p><p>大体来说，MySQL可以分为<strong>Server层</strong>和<strong>存储引擎层</strong>两部分。</p><p>Server层包括<strong>连接器</strong>、<strong>查询缓存</strong>、<strong>分析器</strong>、<strong>优化器</strong>、<strong>执行器</strong>等，涵盖MySQL的大多数核心服务 功能，以及所有的内置函数(如日期、时间、数学和加密函数等)，所有跨存储引擎的功能都在 这一层实现，比如存储过程、触发器、视图等。</p><p>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持InnoDB、MyISAM、 Memory等多个存储引擎。现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了 默认存储引擎。</p><p>也就是说，你执行create table建表的时候，如果不指定引擎类型，默认使用的就是InnoDB。不 过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在create table语句中使用 <code>engine=memory</code>, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功 能也不同，在后面的文章中，我们会讨论到引擎的选择。</p><p>从图中不难看出，不同的存储引擎共用一个Server层 ，也就是从连接器到执行器的部分。你可 以先对每个组件的名字有个印象，接下来我会结合开头提到的那条SQL语句，带你走一遍整个执 行流程，依次看下每个组件的作用。</p><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><p>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连 接、获取权限、维持和管理连接。连接命令一般是这么写的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h$ip <span class="operator">-</span>P$port <span class="operator">-</span>u$<span class="keyword">user</span> <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在-p后面写在命令行 中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。</p><p>连接命令中的mysql是客户端工具，用来跟服务端建立连接。在完成经典的TCP握手后，连接器 就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p><ul><li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序 结束执行。</li><li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面 的权限判断逻辑，都将依赖于此时读到的权限。</li></ul><p>这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。<strong>修改完成后，只有再新建的连接才会使用新的权限设置</strong>。</p><p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在show processlist命 令中看到它。文本中这个图是show processlist的结果，其中的Command列显示为“Sleep”的这 一行，就表示现在系统里面有一个空闲连接。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2a647e124a6b81400ac56c8602d08803a29.png"></p><p>客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数<code>wait_timeout</code>控制 的，<strong>默认值是8小时。</strong></p><p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒: <code>Lost connection to MySQL server during query</code>。这时候如果你要继续，就需要重连，然后再执行请求了。</p><p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接 则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p><p>建立连接的过程通常是比较复杂的，<font color=blue>所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</font></p><p>但是全部使用长连接后，你可能会发现，有些时候MySQL占用内存涨得特别快，这是因为 MySQL在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉(OOM)，从现 象看就是MySQL异常重启了。</p><p>怎么解决这个问题呢?你可以考虑以下两种方案。</p><ul><li><p>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开 连接，之后要查询再重连。</p></li><li><p>如果你用的是MySQL5.7或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证， 但是会将连接恢复到刚刚创建完时的状态。</p></li></ul><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>连接建立完成后，你就可以执行select语句了。执行逻辑就会来到第二步**:查询缓存。**</p><p>MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过 的语句及其结果可能会以key-value对的形式，被直接缓存在内存中。key是查询的语句，value是 查询的结果。如果你的查询能够直接在这个缓存中找到key，那么这个value就会被直接返回给客 户端。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存 中。你可以看到，如果查询命中缓存，MySQL不需要执行后面的复杂操作，就可以直接返回结 果，这个效率会很高。</p><p><font color=blue>但是大多数情况下我会建议你不要使用查询缓存，为什么呢? 因为查询缓存往往弊大于利。</font></p><blockquote><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此 很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库 来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。 比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p></blockquote><p>好在MySQL也提供了这种“按需使用”的方式。你可以将参数<code>query_cache_type</code>设置成 <code>DEMAND</code>，这样对于默认的SQL语句都不使用查询缓存。而对于你确定要使用查询缓存的语 句，可以用SQL_CACHE显式指定，像下面这个语句一样:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> SQL_CACHE <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><font color=red>需要注意的是，MySQL 8.0版本直接将查询缓存的整块功能删掉了，也就是说8.0开始彻底没有 这个功能了。</font></p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，<font color=blue>MySQL需要知道你要做什么</font>，因此需要对SQL语句做解析。</p><p>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条SQL语句，MySQL需要识 别出里面的字符串分别是什么，代表什么。</p><p>MySQL从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别 成“表名T”，把字符串“ID”识别成“列ID”。</p><p>做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则， 判断你输入的这个SQL语句是否满足MySQL语法。</p><p>如果你的语句不对，就会收到<code>“You have an error in your SQL syntax”</code>的错误提醒，比如下面这个 语句select少打了开头的字母“s”。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4b5816275605cf38dcea5964ab23bfc1e16.png"></p><p><font color=red>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</font></p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>经过了分析器，MySQL就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。</p><p>优化器是在表里面有多个索引的时候，决定使用哪个索引;或者在一个语句有多表关联(join)的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的join:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">join</span> t2 <span class="keyword">using</span>(ID)  <span class="keyword">where</span> t1.c<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> t2.d<span class="operator">=</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure><ul><li>既可以先从表t1里面取出c=10的记录的ID值，再根据ID值关联到表t2，再判断t2里面d的值是 否等于20。</li><li>也可以先从表t2里面取出d=20的记录的ID值，再根据ID值关联到t1，再判断t1里面c的值是否 等于10。</li></ul><p>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。</p><p>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些 疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，在后面的文章中单独展开说明优化器的内容。</p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p><font color=blue>MySQL通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶 段，开始执行语句。</font></p><p>开始执行的时候，要先判断一下你对这个表T有没有执行查询的权限，如果没有，就会返回没有 权限的错误，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from T where ID=10;</span><br><span class="line"></span><br><span class="line">ERROR 1142 (42000): SELECT command denied to user &#x27;b&#x27;@&#x27;localhost&#x27; for table &#x27;T&#x27;</span><br></pre></td></tr></table></figure><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用<strong>这个引擎</strong>提供的接口。</p><p>比如我们这个例子中的表T中，ID字段没有索引，那么执行器的执行流程是这样的:</p><ul><li>调用InnoDB引擎接口取这个表的第一行，判断ID值是不是10，如果不是则跳过，如果是则将这行存在结果集中;</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ul><p>至此，这个语句就执行完成了。 对于有索引的表，执行的逻辑也差不多。</p><p>第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。 你会在数据库的慢查询日志中看到一个rows_examined的字段，表示这个语句执行过程中扫描了多少行。</p><p>这个值就是在执行器每次调用引擎获取数据行的时候累加的。<strong>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined并不是完全相同的</strong>。我们后面会专门有一篇文章来讲存储引擎的内部机制， 里面会有详细的说明。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我给你留一个问题吧，如果表T中没有字段k，而你执行了这个语句 select * from T where k=1, 那 肯定是会报“不存在这个列”的错误:     <code>“Unknown column ‘k’ in ‘where clause’”</code>。你觉得这个错误是 在我们上面提到的哪个阶段报出来的呢?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一条sql到底是怎么执行的？&quot;&gt;&lt;a href=&quot;#一条sql到底是怎么执行的？&quot; class=&quot;headerlink&quot; title=&quot;一条sql到底是怎么执行的？&quot;&gt;&lt;/a&gt;一条sql到底是怎么执行的？&lt;/h1&gt;&lt;p&gt;这个问题等同于： &lt;strong&gt;请将一下m</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch使用规范</title>
    <link href="http://example.com/wiki/Elasticsearch%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>http://example.com/wiki/Elasticsearch%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</id>
    <published>2021-11-01T06:45:39.000Z</published>
    <updated>2021-11-01T06:46:32.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch使用规范"><a href="#Elasticsearch使用规范" class="headerlink" title="Elasticsearch使用规范"></a>Elasticsearch使用规范</h1><h2 id="查询规范建议"><a href="#查询规范建议" class="headerlink" title="查询规范建议"></a>查询规范建议</h2><ul><li><p><strong>定义好mappings和settings</strong>，不同的数据类型查询效率不一样，建议只需做精确查询以及范围查询的字段设置为keyword类型。对于要进行全文检索的字段设置合理的分词器。</p></li><li><p>对于只需要查询数据结果而不需要结果的相关度计算的情况，<strong>使用filter query能大幅提升你的查询效率</strong>。例如过滤某车牌和号码。</p></li><li><p><strong>避免一次性取出大量的数量</strong>：Elasticsearch被设计为一个搜索引擎，这使得它非常擅长获取与查询匹配的最优文档，但是不适合用来检索与特定查询匹配的所有文档。 Elasticsearch为了避免深分页，不允许使用分页（from&amp;size）查询10000条以后的数据，如果需要这样做，请确保使用Scroll API。 （Scroll API 后来不被推荐使用 可以使用search after）</p></li><li><p><strong>尽量细化查询条件</strong>，查询的条件越细，查询效率越高。</p></li><li><p><strong>选择合适的查询类型</strong>，比如term查询效率相对会高一些。</p></li><li><p><strong>优化路由</strong></p><p>  Elasticsearch写入文档时，文档会通过一个公式路由到一个索引中的一个分片上。默认公式如下：<br>  <code>shard_num = hash(_routing) % num_primary_shards</code><br>  _routing字段的取值，默认是_id字段，可以根据业务场景设置经常查询的字段作为路由字段。例如可以考虑将用户id、地区作为路由字段，查询时可以过滤不必要的分片，加快查询速度。</p></li><li><p>避免使用wildcard模糊匹配查询<br>  Elasticsearch默认支持通过*？正则表达式来做模糊匹配，数据量级别达到TB+甚至更高之后，模糊匹配查询通常会耗时比较长，甚至可能导致内存溢出，卡死乃至崩溃宕机的情况。所以数据量大的情况下，不要使用模糊匹配查询。</p></li><li><p>合理的配置使用index属性，analyzed和not_analyzed，根据业务需求来控制字段是否分词或不分词。只有groupby需求的字段，配置时就设置成not_analyzed,以提高查询或聚类的效率。</p></li><li><p>query_string或multi_match的查询字段越多，查询越慢。<br>  可以在mapping阶段，利用copy_to属性将多字段的值索引到一个新字段，multi_match时，用新的字段查询。</p></li><li><p><strong>日期字段的查询</strong><br>  尤其是用now的查询实际上是不存在缓存的，因此， 可以从业务的角度来考虑是否一定要用now,毕竟利用query cache是能够大大提高查询效率的。</p></li><li><p><strong>查询结果集的大小不能随意设置成大得离谱的值</strong><br>  如query.setSize不能设置成Integer.MAX_VALUE，<font color=red>因为ES内部需要建立一个数据结构来放指定大小的结果集数据。</font></p></li><li><p><strong>尽量避免使用script，万不得已需要使用的话，选择painless &amp; experssions引擎。</strong><br>  <font color=blue>一旦使用script查询，一定要注意控制返回，千万不要有死循环，因为ES没有脚本运行的超时控制，只要当前的脚本没执行完，该查询会一直阻塞。</font></p></li></ul><h2 id="容量规划"><a href="#容量规划" class="headerlink" title="容量规划"></a>容量规划</h2><ul><li><p><strong>分片(shard)容量</strong></p><ul><li>非日志型(搜索型、线上业务型)的shard容量在10~30GB（建议在10G）</li><li>日志型的shard容量在30~100GB（建议30G）</li><li>单个shard的文档个数不能超过21亿左右(Integer.MAX_VALUE - 128)<br>注：一个shard就是一个lucene分片，ES底层基于lucene实现。主分片个数一旦确定，就不可以更改。副本分片个数可以根据需要随时修改。</li></ul></li><li><p><strong>索引(index)数量</strong><br>大索引需要拆分：增强性能，风险分散。<br>反例：一个10T的索引，例如按date查询、name查询<br>正例：index_name拆成多个index_name_${date}<br>正例：index_name按hash拆分index_name_{1,2,3,…100..}<br>提示：索引和shard数并不是越多越好，对于批量读写都会有性能下降，所以要综合考虑性能和容量规划，同时配合压力测试，不存在真正的最优解。</p></li><li><p><strong>节点、分片、索引</strong><br>一个节点管理的shard数不要超过200个</p></li></ul><h2 id="配置使用规范"><a href="#配置使用规范" class="headerlink" title="配置使用规范"></a>配置使用规范</h2><ul><li><p><strong>shard个数（number_of_shards）</strong><br>  primery shard ：默认数量是1<br>  replica shard数量为1： 是每个primary shard 有多少个副本分片的意思<br>  primery shard = 1 ; replica shard = 2 ; 意味着一个索引，一共存在9个shard</p></li><li><p><strong>refresh频率（refresh_interval）</strong><br>  ES的定位是准实时搜索引擎，该值默认是1s，表示写入后1秒后可被搜索到，所以这里的值取决于业务对实时性的要求，注意这里并不是越小越好，刷新频率高也意味着对ES的开销也大，通常业务类型在1-5s，日志型在30s-120s，如果集中导入数据可将其设置为-1，ES会自动完成数据刷新（注意完成后更改回来，否则后续会出现搜索不到数据）</p></li><li><p><strong>使用别名（aliases）</strong>：不要过度依赖别名功能</p></li><li><p><strong>慢日志（slowlog）</strong></p></li><li><p><strong>设置合理的routing key(默认是id)</strong><br>  id不均衡：集群容量和访问不均衡，对于分布式存储是致命的</p></li><li><p><strong>关闭_all</strong><br>  ES6.0已经去掉，对容量（索引过大）和性能（性能下降）都有影响。    </p></li><li><p><strong>避免大宽表</strong><br>  ES默认最大1000，但建议不要超过100.    </p></li><li><p><strong>text类型的字段不要使用聚合查询。</strong><br>  <font color=red>text类型fileddata会加大对内存的占用，如果有需求使用，建议使用keyword</font></p></li><li><p><strong>聚合查询避免使用过多嵌套</strong><br>  <font color=red>聚合查询的中间结果和最终结果都会在内存中进行，嵌套过多，会导致内存耗尽</font></p></li><li><p><strong>修改index_buffer_size的设置</strong><br>  可以设置成百分数，也可设置成具体的大小，大小可根据集群的规模做不同的设置测试。<br>　　<code>indices.memory.index_buffer_size：10%（默认）</code><br>　　<code>indices.memory.min_index_buffer_size： 48mb（默认）</code><br>　　<code>indices.memory.max_index_buffer_size</code></p></li><li><p><strong>修改translog相关的设置</strong></p><ul><li>控制数据从内存到硬盘的操作频率，以减少硬盘IO。可将sync_interval的时间设置大一些。<br>　　      <code>index.translog.sync_interval：5s(默认)</code></li><li>控制tranlog数据块的大小，达到threshold大小时，才会flush到lucene索引文件。<br>  <code>index.translog.flush_threshold_size：512mb(默认)    </code></li></ul></li><li><p><strong>_id字段的使用</strong><br>  应尽可能避免自定义_id,以避免针对ID的版本管理；建议使用ES的默认ID生成策略或使用数字类型ID做为主键    </p></li><li><p><strong>Cache的设置及使用</strong></p><ul><li>QueryCache: ES查询的时候，使用filter查询会使用query cache,如果业务场景中的过滤查询比较多，建议将querycache设置大一些，以提高查询速度。<br><code>indices.queries.cache.size： 10%（默认）</code>，可设置成百分比，也可设置成具体值，如256mb。</li></ul><p>  当然也可以禁用查询缓存（默认是开启）, 通过<code>index.queries.cache.enabled：false</code>设置。</p><ul><li>FieldDataCache:在聚类或排序时，<code>field data cache</code>会使用频繁，因此，<strong>设置字段数据缓存的大小，在聚类或排序场景较多的情形下很有必要</strong><br>  可通过<code>indices.fielddata.cache.size：30%</code>或<code>具体值10GB</code>来设置。<strong>但是如果场景或数据变更比较频繁，设置cache并不是好的做法，因为缓存加载的开销也是特别大的。</strong></li><li><strong>ShardRequestCache</strong><br>查询请求发起后，每个分片会将结果返回给协调节点(Coordinating Node),由协调节点将结果整合。<br>如果有需求，可以设置开启;通过设置<strong>index.requests.cache.enable: true</strong>来开启。<br>不过，<code>shard request cache</code>只缓存<code>hits.total</code>, <code>aggregations</code>, <code>suggestions</code>类型的数据，并不会缓存hits的内容。也可以通过设置<code>indices.requests.cache.size: 1%（默认）</code>来控制缓存空间大小。    </li></ul></li></ul><h2 id="字段设计规范"><a href="#字段设计规范" class="headerlink" title="字段设计规范"></a>字段设计规范</h2><ul><li><p>text和keyword的用途必须分清：分词和关键词（确定字段是否需要分词）</p></li><li><p>确定字段是否需要独立存储</p></li><li><p>字段类型不支持修改，必须谨慎。</p></li><li><p>对不需要进行聚合/排序的字段禁用doc_values</p></li><li><p>不要在text做模糊搜索：</p></li></ul><h2 id="违规操作"><a href="#违规操作" class="headerlink" title="违规操作"></a>违规操作</h2><ul><li>原则：不要忽略设计，快就是慢，坏的索引设计后患无穷.</li><li>拒绝大聚合 ：ES计算都在JVM内存中完成。</li><li>拒绝模糊查询：es一大杀手</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;wildcard&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;title.keyword&quot;</span>:<span class="string">&quot;*张三*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>拒绝深度分页<br>  ES获取数据时，每次默认最多获取10000条，获取更多需要分页，但存在深度分页问题，<font color=red>一定不要使用from/Size方式，建议使用scroll或者searchAfter方式。</font> scroll会把上一次查询结果缓存一定时间（通过配置scroll=1m实现)，所以在使用scroll时一定要保证search结果集不要太大。</p></li><li><p>基数查询<br>尽量不要用基数查询去查询去重后的数据量大小（kibana中界面上显示是Unique Count，Distinct Count等），即少用如下的查询：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;cardinality&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;userId&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>禁止查询 indexName-*</li><li>避免使用script、update_by_query、delete_by_query，对线上性能影响较大。</li></ul><h2 id="建议操作"><a href="#建议操作" class="headerlink" title="建议操作"></a>建议操作</h2><ul><li><strong>复用预索引数据方式来提高AGG性能</strong><br>  如通过terms aggregations替代range aggregations， 如要根据年龄来分组，分组目标是:少年（14岁以下） 青年（14-28） 中年（29-50） 老年（51以上）， <font color=red>可以在索引的时候设置一个age_group字段，预先将数据进行分类</font>。从而不用按age来做range aggregations,通过age_group字段就可以了。</li><li><strong>避免将不相关的数据放在同一个索引中，以避免稀疏，将这些文件放在不同的索引中往往更好。</strong></li></ul><h2 id="索引及字段命名规范"><a href="#索引及字段命名规范" class="headerlink" title="索引及字段命名规范"></a>索引及字段命名规范</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引受文件系统的限制。仅可能为小写字母，不能下划线开头。同时需遵守下列规则：</p><ul><li>不能包括 , /, *, ?, “, &lt;, &gt;, |, 空格, 逗号, #</li><li>7.0版本之前可以使用冒号:,但不建议使用并在7.0版本之后不再支持</li><li>不能以这些字符 -, _, + 开头</li><li>不能包括 . 或 …</li><li>长度不能超过 255 个字符</li></ul><p>以上这些命名限制是因为当Elasticsearch使用索引名称作为磁盘上的目录名称，这些名称必须符合不同操作系统的约定。<br>未来可能会放开这些限制，因为我们使用uuid关联索引放在磁盘上，而不使用索引名称</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><font color=red>7.0版本之后不再支持类型，默认为_doc</font></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>一个索引的shard数一旦确定不能改变</li><li>ES不支持事务ACID特性。</li><li>reindex：reindex可以实现索引的shard变更，但代价非常大：速度慢、对性能有影响，所以好的设计和规划更重要</li><li>field一旦创建不能更改mapping，如果需要修改，则必须重新创建索引</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://www.javajcw.com/72.html">Elasticsearch 使用规范</a></li><li><a href="https://blog.csdn.net/neweastsun/article/details/95868716">Elasticsearch索引及字段命名规范</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Elasticsearch使用规范&quot;&gt;&lt;a href=&quot;#Elasticsearch使用规范&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch使用规范&quot;&gt;&lt;/a&gt;Elasticsearch使用规范&lt;/h1&gt;&lt;h2 id=&quot;查询规范建</summary>
      
    
    
    
    
    <category term="Elasticsearch" scheme="http://example.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>数据结构及算法-树</title>
    <link href="http://example.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95-%E6%A0%91/"/>
    <id>http://example.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95-%E6%A0%91/</id>
    <published>2021-09-30T08:36:56.000Z</published>
    <updated>2021-09-30T08:36:56.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/wiki/draft/%E8%BF%9C%E7%A8%8B%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/wiki/draft/%E8%BF%9C%E7%A8%8B%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-09-27T14:11:31.478Z</published>
    <updated>2021-09-27T14:36:06.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式架构基石-远程通信协议"><a href="#分布式架构基石-远程通信协议" class="headerlink" title="分布式架构基石-远程通信协议"></a>分布式架构基石-远程通信协议</h1><h2 id="1、什么是通信"><a href="#1、什么是通信" class="headerlink" title="1、什么是通信"></a>1、什么是通信</h2><p>常见的通信有两种：</p><p>1、客户端与服务端之间的通信，通过http协议进行通信，或者服务器与服务器之间也会进行通信。</p><p>2、微服务架构中，节点之间的通信，通过RPC，实现类似于单体架构中的service方法的调用。</p><h2 id="2、Java中是如何进行通信呢"><a href="#2、Java中是如何进行通信呢" class="headerlink" title="2、Java中是如何进行通信呢"></a>2、Java中是如何进行通信呢</h2><p>通过socket套接字实现</p><blockquote><p>换行符 坑 导致提示Connection Reset (readline)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式架构基石-远程通信协议&quot;&gt;&lt;a href=&quot;#分布式架构基石-远程通信协议&quot; class=&quot;headerlink&quot; title=&quot;分布式架构基石-远程通信协议&quot;&gt;&lt;/a&gt;分布式架构基石-远程通信协议&lt;/h1&gt;&lt;h2 id=&quot;1、什么是通信&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="draft" scheme="http://example.com/categories/draft/"/>
    
    
  </entry>
  
  <entry>
    <title>二分查找（迭代&amp;递归）</title>
    <link href="http://example.com/wiki/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E8%BF%AD%E4%BB%A3-%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <id>http://example.com/wiki/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E8%BF%AD%E4%BB%A3-%E9%80%92%E5%BD%92%EF%BC%89/</id>
    <published>2021-09-27T09:00:45.000Z</published>
    <updated>2021-09-27T09:59:51.333Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/binary-search/">https://leetcode-cn.com/problems/binary-search/</a></p><h2 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1. 二分查找"></a>1. 二分查找</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><p>输入: <code>nums = [-1,0,3,5,9,12], target = 9</code><br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><p>输入: <code>nums = [-1,0,3,5,9,12], target = 2</code><br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p><p>提示：</p><blockquote><p>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000]之间。<br>nums 的每个元素都将在 [-9999, 9999]之间。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/image-20210927170614830.png" alt="image-20210927170614830"></p><h3 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 注意边界</span></span><br><span class="line">        <span class="keyword">return</span> find(<span class="number">0</span>, nums.length - <span class="number">1</span>, target, nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> target, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">          <span class="comment">// 注意mid取值的写法，避免越界异常</span></span><br><span class="line">            <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">return</span> find(left, mid - <span class="number">1</span>, target, nums);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                <span class="keyword">return</span> find(mid + <span class="number">1</span>, right, target, nums);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代写法"><a href="#迭代写法" class="headerlink" title="迭代写法"></a>迭代写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-查找第一个错误版本"><a href="#2-查找第一个错误版本" class="headerlink" title="2. 查找第一个错误版本"></a>2. 查找第一个错误版本</h2><p><a href="https://leetcode-cn.com/problems/first-bad-version/">leetcode278</a></p><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5, bad = 4</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">调用 isBadVersion(3) -&gt; false </span><br><span class="line">调用 isBadVersion(5) -&gt; true </span><br><span class="line">调用 isBadVersion(4) -&gt; true</span><br><span class="line">所以，4 是第一个错误的版本。</span><br></pre></td></tr></table></figure><h3 id="迭代写法-1"><a href="#迭代写法-1" class="headerlink" title="迭代写法"></a>迭代写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">VersionControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (isBadVersion(mid)) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-搜索插入位置"><a href="#3-搜索插入位置" class="headerlink" title="3. 搜索插入位置"></a>3. <a href="https://leetcode-cn.com/problems/search-insert-position/">搜索插入位置</a></h2><p>Leetcode 35</p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><h3 id="递归写法-1"><a href="#递归写法-1" class="headerlink" title="递归写法"></a>递归写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-search/&quot;&gt;https://leetcode-cn.com/problems/binary-search/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-二分查找&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    <category term="二分" scheme="http://example.com/categories/Leetcode/%E4%BA%8C%E5%88%86/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>面试官真的问我「分布式事务」了</title>
    <link href="http://example.com/wiki/%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9C%9F%E7%9A%84%E9%97%AE%E6%88%91%E3%80%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E3%80%8D%E4%BA%86/"/>
    <id>http://example.com/wiki/%E9%9D%A2%E8%AF%95%E5%AE%98%E7%9C%9F%E7%9A%84%E9%97%AE%E6%88%91%E3%80%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E3%80%8D%E4%BA%86/</id>
    <published>2021-09-18T09:07:46.000Z</published>
    <updated>2021-09-27T08:16:38.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>CAP定理，又被叫作布鲁尔定理。对于设计分布式系统来说(不仅仅是分布式事务)的架构师来说，CAP就是你的入门理论。</p><p>C (一致性):对某个指定的客户端来说，读操作能返回最新的写操作。对于数据分布在不同节点上的数据上来说，如果在某个节点更新了数据，那么在其他节点如果都能读取到这个最新的数据，那么就称为强一致，如果有某个节点没有读取到，那就是分布式不一致。<br>A (可用性)：非故障的节点在合理的时间内返回合理的响应(不是错误和超时的响应)。可用性的两个关键一个是合理的时间，一个是合理的响应。合理的时间指的是请求不能无限被阻塞，应该在合理的时间给出返回。合理的响应指的是系统应该明确返回结果并且结果是正确的，这里的正确指的是比如应该返回50，而不是返回40。<br>P (分区容错性):当出现网络分区后，系统能够继续工作。打个比方，这里个集群有多台机器，有台机器网络出现了问题，但是这个集群仍然可以正常工作。</p><p>熟悉CAP的人都知道，三者不能共有，如果感兴趣可以搜索CAP的证明，在分布式系统中，网络无法100%可靠，分区其实是一个必然现象，如果我们选择了CA而放弃了P，那么当发生分区现象时，为了保证一致性，这个时候必须拒绝请求，但是A又不允许，所以分布式系统理论上不可能选择CA架构，只能选择CP或者AP架构。<br>对于CP来说，放弃可用性，追求一致性和分区容错性，我们的zookeeper其实就是追求的强一致。<br>对于AP来说，放弃一致性(这里说的一致性是强一致性)，追求分区容错性和可用性，这是很多分布式系统设计时的选择，后面的BASE也是根据AP来扩展。<br>顺便一提，CAP理论中是忽略网络延迟，也就是当事务提交时，从节点A复制到节点B，但是在现实中这个是明显不可能的，所以总会有一定的时间是不一致。同时CAP中选择两个，比如你选择了CP，并不是叫你放弃A。因为P出现的概率实在是太小了，大部分的时间你仍然需要保证CA。就算分区出现了你也要为后来的A做准备，比如通过一些日志的手段，是其他机器回复至可用。</p><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写。是对CAP中AP的一个扩展</p><p>基本可用:分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。<br>软状态:允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是CAP中的不一致。<br>最终一致:最终一致是指经过一段时间后，所有节点数据都将会达到一致。</p><p>BASE解决了CAP中理论没有网络延迟，在BASE中用软状态和最终一致，保证了延迟后的一致性。BASE和 ACID 是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</p><h2 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h2><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h3><h3 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bilibili.com/video/BV1FJ411A7mV?from=search&seid=11114763225649816490&spm_id_from=333.337.0.0">bilibili 分布式事务详解</a></li><li><a href="http://blog.itpub.net/69946034/viewspace-2671341/">微服务分布式事务4种解决方案实战</a></li><li><a href="https://juejin.cn/post/6844903647197806605">再有人问你分布式事务，把这篇扔给他</a></li><li><a href="https://juejin.cn/post/6844903573667446797#heading-5">https://juejin.cn/post/6844903573667446797#heading-5</a>  </li><li><a href="https://juejin.cn/post/7012425995634343966?utm_source=gold_browser_extension">https://juejin.cn/post/7012425995634343966?utm_source=gold_browser_extension</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CAP理论&quot;&gt;&lt;a href=&quot;#CAP理论&quot; class=&quot;headerlink&quot; title=&quot;CAP理论&quot;&gt;&lt;/a&gt;CAP理论&lt;/h2&gt;&lt;p&gt;CAP定理，又被叫作布鲁尔定理。对于设计分布式系统来说(不仅仅是分布式事务)的架构师来说，CAP就是你的入门理论。&lt;</summary>
      
    
    
    
    <category term="分布式事务" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
    
    <category term="分布式" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis-高性能IO模型</title>
    <link href="http://example.com/wiki/Redis-%E9%AB%98%E6%80%A7%E8%83%BDIO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/wiki/Redis-%E9%AB%98%E6%80%A7%E8%83%BDIO%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-09-16T03:54:08.000Z</published>
    <updated>2021-09-16T07:53:17.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.cnblogs.com/liang24/p/14178730.html">Redis基础篇（二）高性能IO模型</a></li><li><a href="https://www.jianshu.com/p/dfd940e7fca2">聊聊IO多路复用之select、poll、epoll详解</a></li><li><a href="https://www.jianshu.com/p/486b0965c296">聊聊Linux 五种IO模型</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/liang24/p/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基础算法分类和思想</title>
    <link href="http://example.com/wiki/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB%E5%92%8C%E6%80%9D%E6%83%B3/"/>
    <id>http://example.com/wiki/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB%E5%92%8C%E6%80%9D%E6%83%B3/</id>
    <published>2021-09-15T11:44:40.000Z</published>
    <updated>2021-09-16T02:46:09.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的算法解题思路以及模版"><a href="#常见的算法解题思路以及模版" class="headerlink" title="常见的算法解题思路以及模版"></a>常见的算法解题思路以及模版</h1><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><p>可以参照下面👇文章：<br><a href="https://zhuanlan.zhihu.com/p/93530380">回溯算法套路详解</a>  </p><p><strong>练习题库</strong><br>都是回溯算法的题目：👇<br><a href="https://leetcode-cn.com/tag/backtracking/problemset/">https://leetcode-cn.com/tag/backtracking/problemset/</a>  </p><h2 id="整理的比较不错的资源"><a href="#整理的比较不错的资源" class="headerlink" title="整理的比较不错的资源"></a><font color=blue>整理的比较不错的资源</font></h2><p><a href="https://labuladong.gitbook.io/algo/mu-lu-ye/xue-xi-shu-ju-jie-gou-he-suan-fa-de-gao-xiao-fang-fa">📖labuladong 的算法小抄</a>  </p><p><img src="https://cdn.jsdelivr.net/gh/zabernism/image@main/gao/20210915202940.png" alt="20210915202940">  </p><p>整体来说还是相当不错的！  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见的算法解题思路以及模版&quot;&gt;&lt;a href=&quot;#常见的算法解题思路以及模版&quot; class=&quot;headerlink&quot; title=&quot;常见的算法解题思路以及模版&quot;&gt;&lt;/a&gt;常见的算法解题思路以及模版&lt;/h1&gt;&lt;h2 id=&quot;回溯算法&quot;&gt;&lt;a href=&quot;#回溯算法&quot;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>理解ClassNotFoundException与NoClassDefFoundError的区别</title>
    <link href="http://example.com/wiki/%E7%90%86%E8%A7%A3ClassNotFoundException%E4%B8%8ENoClassDefFoundError%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/wiki/%E7%90%86%E8%A7%A3ClassNotFoundException%E4%B8%8ENoClassDefFoundError%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-09-15T07:43:20.000Z</published>
    <updated>2021-09-18T06:40:55.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ClassNotFoundException"><a href="#ClassNotFoundException" class="headerlink" title="ClassNotFoundException"></a>ClassNotFoundException</h2><p>类加载时在指定路径下没有找到类文件</p><h2 id="NoClassDefFoundError"><a href="#NoClassDefFoundError" class="headerlink" title="NoClassDefFoundError"></a>NoClassDefFoundError</h2><p>1、编译时存在某个类，但是运行时却找不到</p><blockquote><p>编译完成之后，手动删除一个类的class文件</p></blockquote><p>2、类根本就没有初始化成功，结果你还把它当做正常类使用，所以这事也不小，必须抛出ERROR告诉你不能再使用了</p><p><a href="https://cloud.tencent.com/developer/article/1356060">https://cloud.tencent.com/developer/article/1356060</a></p><p><a href="https://blog.csdn.net/u012129558/article/details/81540804">https://blog.csdn.net/u012129558/article/details/81540804</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ClassNotFoundException&quot;&gt;&lt;a href=&quot;#ClassNotFoundException&quot; class=&quot;headerlink&quot; title=&quot;ClassNotFoundException&quot;&gt;&lt;/a&gt;ClassNotFoundExcepti</summary>
      
    
    
    
    
    <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Redis实现分布式锁</title>
    <link href="http://example.com/wiki/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/wiki/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-09-15T03:21:41.000Z</published>
    <updated>2021-09-15T05:20:16.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis实现分布式锁的种种细节"><a href="#Redis实现分布式锁的种种细节" class="headerlink" title="Redis实现分布式锁的种种细节"></a>Redis实现分布式锁的种种细节</h1><p><strong>1、redis分布式锁直接使用 <code>setNx</code> 获取锁🔒，<code>del key</code> 释放锁</strong></p><p>会造成 「 <font color=blue><strong>死锁</strong></font> 」的问题，获取锁的线程没有释放锁，进程死掉了，其他进程永远无法获取锁</p><p><strong>2、给锁对应的key添加过期时间不就可以解决死锁的问题了吗？</strong></p><p><code>127.0.0.1:6379&gt; SETNX lock 1    // 加锁(integer) </code></p><p><code>127.0.0.1:6379&gt; EXPIRE lock 10  // 10s后自动过期(integer) </code></p><p><font color=blue> <strong>上面两个命令有什么问题吗</strong>？</font></p><p>不是原子操作，可能 <code>expire</code>没有执行！使用如下复合命令 👇</p><p><code>127.0.0.1:6379&gt; SET lock 1 EX 10 NX</code></p><p><strong>3、这样还会存在一个问题，进程2释放的是进程1的锁</strong></p><p>进程1操作时间太久，还没有主动释放锁，锁就过期了，然后进程2获取锁，然后执行，进程2还没有执行完成，进程1执行完了，释放</p><p>锁，但是释放的是进程2的锁。「 <font color=blue><strong>释放他人锁</strong></font>」和 「 <font color=blue><strong>锁过期时间问题</strong></font>」</p><ol><li>加锁：<code>SET lock_key $unique_id EX $expire_time NX</code></li><li>操作共享资源</li><li>释放锁：Lua 脚本，先 GET 判断锁是否归属自己，再 DEL 释放锁</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 判断锁是自己的，才释放</span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;GET&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;DEL&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>4、锁过期时间不好评估怎么办？</strong></p><p><font color=blue><strong>假设一个方案：</strong></font></p><p><strong>加锁时，先设置一个过期时间，然后我们开启一个「守护线程」，定时去检测这个锁的失效时间，如果锁快要过期了，操作共享资源还未完成，那么就自动对锁进行「续期」，重新设置过期时间。</strong></p><p>如果你是 Java 技术栈，幸运的是，已经有一个库把这些工作都封装好了：<font color=blue><strong>Redisson</strong></font>。</p><p>Redisson 是一个 Java 语言实现的 Redis SDK 客户端，在使用分布式锁时，它就采用了「自动续期」的方案来避免锁过期，这个守护线程我们一般也把它叫做「看门狗」线程。</p><p><strong><font color=red>以上都是基于单机redis的角度思考的redis分布式锁的问题，主要有三点 👇</font></strong></p><p>1、死锁问题 （加过期时间解决）</p><p>2、释放他人锁 （添加线程标志）</p><p>3、锁过期时间问题 （守护线程自动续期）</p><p><strong><font color=red>如果是redis集群模式下会有哪些问题呢 👇</font></strong></p><p>在redis主从模式下，如果master节点突然宕机了，锁还没有同步到从节点是，是不是分布式锁就丢了？？？</p><p>Redis 作者提出的 Redlock 方案，是如何解决主从切换后，锁失效问题的。如何解决这个问题呢 ？ 「 **<font color=blue>RedLock</font>**」</p><p><strong>Redlock 的方案基于 2 个前提：</strong></p><ol><li>不再需要部署<strong>从库</strong>和<strong>哨兵</strong>实例，只部署<strong>主库</strong></li><li>但主库要部署多个，官方推荐至少 5 个实例</li></ol><p>也就是说，想用使用 Redlock，你至少要部署 5 个 Redis 实例，而且都是主库，它们之间没有任何关系，都是一个个孤立的实例。</p><blockquote><p><strong>注意：不是部署 Redis Cluster，就是部署 5 个简单的 Redis 实例。</strong></p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://mp.weixin.qq.com/s/ybiN5Q89wI0CnLURGUz4vw">深度剖析：Redis 分布式锁到底安全吗？看完这篇文章彻底懂了！</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis实现分布式锁的种种细节&quot;&gt;&lt;a href=&quot;#Redis实现分布式锁的种种细节&quot; class=&quot;headerlink&quot; title=&quot;Redis实现分布式锁的种种细节&quot;&gt;&lt;/a&gt;Redis实现分布式锁的种种细节&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、redi</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="分布式" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap实现简易LRU</title>
    <link href="http://example.com/wiki/LinkedHashMap%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93LRU/"/>
    <id>http://example.com/wiki/LinkedHashMap%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93LRU/</id>
    <published>2021-09-15T02:07:58.000Z</published>
    <updated>2021-09-15T02:09:16.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目 #"></a>题目 <a href="https://hadyang.com/interview/docs/leetcode/LRUCache/#%E9%A2%98%E7%9B%AE">#</a></h2><p>运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。 写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p>进阶:</p><p>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity , <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        Integer integer = <span class="keyword">super</span>.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> integer == <span class="keyword">null</span> ? -<span class="number">1</span> : integer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; <span class="keyword">this</span>.capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LruCache cache = <span class="keyword">new</span> LruCache(<span class="number">2</span>);</span><br><span class="line">        cache.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        cache.put(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        System.err.println(<span class="string">&quot;get1 -&gt; &quot;</span> + cache.get(<span class="number">1</span>));</span><br><span class="line">        System.err.println(<span class="string">&quot;get2 -&gt; &quot;</span> + cache.get(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        System.err.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cache.put(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        System.err.println(<span class="string">&quot;get1 -&gt; &quot;</span> + cache.get(<span class="number">1</span>));</span><br><span class="line">        System.err.println(<span class="string">&quot;get2 -&gt; &quot;</span> + cache.get(<span class="number">2</span>));</span><br><span class="line">        System.err.println(<span class="string">&quot;get3 -&gt; &quot;</span> + cache.get(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.err.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cache.put(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">        System.err.println(<span class="string">&quot;get1 -&gt; &quot;</span> + cache.get(<span class="number">1</span>));</span><br><span class="line">        System.err.println(<span class="string">&quot;get2 -&gt; &quot;</span> + cache.get(<span class="number">2</span>));</span><br><span class="line">        System.err.println(<span class="string">&quot;get3 -&gt; &quot;</span> + cache.get(<span class="number">3</span>));</span><br><span class="line">        System.err.println(<span class="string">&quot;get4 -&gt; &quot;</span> + cache.get(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目 #&quot;&gt;&lt;/a&gt;题目 &lt;a href=&quot;https://hadyang.com/interview/docs/leetcode/LRUCache/#%E9%A2%98%E7</summary>
      
    
    
    
    
    <category term="LRU" scheme="http://example.com/tags/LRU/"/>
    
  </entry>
  
  <entry>
    <title>Redis操作为什么是原子性的？</title>
    <link href="http://example.com/wiki/Redis%E6%93%8D%E4%BD%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%AD%90%E6%80%A7%E7%9A%84%EF%BC%9F/"/>
    <id>http://example.com/wiki/Redis%E6%93%8D%E4%BD%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%AD%90%E6%80%A7%E7%9A%84%EF%BC%9F/</id>
    <published>2021-09-14T02:46:36.000Z</published>
    <updated>2021-09-14T03:19:40.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis原则性操作"><a href="#Redis原则性操作" class="headerlink" title="Redis原则性操作"></a>Redis原则性操作</h2><p>对Redis来说，执行get、set以及eval等API，都是一个一个的任务，这些任务都会由Redis的线程去负责执行，任务要么执行成功，要么</p><p>执行失败，这就是Redis的命令是原子性的原因。</p><blockquote><p>Redis本身提供的所有API都是原子操作，Redis中的事务其实是要保证批量操作的原子性。</p></blockquote><h2 id="事务命令"><a href="#事务命令" class="headerlink" title="事务命令"></a>事务命令</h2><p>MULTI 、 EXEC 、 DISCARD 和 WATCH 是 Redis 事务相关的命令。事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p><ul><li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li></ul><p>Discard:Redis Discard 命令用于取消事务，放弃执行事务块内的所有命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如何开启一个事务</span><br><span class="line">watch key1 key2 . . . （监听相关key）</span><br><span class="line">multi (开启事务)</span><br><span class="line">// 对监听key的一些操作</span><br><span class="line">exec（执行事务）</span><br><span class="line">discard（取消事务）</span><br></pre></td></tr></table></figure><p><strong>EXEC</strong> 命令负责触发并执行事务中的所有命令：如果客户端在使用 MULTI 开启了一个事务之后，却因为断线而没有成功执行 EXEC ，那么事务中的所有命令都不会被执行。</p><p>另一方面，如果客户端成功在开启事务之后执行 EXEC ，那么事务中的所有命令都会被执行。</p><h3 id="如果redis备份采用的是AOF的方式，事务执行一半被终止，会怎样？"><a href="#如果redis备份采用的是AOF的方式，事务执行一半被终止，会怎样？" class="headerlink" title="如果redis备份采用的是AOF的方式，事务执行一半被终止，会怎样？"></a><font color=blue><strong>如果redis备份采用的是AOF的方式，事务执行一半被终止，会怎样？</strong></font></h3><p>当使用 AOF 方式做持久化的时候， Redis 会使用单个 write(2) 命令将事务写入到磁盘中。</p><p>然而，如果 Redis 服务器因为某些原因被管理员杀死，或者遇上某种硬件故障，那么可能只有部分事务命令会被成功写入到磁盘中。</p><p>如果 Redis 在重新启动时发现 AOF 文件出了这样的问题，那么它会退出，并汇报一个错误。</p><p>使用 <code>redis-check-aof</code> 程序可以修复这一问题：它会移除 AOF 文件中不完整事务的信息，确保服务器可以顺利启动。</p><p>从 2.2 版本开始，Redis 还可以通过乐观锁（optimistic lock）实现 CAS （check-and-set）操作，具体信息请参考文档的后半部分。</p><h3 id="如果是集群下，watch命令有没有什么局限性？"><a href="#如果是集群下，watch命令有没有什么局限性？" class="headerlink" title="如果是集群下，watch命令有没有什么局限性？"></a><font color=blue>如果是集群下，watch命令有没有什么局限性？</font></h3><p>有没有想过为什么监听多个落在不同节点上的<code>key</code>，不同槽位的也不可以，会不被允许？在单节点下，<code>Redis</code>单线程执行，能够保证原子性，但在不同节点下，就是多进程多线程的问题，<code>Watch</code>自然就不能用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.cnblogs.com/lori/p/9300087.html">知其所以然~redis的原子性</a></li><li><a href="https://juejin.cn/post/6844904098987245576">Redis实现原子操作的两种方式与商品入库出库解决方案</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis原则性操作&quot;&gt;&lt;a href=&quot;#Redis原则性操作&quot; class=&quot;headerlink&quot; title=&quot;Redis原则性操作&quot;&gt;&lt;/a&gt;Redis原则性操作&lt;/h2&gt;&lt;p&gt;对Redis来说，执行get、set以及eval等API，都是一个一个的任务</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>大厂是如何进行【负载均衡】的</title>
    <link href="http://example.com/wiki/%E5%A4%A7%E5%8E%82%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E3%80%90%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E3%80%91%E7%9A%84/"/>
    <id>http://example.com/wiki/%E5%A4%A7%E5%8E%82%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E3%80%90%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E3%80%91%E7%9A%84/</id>
    <published>2021-09-13T12:46:14.000Z</published>
    <updated>2021-09-27T08:14:13.596Z</updated>
    
    <content type="html"><![CDATA[<p>轮训算法 随机算法</p><p>平滑加权轮询算法</p><p>一致性哈希算法</p><p>最小活跃数算法</p><h2 id="权重随机"><a href="#权重随机" class="headerlink" title="权重随机"></a>权重随机</h2><p>1、存到一个list中，权重高的存多份，权重低的，存少份，具体按照权重去比</p><p>2、把权重展示在坐标轴上，然后按照随机产生的数，在坐标轴上的分布来判断</p><p>curl -XPUT -u elastic ‘<a href="http://localhost:9200/_xpack/security/user/kibana/_password&#39;">http://localhost:9200/_xpack/security/user/kibana/_password&#39;</a>  -H ‘Content-Type: application/json’ -d ‘{  “password” : “redeem_123456” }’</p><p>curl -u my_admin -XPUT ‘<a href="http://localhost:9200/_xpack/security/user/elastic/_password?pretty&#39;">http://localhost:9200/_xpack/security/user/elastic/_password?pretty&#39;</a> -H ‘Content-Type: application/json’ -d’ {  “password” : “new_password” } ‘ </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.bilibili.com/video/BV1vz4y1679x?p=45">2021年阿里巴巴JAVA面试100道</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;轮训算法 随机算法&lt;/p&gt;
&lt;p&gt;平滑加权轮询算法&lt;/p&gt;
&lt;p&gt;一致性哈希算法&lt;/p&gt;
&lt;p&gt;最小活跃数算法&lt;/p&gt;
&lt;h2 id=&quot;权重随机&quot;&gt;&lt;a href=&quot;#权重随机&quot; class=&quot;headerlink&quot; title=&quot;权重随机&quot;&gt;&lt;/a&gt;权重随机&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
</feed>
